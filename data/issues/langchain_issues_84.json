[
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5615",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5615/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5615/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5615/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5615",
        "id": 1738108763,
        "node_id": "I_kwDOIPDwls5nmW9b",
        "number": 5615,
        "title": "Opensearch for Indexing and Retrieval ",
        "user": {
            "login": "finch986",
            "id": 3706696,
            "node_id": "MDQ6VXNlcjM3MDY2OTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3706696?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/finch986",
            "html_url": "https://github.com/finch986",
            "followers_url": "https://api.github.com/users/finch986/followers",
            "following_url": "https://api.github.com/users/finch986/following{/other_user}",
            "gists_url": "https://api.github.com/users/finch986/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/finch986/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/finch986/subscriptions",
            "organizations_url": "https://api.github.com/users/finch986/orgs",
            "repos_url": "https://api.github.com/users/finch986/repos",
            "events_url": "https://api.github.com/users/finch986/events{/privacy}",
            "received_events_url": "https://api.github.com/users/finch986/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-02T12:25:19Z",
        "updated_at": "2023-11-05T13:43:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nI am using Python for INdexing Document to OpenELastic search \r\n\r\n\r\nPython for Indexing---->\r\n documents = loader.load()\r\n text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\r\n docs = text_splitter.split_documents(documents)\r\nvs = OpenSearchVectorSearch.from_documents(\r\n            docs, \r\n            embeddings,\r\n            opensearch_url=\"https://search-bterai-opensearch-gmtgf5ukflbg77xlwenvwko4gm.us-west-2.es.amazonaws.com\", \r\n            http_auth=(\"XXXX\", \"XXXX\"),     \r\n            use_ssl = False,\r\n            verify_certs = False,\r\n            ssl_assert_hostname = False,\r\n            ssl_show_warn = False,\r\n            index_name=\"test_sidsfarm\")\r\n\r\nNodejS for Querying\r\n\r\nconst client = new Client({\r\n    nodes: [process.env.OPENSEARCH_URL ?? \"https://X:X@search-bterai-opensearch-gmtgf5ukflbg77xlwenvwko4gm.us-west-2.es.amazonaws.com\"],        \r\n});\r\n\r\nconst vectorStore = new OpenSearchVectorStore(new OpenAIEmbeddings(), {\r\n    client,\r\n    indexName: \"test_sidsfarm\"\r\n});\r\nconst chain = VectorDBQAChain.fromLLM(model, vectorStore, {\r\n    returnSourceDocuments: true,\r\n  });\r\n\r\nres = await chain.call({ query: input });\r\n\r\n\r\nIts Giving me error below , Please help!!\r\n\r\nfailed to create query: Field 'embedding' is not knn_vector type.\n\n### Who can help?\n\n@hwchase17 \n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nALready mentioned steps above\n\n### Expected behavior\n\nIt should work out of the box irrespective of platforms ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5615/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5615/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5614",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5614/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5614/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5614/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5614",
        "id": 1738102515,
        "node_id": "I_kwDOIPDwls5nmVbz",
        "number": 5614,
        "title": "MarkdownTextSplitter: multiple repeat at position 4 (line 3, column 2)",
        "user": {
            "login": "communiteq",
            "id": 5292699,
            "node_id": "MDQ6VXNlcjUyOTI2OTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5292699?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/communiteq",
            "html_url": "https://github.com/communiteq",
            "followers_url": "https://api.github.com/users/communiteq/followers",
            "following_url": "https://api.github.com/users/communiteq/following{/other_user}",
            "gists_url": "https://api.github.com/users/communiteq/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/communiteq/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/communiteq/subscriptions",
            "organizations_url": "https://api.github.com/users/communiteq/orgs",
            "repos_url": "https://api.github.com/users/communiteq/repos",
            "events_url": "https://api.github.com/users/communiteq/events{/privacy}",
            "received_events_url": "https://api.github.com/users/communiteq/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T12:20:41Z",
        "updated_at": "2023-06-05T23:40:28Z",
        "closed_at": "2023-06-05T23:40:28Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\nlangchain 0.0.188\r\npython 3.8.10\r\n\r\n\r\n### Who can help?\r\n\r\n_No response_\r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [ ] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [X] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\n```\r\nfrom langchain.docstore.document import Document\r\nfrom langchain.text_splitter import MarkdownTextSplitter\r\n\r\n# of course this is part of a larger markdown document, but this is the minimal string to reproduce\r\ntxt = \"\\n\\n***\\n\\n\" \r\n\r\ndoc = Document(page_content=txt)\r\nmarkdown_splitter = MarkdownTextSplitter(chunk_size=1000, chunk_overlap=0)\r\nsplitted = markdown_splitter.split_documents([doc])\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"t.py\", line 9, in <module>\r\n    splitted = markdown_splitter.split_documents([doc])\r\n  File \"/home/richard/.local/lib/python3.8/site-packages/langchain/text_splitter.py\", line 101, in split_documents\r\n    return self.create_documents(texts, metadatas=metadatas)\r\n  File \"/home/richard/.local/lib/python3.8/site-packages/langchain/text_splitter.py\", line 88, in create_documents\r\n    for chunk in self.split_text(text):\r\n  File \"/home/richard/.local/lib/python3.8/site-packages/langchain/text_splitter.py\", line 369, in split_text\r\n    return self._split_text(text, self._separators)\r\n  File \"/home/richard/.local/lib/python3.8/site-packages/langchain/text_splitter.py\", line 346, in _split_text\r\n    splits = _split_text(text, separator, self._keep_separator)\r\n  File \"/home/richard/.local/lib/python3.8/site-packages/langchain/text_splitter.py\", line 37, in _split_text\r\n    _splits = re.split(f\"({separator})\", text)\r\n  File \"/usr/lib/python3.8/re.py\", line 231, in split\r\n    return _compile(pattern, flags).split(string, maxsplit)\r\n  File \"/usr/lib/python3.8/re.py\", line 304, in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n  File \"/usr/lib/python3.8/sre_compile.py\", line 764, in compile\r\n    p = sre_parse.parse(p, flags)\r\n  File \"/usr/lib/python3.8/sre_parse.py\", line 948, in parse\r\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\r\n  File \"/usr/lib/python3.8/sre_parse.py\", line 443, in _parse_sub\r\n    itemsappend(_parse(source, state, verbose, nested + 1,\r\n  File \"/usr/lib/python3.8/sre_parse.py\", line 834, in _parse\r\n    p = _parse_sub(source, state, sub_verbose, nested + 1)\r\n  File \"/usr/lib/python3.8/sre_parse.py\", line 443, in _parse_sub\r\n    itemsappend(_parse(source, state, verbose, nested + 1,\r\n  File \"/usr/lib/python3.8/sre_parse.py\", line 671, in _parse\r\n    raise source.error(\"multiple repeat\",\r\nre.error: multiple repeat at position 4 (line 3, column 2)\r\n```\r\n\r\n### Expected behavior\r\n\r\nsplitted contains splitted markdown and no errors occur",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5614/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5614/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5613",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5613/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5613/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5613/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5613",
        "id": 1738029618,
        "node_id": "PR_kwDOIPDwls5R_l3w",
        "number": 5613,
        "title": "Scores are explained in vectorestore docs",
        "user": {
            "login": "berkedilekoglu",
            "id": 19657350,
            "node_id": "MDQ6VXNlcjE5NjU3MzUw",
            "avatar_url": "https://avatars.githubusercontent.com/u/19657350?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/berkedilekoglu",
            "html_url": "https://github.com/berkedilekoglu",
            "followers_url": "https://api.github.com/users/berkedilekoglu/followers",
            "following_url": "https://api.github.com/users/berkedilekoglu/following{/other_user}",
            "gists_url": "https://api.github.com/users/berkedilekoglu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/berkedilekoglu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/berkedilekoglu/subscriptions",
            "organizations_url": "https://api.github.com/users/berkedilekoglu/orgs",
            "repos_url": "https://api.github.com/users/berkedilekoglu/repos",
            "events_url": "https://api.github.com/users/berkedilekoglu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/berkedilekoglu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-02T11:33:24Z",
        "updated_at": "2023-06-06T03:39:49Z",
        "closed_at": "2023-06-06T03:39:49Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5613",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5613",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5613.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5613.patch",
            "merged_at": "2023-06-06T03:39:49Z"
        },
        "body": "# Scores in Vectorestores' Docs Are Explained\r\n\r\nFollowing vectorestores can return scores with similar documents by using `similarity_search_with_score`:\r\n- chroma\r\n- docarray_hnsw\r\n- docarray_in_memory\r\n- faiss\r\n- myscale\r\n- qdrant\r\n- supabase\r\n- vectara\r\n- weaviate\r\n\r\nHowever, in documents, these scores were either not explained at all or explained in a way that could lead to misunderstandings (e.g., FAISS). For instance in FAISS document: if we consider the score returned by the function as a similarity score, we understand that a document returning a higher score is more similar to the source document. However, since the scores returned by the function are distance scores, we should understand that smaller scores correspond to more similar documents.\r\n\r\nFor the libraries other than Vectara, I wrote the scores they use by investigating from the source libraries. Since I couldn't be certain about the score metric used by Vectara, I didn't make any changes in its documentation. The links mentioned in Vectara's documentation became broken due to updates, so I replaced them with working ones.\r\n\r\nVectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\nmy twitter: [berkedilekoglu](https://twitter.com/berkedilekoglu)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5613/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5613/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5612",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5612/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5612/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5612/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5612",
        "id": 1737972899,
        "node_id": "PR_kwDOIPDwls5R_ZOb",
        "number": 5612,
        "title": "PassthroughOutputParser",
        "user": {
            "login": "nfcampos",
            "id": 56902,
            "node_id": "MDQ6VXNlcjU2OTAy",
            "avatar_url": "https://avatars.githubusercontent.com/u/56902?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nfcampos",
            "html_url": "https://github.com/nfcampos",
            "followers_url": "https://api.github.com/users/nfcampos/followers",
            "following_url": "https://api.github.com/users/nfcampos/following{/other_user}",
            "gists_url": "https://api.github.com/users/nfcampos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nfcampos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nfcampos/subscriptions",
            "organizations_url": "https://api.github.com/users/nfcampos/orgs",
            "repos_url": "https://api.github.com/users/nfcampos/repos",
            "events_url": "https://api.github.com/users/nfcampos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nfcampos/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5680700863,
                "node_id": "LA_kwDOIPDwls8AAAABUpidvw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:enhancement",
                "name": "auto:enhancement",
                "color": "C2E0C6",
                "default": false,
                "description": "A large net-new component, integration, or chain. Use sparingly. The largest features"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T10:59:30Z",
        "updated_at": "2023-07-26T07:36:25Z",
        "closed_at": "2023-07-26T07:36:25Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": true,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5612",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5612",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5612.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5612.patch",
            "merged_at": null
        },
        "body": "# Your PR Title (What it does)\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes # (issue)\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5612/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5612/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5611",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5611/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5611/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5611/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5611",
        "id": 1737940580,
        "node_id": "I_kwDOIPDwls5nlt5k",
        "number": 5611,
        "title": "create_csv_agent: How to save a dataframe once information has been extracted using create_csv_agent.",
        "user": {
            "login": "dhruvshandilya-bidgely",
            "id": 134032738,
            "node_id": "U_kgDOB_0tYg",
            "avatar_url": "https://avatars.githubusercontent.com/u/134032738?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dhruvshandilya-bidgely",
            "html_url": "https://github.com/dhruvshandilya-bidgely",
            "followers_url": "https://api.github.com/users/dhruvshandilya-bidgely/followers",
            "following_url": "https://api.github.com/users/dhruvshandilya-bidgely/following{/other_user}",
            "gists_url": "https://api.github.com/users/dhruvshandilya-bidgely/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dhruvshandilya-bidgely/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dhruvshandilya-bidgely/subscriptions",
            "organizations_url": "https://api.github.com/users/dhruvshandilya-bidgely/orgs",
            "repos_url": "https://api.github.com/users/dhruvshandilya-bidgely/repos",
            "events_url": "https://api.github.com/users/dhruvshandilya-bidgely/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dhruvshandilya-bidgely/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-06-02T10:38:14Z",
        "updated_at": "2023-09-30T16:06:49Z",
        "closed_at": "2023-09-30T16:06:48Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nSo, I am working on a project that involves data extraction from csv files and involves creating charts and graphs from them.\r\n\r\nbelow is a snippet of code for the agent that I have created : \r\n\r\n```python\r\ntools = [\r\n    python_repl_tool,\r\n    csv_ident_tool,\r\n    csv_extractor_tool,\r\n]\r\n\r\n# Adding memory to our agent\r\nfrom langchain.agents import ZeroShotAgent\r\nfrom langchain.memory import ConversationBufferMemory\r\n\r\nprefix = \"\"\"Have a conversation with a human, answering the following questions as best you can. You have access to the following tools:\"\"\"\r\nsuffix = \"\"\"Begin!\"\r\n\r\n{chat_history}\r\nQuestion: {input}\r\n{agent_scratchpad}\"\"\"\r\n\r\nprompt = ZeroShotAgent.create_prompt(\r\n    tools=tools, \r\n    prefix=prefix, \r\n    suffix=suffix, \r\n    input_variables=[\"input\", \"chat_history\", \"agent_scratchpad\"]\r\n)\r\n\r\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\r\n\r\n# Creating our agent\r\nfrom langchain.chains import LLMChain\r\nfrom langchain.llms import OpenAI\r\nfrom langchain.agents import AgentExecutor\r\n\r\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\r\nagent = ZeroShotAgent(llm_chain=llm_chain, tools=tools, verbose=True)\r\nagent_chain = AgentExecutor.from_agent_and_tools(agent=agent, tools=tools, verbose=True, memory=memory)\r\n``` \r\n\r\nWhere csv_ident tool is a custom tool I created to identify csv file in a prompt.\r\nExample:\r\nprompt : What is the mean of age in data.csv?\r\ncompletion : data.csv\r\n\r\ncsv_extractor_tool is as follows : \r\n\r\n```python\r\ndef csv_extractor(json_request: str):\r\n    '''\r\n    Useful for extracting data from a csv file.\r\n    \r\n    Takes a JSON dictionary as input in the form:\r\n        { \"prompt\":\"<question>\", \"path\":\"<file_name>\" }\r\n\r\n    Example:\r\n        { \"prompt\":\"Find the maximum age in xyz.csv\", \"path\":\"xyz.csv\" }\r\n\r\n    Args:\r\n        request (str): The JSON dictionary input string.\r\n\r\n    Returns:\r\n        The required information from csv file.\r\n    '''\r\n    arguments_dictionary = json.loads(json_request)\r\n    question = arguments_dictionary[\"prompt\"]\r\n    file_name = arguments_dictionary[\"path\"]\r\n    csv_agent = create_csv_agent(llm=llm,path=file_name,verbose=True)\r\n    return csv_agent.run(question)\r\n\r\nrequest_format = '{{\"prompt\":\"<question>\",\"path\":\"<file_name>\"}}'\r\ndescription = f'Useful for working with a csv file. Input should be JSON in the following format: {request_format}'\r\n\r\ncsv_extractor_tool = Tool(\r\n    name=\"csv_extractor\",\r\n    func=csv_extractor,\r\n    description=description,\r\n    verbose=True,\r\n)\r\n``` \r\n\r\nSo I am creating a csv_agent and passing the prompt and path to it. This handles the data extraction type tasks easily, but I produces poor results while making plots. \r\n\r\nTill now I have tried creating a new LLMChain in which I passed prompt comprising of several examples as given below:\r\n\r\n```\r\ninput :{{\"prompt\":\"Load data.csv and find the mean of age column.\",\"path\":\"data.csv\"}}\r\ncompletion :import pandas as pd\r\ndf = pd.read_csv('data.csv')\r\ndf = df['Age'].mean()\r\nprint(df)\r\ndf.to_csv('.\\\\bin\\\\file.csv')\r\n``` \r\n\r\nBut this does not work as the LLM cannot know beforehand what are the exact column name and generating such a code is short-sighted and produces errors.\r\n\r\nI have also tried taking a callbacks based approach where in the on_tool_end() function I was trying to save the dataframe.\r\n\r\nIs there any way to make csv_agent save the dataframe in a bin folder after it is done extracting the information, which I can pass to my custom plot creating tool.\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5611/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5611/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5610",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5610/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5610/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5610/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5610",
        "id": 1737934232,
        "node_id": "PR_kwDOIPDwls5R_Qmm",
        "number": 5610,
        "title": "removing client+namespace in favor of collection",
        "user": {
            "login": "P-E-B",
            "id": 38215315,
            "node_id": "MDQ6VXNlcjM4MjE1MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/38215315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/P-E-B",
            "html_url": "https://github.com/P-E-B",
            "followers_url": "https://api.github.com/users/P-E-B/followers",
            "following_url": "https://api.github.com/users/P-E-B/following{/other_user}",
            "gists_url": "https://api.github.com/users/P-E-B/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/P-E-B/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/P-E-B/subscriptions",
            "organizations_url": "https://api.github.com/users/P-E-B/orgs",
            "repos_url": "https://api.github.com/users/P-E-B/repos",
            "events_url": "https://api.github.com/users/P-E-B/events{/privacy}",
            "received_events_url": "https://api.github.com/users/P-E-B/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T10:34:04Z",
        "updated_at": "2023-06-03T23:27:32Z",
        "closed_at": "2023-06-03T23:27:32Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5610",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5610",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5610.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5610.patch",
            "merged_at": "2023-06-03T23:27:32Z"
        },
        "body": "removing client+namespace in favor of collection for an easier instantiation and to be similar to the typescript library\r\n\r\n@dev2049 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5610/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5610/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5609",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5609/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5609/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5609/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5609",
        "id": 1737917917,
        "node_id": "PR_kwDOIPDwls5R_M9N",
        "number": 5609,
        "title": "Raise an exception in MKRL and Chat Output Parsers if parsing text which contains both an action and a final answer",
        "user": {
            "login": "nathan-az",
            "id": 42650258,
            "node_id": "MDQ6VXNlcjQyNjUwMjU4",
            "avatar_url": "https://avatars.githubusercontent.com/u/42650258?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathan-az",
            "html_url": "https://github.com/nathan-az",
            "followers_url": "https://api.github.com/users/nathan-az/followers",
            "following_url": "https://api.github.com/users/nathan-az/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathan-az/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathan-az/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathan-az/subscriptions",
            "organizations_url": "https://api.github.com/users/nathan-az/orgs",
            "repos_url": "https://api.github.com/users/nathan-az/repos",
            "events_url": "https://api.github.com/users/nathan-az/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathan-az/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T10:24:47Z",
        "updated_at": "2023-06-05T00:19:22Z",
        "closed_at": "2023-06-04T21:40:49Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5609",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5609",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5609.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5609.patch",
            "merged_at": "2023-06-04T21:40:49Z"
        },
        "body": "Raises exception if OutputParsers receive a response with both a valid action and a final answer\r\n\r\nCurrently, if an OutputParser receives a response which includes both an action and a final answer, they return a FinalAnswer object. This allows the parser to accept responses which propose an action and hallucinate an answer without the action being parsed or taken by the agent.\r\n\r\nThis PR changes the logic to:\r\n1. store a variable checking whether a response contains the `FINAL_ANSWER_ACTION` (this is the easier condition to check). \r\n2. store a variable checking whether the response contains a valid action\r\n3. if both are present, raise a new exception stating that both are present\r\n4. if an action is present, return an AgentAction\r\n5. if an answer is present, return an AgentAnswer\r\n6. if neither is present, raise the relevant exception based around the action format (these have been kept consistent with the prior exception messages)\r\n\r\nDisclaimer:\r\n* Existing mock data included strings which did include an action and an answer. This might indicate that prioritising returning AgentAnswer was always correct, and I am patching out desired behaviour? @hwchase17 to advice. Curious if there are allowed cases where this is not hallucinating, and we do want the LLM to output an action which isn't taken.\r\n* I have not passed `send_to_llm` through this new exception\r\n\r\nFixes #5601 \r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@hwchase17 - project lead\r\n@vowelparrot",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5609/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5609/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5608",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5608/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5608/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5608/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5608",
        "id": 1737908101,
        "node_id": "I_kwDOIPDwls5nll-F",
        "number": 5608,
        "title": "Issue: ConversationalRetrievalQAChain returns the qaTemplate condensed question as the first token",
        "user": {
            "login": "seakkus",
            "id": 2848160,
            "node_id": "MDQ6VXNlcjI4NDgxNjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2848160?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seakkus",
            "html_url": "https://github.com/seakkus",
            "followers_url": "https://api.github.com/users/seakkus/followers",
            "following_url": "https://api.github.com/users/seakkus/following{/other_user}",
            "gists_url": "https://api.github.com/users/seakkus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seakkus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seakkus/subscriptions",
            "organizations_url": "https://api.github.com/users/seakkus/orgs",
            "repos_url": "https://api.github.com/users/seakkus/repos",
            "events_url": "https://api.github.com/users/seakkus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seakkus/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-06-02T10:19:03Z",
        "updated_at": "2023-09-08T04:02:54Z",
        "closed_at": "2023-06-21T08:29:46Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nI am using the ConversationalRetrievalQAChain to retrieve answers for questions while condensing the chat history to a standalone question. The issue I am facing is that the first token returned by the chain.call handleLLMNewToken is the standalone condensed question when there is a chat_history provided. Ideally, I do not want the condensed question to be sent via the handleLLMNewToken instead I want just the answer tokens. Is there any way to achieve that? Here is the code I am running:\r\n\r\n`import { CallbackManager } from \"langchain/callbacks\";\r\nimport { ConversationalRetrievalQAChain } from \"langchain/chains\";\r\nimport { ChatOpenAI } from \"langchain/chat_models\";\r\nimport { PineconeStore } from \"langchain/vectorstores/pinecone\";\r\n\r\nconst CONDENSE_PROMPT = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\r\n\r\nChat History:\r\n{chat_history}\r\nFollow Up Input: {question}\r\nStandalone question:`;\r\n\r\nconst QA_PROMPT = `You are an AI assistant. Use the following pieces of context to answer the question at the end.\r\nIf you don't know the answer, just say you don't know. DO NOT try to make up an answer.\r\nIf the question is not related to the context, politely respond that you are tuned to only answer questions that are related to the context.\r\n\r\n{context}\r\n\r\nQuestion: {question}\r\nHelpful answer in markdown:`;\r\n\r\nexport const makeChain = (\r\n    vectorstore: PineconeStore,\r\n    onTokenReceived: (data: string) => void\r\n) => {\r\n    const model = new ChatOpenAI({\r\n        temperature: 0,\r\n        streaming: true,\r\n        modelName: \"gpt-3.5-turbo\",\r\n        openAIApiKey: process.env.OPENAI_API_KEY as string,\r\n        callbackManager: CallbackManager.fromHandlers({\r\n            async handleLLMNewToken(token) {\r\n                onTokenReceived(token);\r\n            },\r\n            async handleLLMEnd(result) {},\r\n        }),\r\n    });\r\n\r\n    return ConversationalRetrievalQAChain.fromLLM(\r\n        model,\r\n        vectorstore.asRetriever(),\r\n        {\r\n            qaTemplate: QA_PROMPT,\r\n            questionGeneratorTemplate: CONDENSE_PROMPT,\r\n            returnSourceDocuments: true, // The number of source documents returned is 4 by default\r\n        }\r\n    );\r\n};\r\n`\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5608/reactions",
            "total_count": 3,
            "+1": 3,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5608/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5607",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5607/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5607/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5607/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5607",
        "id": 1737860885,
        "node_id": "I_kwDOIPDwls5nlacV",
        "number": 5607,
        "title": "Issue: How to let Agent act in a more consistent way, e.g., not jumping from a tool to another before a task is finished",
        "user": {
            "login": "jasonliu119",
            "id": 9408153,
            "node_id": "MDQ6VXNlcjk0MDgxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9408153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jasonliu119",
            "html_url": "https://github.com/jasonliu119",
            "followers_url": "https://api.github.com/users/jasonliu119/followers",
            "following_url": "https://api.github.com/users/jasonliu119/following{/other_user}",
            "gists_url": "https://api.github.com/users/jasonliu119/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jasonliu119/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jasonliu119/subscriptions",
            "organizations_url": "https://api.github.com/users/jasonliu119/orgs",
            "repos_url": "https://api.github.com/users/jasonliu119/repos",
            "events_url": "https://api.github.com/users/jasonliu119/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jasonliu119/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-02T09:52:25Z",
        "updated_at": "2023-09-18T16:09:29Z",
        "closed_at": "2023-09-18T16:09:28Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nHi,\r\n\r\nI am using Langchain to implement a customer service agent. I am using AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION and ConversationBufferMemory.\r\n\r\nFindings:\r\n\r\n1. the Agent works very well with lookup & retrieve QA, e.g., what is the material of a t-shirt, how long does it take to ship...\r\n\r\n2. However, the Agent failed to process a task consistently.\r\n\r\n- For example, Image the agent has two tools: [cancel-order-tool] & [size-lookup-tool]. \r\n- Now the user wants to cancel an order.\r\n- User says: \"I want to cancel the order of the XYZ t-shirt.\"\r\n- Agent using [cancel-order-tool]: \"Sorry to hear that. May I know why you want to cancel the order?\"\r\n- User: \"The size is too big\"\r\n- Agent using [size-question-tool]: Please look up the size in the website size chart. \r\n                    ---> this is a wrong answer. The agent switched from [cancel-order-tool] to [size-lookup-tool].\r\n\r\nHow can I implement the consistency here? So that the Agent will continue to process the cancel-order issue instead of jumping into the size QA.\r\n\r\nI think consistency is very important to the customer service application where we have kind of strict SOPs.\r\n\n\n### Suggestion:\n\n\r\nMaybe I should overwrite the plan function of the agent so that it can plan & act in a more consistent way? E.g., implement a state transit machine",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5607/reactions",
            "total_count": 2,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5607/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5606",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5606/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5606/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5606/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5606",
        "id": 1737848873,
        "node_id": "I_kwDOIPDwls5nlXgp",
        "number": 5606,
        "title": "Issue: <Please write a comprehensive title after the 'Issue: ' prefix>",
        "user": {
            "login": "jasonliu119",
            "id": 9408153,
            "node_id": "MDQ6VXNlcjk0MDgxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9408153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jasonliu119",
            "html_url": "https://github.com/jasonliu119",
            "followers_url": "https://api.github.com/users/jasonliu119/followers",
            "following_url": "https://api.github.com/users/jasonliu119/following{/other_user}",
            "gists_url": "https://api.github.com/users/jasonliu119/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jasonliu119/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jasonliu119/subscriptions",
            "organizations_url": "https://api.github.com/users/jasonliu119/orgs",
            "repos_url": "https://api.github.com/users/jasonliu119/repos",
            "events_url": "https://api.github.com/users/jasonliu119/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jasonliu119/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T09:46:27Z",
        "updated_at": "2023-06-02T09:47:06Z",
        "closed_at": "2023-06-02T09:47:06Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nHi,\r\n\r\nI am using Langchain to implement a customer service agent. I am using AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION and ConversationBufferMemory.\r\n\r\nFindings:\r\n\r\n1. the Agent works very well with lookup & retrieve QA, e.g., what is the material of a t-shirt, how long does it take to ship...\r\n\r\n3. However, the Agent failed to process a task consistently. \r\n      -  For example, Image the agent has two tools: \"cancel-order-tool\" & \"size-lookup-tool\". Now the user wants to return a t-shirt.\r\n      - User says: I want to return my t-shirt.\r\n      - Agent: \"using cancel-order-tool\" sorry to hear that. May I know why you want to return it?\r\n      - User: the size is too big\r\n      - Agent: \"using size-question-tool\" Please look up the size in the website size chart. ---> this is a wrong answer. The agent switched from \"cancel-order-tool\" to \"size-question-tool\".\r\n\r\nHow can I implement the consistency here? So that the Agent will continue to process the cancel-order issue instead of jumping into the size QA.\r\n\r\nI think consistency is very important to the customer service application where we have kind of strict SOPs.\n\n### Suggestion:\n\nMaybe I should overwrite the plan function of the agent so that it can process in a more consistent way?",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5606/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5606/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5605",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5605/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5605/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5605/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5605",
        "id": 1737843814,
        "node_id": "I_kwDOIPDwls5nlWRm",
        "number": 5605,
        "title": "Issue: How to let Agent behave in a more consistent way, e.g., under my customer service SOP?",
        "user": {
            "login": "jasonliu119",
            "id": 9408153,
            "node_id": "MDQ6VXNlcjk0MDgxNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9408153?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jasonliu119",
            "html_url": "https://github.com/jasonliu119",
            "followers_url": "https://api.github.com/users/jasonliu119/followers",
            "following_url": "https://api.github.com/users/jasonliu119/following{/other_user}",
            "gists_url": "https://api.github.com/users/jasonliu119/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jasonliu119/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jasonliu119/subscriptions",
            "organizations_url": "https://api.github.com/users/jasonliu119/orgs",
            "repos_url": "https://api.github.com/users/jasonliu119/repos",
            "events_url": "https://api.github.com/users/jasonliu119/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jasonliu119/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T09:43:30Z",
        "updated_at": "2023-06-02T09:44:59Z",
        "closed_at": "2023-06-02T09:44:59Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nHi,\r\n\r\nI am using Langchain to implement a customer service agent. I am using AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION and ConversationBufferMemory.\r\n\r\nFindings:\r\n\r\n1. the Agent works very well with lookup & retrieve QA, e.g., what is the material of a t-shirt, how long does it take to ship...\r\n\r\n3. However, the Agent failed to process a task consistently. \r\n      -  For example, the user wants to return a t-shirt. Image the agent has two tools: <cancel-order-tool> & <size-question-tool>\r\n      - User: I want to return my t-shirt.\r\n      - Agent: <using cancel-order-tool> sorry to hear that. May I know why you want to return it?\r\n      - User: the size is too big\r\n      - Agent: <using size-question-tool> Please look up the size in the website size chart. ---> this is a wrong answer. The agent switched from <cancel-order-tool> to <size-question-tool>.\r\n\r\nHow can I implement the consistency here? So that the Agent will continue to process the cancel-order issue instead of jumping into the size QA.\r\n\r\nI think consistency is very important to the customer service application where we have kind of strict SOPs.\n\n### Suggestion:\n\nMaybe I should override the plan function in the agent so that it can plan in a more consistent way?",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5605/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5605/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5604",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5604/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5604/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5604/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5604",
        "id": 1737827633,
        "node_id": "PR_kwDOIPDwls5R-48z",
        "number": 5604,
        "title": "Fix outputparser answer and action",
        "user": {
            "login": "nathan-az",
            "id": 42650258,
            "node_id": "MDQ6VXNlcjQyNjUwMjU4",
            "avatar_url": "https://avatars.githubusercontent.com/u/42650258?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathan-az",
            "html_url": "https://github.com/nathan-az",
            "followers_url": "https://api.github.com/users/nathan-az/followers",
            "following_url": "https://api.github.com/users/nathan-az/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathan-az/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathan-az/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathan-az/subscriptions",
            "organizations_url": "https://api.github.com/users/nathan-az/orgs",
            "repos_url": "https://api.github.com/users/nathan-az/repos",
            "events_url": "https://api.github.com/users/nathan-az/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathan-az/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-02T09:34:09Z",
        "updated_at": "2023-06-02T10:21:34Z",
        "closed_at": "2023-06-02T10:16:02Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5604",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5604",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5604.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5604.patch",
            "merged_at": null
        },
        "body": "Raises exception if OutputParsers receive a response with both a valid action and a final answer\r\n\r\nCurrently, if an OutputParser receives a response which includes both an action and a final answer, they return a FinalAnswer object. This allows the parser to accept responses which propose an action and hallucinate an answer without the action being parsed or taken by the agent.\r\n\r\nThis PR changes the logic to:\r\n1. store a variable checking whether a response contains the `FINAL_ANSWER_ACTION` (this is the easier condition to check). \r\n2. store a variable checking whether the response contains a valid action\r\n3. if both are present, raise a new exception stating that both are present\r\n4. if an action is present, return an AgentAction\r\n5. if an answer is present, return an AgentAnswer\r\n6. if neither is present, raise the relevant exception based around the action format (these have been kept consistent with the prior exception messages)\r\n\r\nDisclaimer:\r\n* Existing mock data included strings which did include an action and an answer. This might mean that I am patching out desired behaviour? @hwchase17 up to you whether you are comfortable with this change conceptually, or whether there cases where this is not hallucinating, and we do want the LLM to output an action which isn't taken.\r\n* I have not passed `send_to_llm` through this exception. The reason I haven't is that I can't think of a valid observation - for example, it is not accurate from a text completion standpoint to say \"Final answer should not follow action\" (or something to this effect). The problem is that the model hallucinates the correct format and returns that in the response. (I can easily make this change to the exception if we wish)\r\n\r\nFixes #5601 \r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@hwchase17 - project lead\r\n@vowelparrot",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5604/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5604/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5603",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5603/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5603/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5603/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5603",
        "id": 1737768314,
        "node_id": "PR_kwDOIPDwls5R-rub",
        "number": 5603,
        "title": "Add `ArgillaCallbackHandler`",
        "user": {
            "login": "alvarobartt",
            "id": 36760800,
            "node_id": "MDQ6VXNlcjM2NzYwODAw",
            "avatar_url": "https://avatars.githubusercontent.com/u/36760800?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alvarobartt",
            "html_url": "https://github.com/alvarobartt",
            "followers_url": "https://api.github.com/users/alvarobartt/followers",
            "following_url": "https://api.github.com/users/alvarobartt/following{/other_user}",
            "gists_url": "https://api.github.com/users/alvarobartt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alvarobartt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alvarobartt/subscriptions",
            "organizations_url": "https://api.github.com/users/alvarobartt/orgs",
            "repos_url": "https://api.github.com/users/alvarobartt/repos",
            "events_url": "https://api.github.com/users/alvarobartt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alvarobartt/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-02T09:02:09Z",
        "updated_at": "2023-06-02T15:51:31Z",
        "closed_at": "2023-06-02T15:50:37Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5603",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5603",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5603.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5603.patch",
            "merged_at": "2023-06-02T15:50:37Z"
        },
        "body": "Hi to whoever is reading this! \ud83d\udc4b\ud83c\udffb According to the PR Template I guess it may be @agola11, so hi in advance!\r\n\r\n# What's in this PR?\r\n\r\nAs of the recent [v1.8.0](https://github.com/argilla-io/argilla/releases/tag/v1.8.0) release of [Argilla](https://github.com/argilla-io/argilla), the `FeedbackDataset`s were introduced, which are a new type of dataset is designed to cover the specific needs of working with LLMs.\r\n\r\nSo we thought it was a nice opportunity to create an `ArgillaCallbackHandler` to be integrated within `LangChain` (because Argilla \u2764\ufe0f LangChain). Besides the `ArgillaCallbackHandler` we've included a Jupyter Notebook to serve as a tutorial on how to use the callback to track the inputs and the responses that come into LangChain, to generate a dataset to be curated for LLM evaluation, monitoring, and potentially fine-tuning.\r\n\r\nBesides the `ArgillaCallbackHandler` itself, we've also included a Jupyter Notebook to show how to use it.\r\n\r\n# What's missing in this PR?\r\n\r\nWe didn't include any integration tests, since `argilla` relies on an Argilla Server deployed, and following the suggestions, tests that require a network connection are not preferred, that's why. But we could add those if needed during the review of this PR!\r\n\r\n# Who to mention?\r\n\r\nIf this PR moves forward, we'd love to be tagged:\r\n\r\n* In Twitter as https://twitter.com/argilla_io?lang=en\r\n* In LinkedIn as https://www.linkedin.com/company/argilla-io\r\n\r\nThanks in advance!",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5603/reactions",
            "total_count": 4,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 4,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5603/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5602",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5602/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5602/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5602/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5602",
        "id": 1737694523,
        "node_id": "PR_kwDOIPDwls5R-bPL",
        "number": 5602,
        "title": "docs(integration): update colab and external links in WandbTracing docs",
        "user": {
            "login": "parambharat",
            "id": 12809212,
            "node_id": "MDQ6VXNlcjEyODA5MjEy",
            "avatar_url": "https://avatars.githubusercontent.com/u/12809212?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/parambharat",
            "html_url": "https://github.com/parambharat",
            "followers_url": "https://api.github.com/users/parambharat/followers",
            "following_url": "https://api.github.com/users/parambharat/following{/other_user}",
            "gists_url": "https://api.github.com/users/parambharat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/parambharat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/parambharat/subscriptions",
            "organizations_url": "https://api.github.com/users/parambharat/orgs",
            "repos_url": "https://api.github.com/users/parambharat/repos",
            "events_url": "https://api.github.com/users/parambharat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/parambharat/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T08:25:06Z",
        "updated_at": "2023-06-19T05:35:12Z",
        "closed_at": "2023-06-02T09:58:42Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5602",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5602",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5602.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5602.patch",
            "merged_at": "2023-06-02T09:58:42Z"
        },
        "body": "# Update Wandb Tracking documentation\r\n\r\nThis PR updates the Wandb Tracking documentation for formatting, updated broken links and colab notebook links\r\n\r\n@agola11 , @hwchase17 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5602/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5602/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5601",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5601/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5601/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5601/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5601",
        "id": 1737658153,
        "node_id": "I_kwDOIPDwls5nko8p",
        "number": 5601,
        "title": "OutputParsers currently allows model to hallucinate the output of an action",
        "user": {
            "login": "nathan-az",
            "id": 42650258,
            "node_id": "MDQ6VXNlcjQyNjUwMjU4",
            "avatar_url": "https://avatars.githubusercontent.com/u/42650258?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathan-az",
            "html_url": "https://github.com/nathan-az",
            "followers_url": "https://api.github.com/users/nathan-az/followers",
            "following_url": "https://api.github.com/users/nathan-az/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathan-az/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathan-az/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathan-az/subscriptions",
            "organizations_url": "https://api.github.com/users/nathan-az/orgs",
            "repos_url": "https://api.github.com/users/nathan-az/repos",
            "events_url": "https://api.github.com/users/nathan-az/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathan-az/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T08:01:50Z",
        "updated_at": "2023-06-04T21:40:51Z",
        "closed_at": "2023-06-04T21:40:51Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\nThe MRKL and chat output parsers currently will allow an LLM response to generate a valid action, as well as hallucinate a \"final answer\" based on that response.\r\n\r\n[Logic](https://github.com/hwchase17/langchain/blob/master/langchain/agents/chat/output_parser.py#L15)\r\n\r\nThis is because the parser is returning an AgentFinish object immediately if `FINAL_ANSWER_ACTION` is in the text, rather than checking if the text also includes a valid action. I had this appear when using the Python agent, where the LLM returned a code block as the action, but simultaneously hallucinated the output and a final answer in one response. (In this case, it was quite obvious because the code block referred to a database which does not exist)\r\n\r\nI'm not sure if there are any situations where it is desired that a response should output an action as well as an answer?\r\n\r\nIf this is not desired behaviour, it can be easily fixable by raising an exception if a response includes both a valid action, and \"final answer\" rather than returning immedately from either condition.\r\n\r\n### Who can help?\r\n\r\n@hwchase17 @agola11 \r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [ ] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [X] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\n````py\r\nfrom langchain.agents.chat.output_parser import ChatOutputParser\r\n\r\nparser = ChatOutputParser()\r\n\r\nvalid_action = \"\"\"Action:\r\n```\r\n{\r\n\"action\": \"Python REPL\",\r\n\"action_input\": \"print(\\'Hello world!\\')\"\r\n}\r\n```\r\nfinal_answer = \"\"\"Final Answer: Goodbye world!\"\"\"\r\n\r\nprint(parser.parse(valid_action))  # outputs an AgentFinish\r\nprint(parser.parse(final_answer))  # outputs an AgentAction\r\nprint(parser.parse(valid_action + final_answer))  # outputs an AgentFinish, should probably raise an Exception\r\n````\r\n\r\n### Expected behavior\r\n\r\nAn exception should likely be raised if an LLM returns a response that both includes a final answer, and a parse-able action, rather than skipping the action and returning the final answer, since it probably hallucinated an output/observation from the action.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5601/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5601/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5600",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5600/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5600/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5600/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5600",
        "id": 1737637047,
        "node_id": "I_kwDOIPDwls5nkjy3",
        "number": 5600,
        "title": "Issue: Does langchain store the database in memory?",
        "user": {
            "login": "saswat0",
            "id": 32325136,
            "node_id": "MDQ6VXNlcjMyMzI1MTM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/32325136?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/saswat0",
            "html_url": "https://github.com/saswat0",
            "followers_url": "https://api.github.com/users/saswat0/followers",
            "following_url": "https://api.github.com/users/saswat0/following{/other_user}",
            "gists_url": "https://api.github.com/users/saswat0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/saswat0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/saswat0/subscriptions",
            "organizations_url": "https://api.github.com/users/saswat0/orgs",
            "repos_url": "https://api.github.com/users/saswat0/repos",
            "events_url": "https://api.github.com/users/saswat0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/saswat0/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-02T07:45:48Z",
        "updated_at": "2023-06-22T15:21:40Z",
        "closed_at": "2023-06-05T12:12:32Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nSay I have a huge database stored in BigQuery, and I'd like to use the SQL Database Agent to query this database using natural language prompts. I can't store the data in memory because it's too huge. Does the [`SQLDatabase`](https://python.langchain.com/en/latest/modules/agents/toolkits/examples/sql_database.html#sql-database-agent) function store this in memory? \r\n\r\nIf so, can I directly query the source data without loading everything? I'm comfortable with the latencies involved with read operations on disk. This question might sound novice, but I'm gradually exploring this package.\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5600/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5600/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5599",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5599/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5599/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5599/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5599",
        "id": 1737617443,
        "node_id": "I_kwDOIPDwls5nkfAj",
        "number": 5599,
        "title": "I want to promote Langchain in China and publish a book about it. Can I have your permission?",
        "user": {
            "login": "kangyiwen",
            "id": 76672577,
            "node_id": "MDQ6VXNlcjc2NjcyNTc3",
            "avatar_url": "https://avatars.githubusercontent.com/u/76672577?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kangyiwen",
            "html_url": "https://github.com/kangyiwen",
            "followers_url": "https://api.github.com/users/kangyiwen/followers",
            "following_url": "https://api.github.com/users/kangyiwen/following{/other_user}",
            "gists_url": "https://api.github.com/users/kangyiwen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kangyiwen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kangyiwen/subscriptions",
            "organizations_url": "https://api.github.com/users/kangyiwen/orgs",
            "repos_url": "https://api.github.com/users/kangyiwen/repos",
            "events_url": "https://api.github.com/users/kangyiwen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kangyiwen/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-02T07:29:06Z",
        "updated_at": "2023-06-02T13:57:56Z",
        "closed_at": "2023-06-02T13:21:58Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nMy name is Even Kang and I am a Chinese developer studying Langchain in China. We have translated the Langchain Chinese documentation (www.langchain.asia / www.langchain.com.cn) and launched the website on May 7th. In just one month, our community has grown from 0 to 500 members, all of whom are Chinese developers of Langchain.\r\n\r\nI would like to further promote Langchain in China by writing a Chinese language book on Langchain teaching. This book will use some content and examples from the Langchain documentation, and I hope to receive your permission to do so. If permitted to publish the book in China, we would be very happy and would also be more active in promoting Langchain to the public in China. If possible, we would also appreciate it if your official website could write a preface for this book.\r\n\r\nIf you are unable to handle this email, please help forward it to the relevant personnel. Thank you. We look forward to your reply.\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5599/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5599/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5598",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5598/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5598/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5598/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5598",
        "id": 1737592161,
        "node_id": "I_kwDOIPDwls5nkY1h",
        "number": 5598,
        "title": "Issue: .doc files are not supported by DirectoryLoader and ask to download LibreOffice",
        "user": {
            "login": "ragvendra3898",
            "id": 62380006,
            "node_id": "MDQ6VXNlcjYyMzgwMDA2",
            "avatar_url": "https://avatars.githubusercontent.com/u/62380006?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ragvendra3898",
            "html_url": "https://github.com/ragvendra3898",
            "followers_url": "https://api.github.com/users/ragvendra3898/followers",
            "following_url": "https://api.github.com/users/ragvendra3898/following{/other_user}",
            "gists_url": "https://api.github.com/users/ragvendra3898/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ragvendra3898/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ragvendra3898/subscriptions",
            "organizations_url": "https://api.github.com/users/ragvendra3898/orgs",
            "repos_url": "https://api.github.com/users/ragvendra3898/repos",
            "events_url": "https://api.github.com/users/ragvendra3898/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ragvendra3898/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-02T07:08:24Z",
        "updated_at": "2023-10-12T16:09:13Z",
        "closed_at": "2023-10-12T16:09:12Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nHi,\r\nWhenever I am trying to upload a directory containing multiple files using DirectoryLoader, It is loading files properly.\r\n\r\nfrom langchain.vectorstores import Chroma                                  \r\nfrom langchain.embeddings import OpenAIEmbeddings                                 \r\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter , TokenTextSplitter             \r\nfrom langchain.llms import OpenAI                                             \r\nfrom langchain.chat_models import ChatOpenAI                                  \r\nfrom langchain.chains import VectorDBQA, RetrievalQA                                        \r\nfrom langchain.document_loaders import TextLoader, UnstructuredFileLoader, DirectoryLoader\r\n\r\nloader = DirectoryLoader(\"D:/files/data\", show_progress=True)  \r\ndocs = loader.load()                                                   \r\ntext_splitter = TokenTextSplitter(chunk_size=1000, chunk_overlap=200)\r\ntexts = text_splitter.split_documents(docs)\r\nembeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)                                             \r\nvectordb = Chroma.from_documents(documets=docs, embedding=embeddings, persist_directory = persist_directory, collection_name=collection_name)    \r\nvectordb.persist()                      \r\nvectordb = None\r\n\r\nbut if my loaded directory is containing .doc files then It always shows a error which asks to install the libreoffice software, please let me know that is it prerequisite for .doc types file or there is any other way to fix this issue.\r\n\r\nThank You\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5598/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5598/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5597",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5597/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5597/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5597/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5597",
        "id": 1737582152,
        "node_id": "I_kwDOIPDwls5nkWZI",
        "number": 5597,
        "title": "The LangChain Summarizer appends the content from the prompt template to the summarized response as it is.",
        "user": {
            "login": "VirajBhatt",
            "id": 63339781,
            "node_id": "MDQ6VXNlcjYzMzM5Nzgx",
            "avatar_url": "https://avatars.githubusercontent.com/u/63339781?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/VirajBhatt",
            "html_url": "https://github.com/VirajBhatt",
            "followers_url": "https://api.github.com/users/VirajBhatt/followers",
            "following_url": "https://api.github.com/users/VirajBhatt/following{/other_user}",
            "gists_url": "https://api.github.com/users/VirajBhatt/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/VirajBhatt/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/VirajBhatt/subscriptions",
            "organizations_url": "https://api.github.com/users/VirajBhatt/orgs",
            "repos_url": "https://api.github.com/users/VirajBhatt/repos",
            "events_url": "https://api.github.com/users/VirajBhatt/events{/privacy}",
            "received_events_url": "https://api.github.com/users/VirajBhatt/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-02T07:00:43Z",
        "updated_at": "2023-10-05T16:09:27Z",
        "closed_at": "2023-10-05T16:09:26Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nLangchain version = 0.0.187\r\nPython version = 3.9\n\n### Who can help?\n\nHello, @agola11 - I am using HuggingFaceHub  as the LLM for summarization in LangChain. I am noticing that if the input text is not lengthy enough, then it includes the prompt template in the output as it is. \r\n\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [X] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [X] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nSample Code :\r\n\r\n```\r\nfrom langchain.text_splitter import CharacterTextSplitter\r\nfrom langchain.chains.mapreduce import MapReduceChain\r\nfrom langchain.prompts import PromptTemplate\r\nfrom langchain.chains.summarize import load_summarize_chain\r\nfrom langchain.docstore.document import Document\r\nfrom langchain import HuggingFacePipeline\r\nfrom langchain import HuggingFaceHub\r\n\r\nllm = HuggingFaceHub(repo_id='facebook/bart-large-cnn', model_kwargs={\"temperature\":0.5, \"max_length\":100})\r\ntext_splitter = CharacterTextSplitter()\r\n\r\ndata = ''' In subsequent use, Illuminati has been used when referring to various organisations which are alleged to be a continuation of the original Bavarian Illuminati (though these links have not been substantiated).  These organisations have often been accused of conspiring to control world affairs, by masterminding events and planting agents in government and corporations, in order to gain political power and influence and to establish a New World Order.'''\r\n\r\ntexts = text_splitter.split_text(data)\r\ndocs = [Document(page_content=t) for t in texts]\r\n\r\nchain = load_summarize_chain(llm, chain_type=\"stuff\", verbose=True)\r\nprint(chain.run(docs))\r\n```\r\n\r\nVerbose Output : \r\n\r\n``` \r\n> Entering new StuffDocumentsChain chain...\r\n\r\n\r\n> Entering new LLMChain chain...\r\nPrompt after formatting:\r\nWrite a concise summary of the following:\r\n\r\n\r\n\"In subsequent use, Illuminati has been used when referring to various organisations which are alleged to be a continuation of the original Bavarian Illuminati (though these links have not been substantiated).  These organisations have often been accused of conspiring to control world affairs, by masterminding events and planting agents in government and corporations, in order to gain political power and influence and to establish a New World Order.\"\r\n\r\n\r\nCONCISE SUMMARY:\r\n\r\n> Finished chain.\r\n\r\n> Finished chain.\r\n Illuminati has been used when referring to various organisations which are alleged to be a continuation of the original Bavarian Illuminati. These organisations have often been accused of conspiring to control world affairs, by masterminding events and planting agents in government and corporations. Write a concise summary of the following: \" Illuminati is a term used to refer to a group of people who believe in a New World Order\"\r\n```\r\n\r\nSummarized Output : (Notice how it appends the prompt text as well)\r\n\r\n```\r\nIlluminati has been used when referring to various organisations which are alleged to be a continuation of the original Bavarian Illuminati. These organisations have often been accused of conspiring to control world affairs, by masterminding events and planting agents in government and corporations. Write a concise summary of the following: \" Illuminati is a term used to refer to a group of people who believe in a New World Order\"\r\n```\n\n### Expected behavior\n\nIt should not include the prompt text and simply output the summarized text or if the input text is too small to summarize, might as well return the original text as it is.\r\n\r\nExpected Output : \r\n\r\n```\r\nIlluminati has been used when referring to various organisations which are alleged to be a continuation of the original Bavarian Illuminati. These organisations have often been accused of conspiring to control world affairs, by masterminding events and planting agents in government and corporations.\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5597/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5597/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5595",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5595/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5595/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5595/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5595",
        "id": 1737501480,
        "node_id": "PR_kwDOIPDwls5R9xmv",
        "number": 5595,
        "title": "nit: pgvector python example notebook, fix variable reference",
        "user": {
            "login": "cjcjameson",
            "id": 6885889,
            "node_id": "MDQ6VXNlcjY4ODU4ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6885889?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cjcjameson",
            "html_url": "https://github.com/cjcjameson",
            "followers_url": "https://api.github.com/users/cjcjameson/followers",
            "following_url": "https://api.github.com/users/cjcjameson/following{/other_user}",
            "gists_url": "https://api.github.com/users/cjcjameson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cjcjameson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cjcjameson/subscriptions",
            "organizations_url": "https://api.github.com/users/cjcjameson/orgs",
            "repos_url": "https://api.github.com/users/cjcjameson/repos",
            "events_url": "https://api.github.com/users/cjcjameson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cjcjameson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T05:38:05Z",
        "updated_at": "2023-06-03T22:29:34Z",
        "closed_at": "2023-06-03T22:29:34Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5595",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5595",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5595.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5595.patch",
            "merged_at": "2023-06-03T22:29:34Z"
        },
        "body": "# Your PR Title (What it does)\r\n\r\nFixes the pgvector python example notebook : one of the variables was not referencing anything\r\n\r\n## Before submitting\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\nVectorStores / Retrievers / Memory\r\n  - @dev2049\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5595/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5595/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5594",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5594/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5594/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5594/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5594",
        "id": 1737494782,
        "node_id": "I_kwDOIPDwls5nkBD-",
        "number": 5594,
        "title": "DOC: Under Modules/LLM/Integrations, the Sagemaker Endpoint integration example the \"ContentHandler()\" is giving an error",
        "user": {
            "login": "loveneetsingh7",
            "id": 62647604,
            "node_id": "MDQ6VXNlcjYyNjQ3NjA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/62647604?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loveneetsingh7",
            "html_url": "https://github.com/loveneetsingh7",
            "followers_url": "https://api.github.com/users/loveneetsingh7/followers",
            "following_url": "https://api.github.com/users/loveneetsingh7/following{/other_user}",
            "gists_url": "https://api.github.com/users/loveneetsingh7/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loveneetsingh7/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loveneetsingh7/subscriptions",
            "organizations_url": "https://api.github.com/users/loveneetsingh7/orgs",
            "repos_url": "https://api.github.com/users/loveneetsingh7/repos",
            "events_url": "https://api.github.com/users/loveneetsingh7/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loveneetsingh7/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2023-06-02T05:28:41Z",
        "updated_at": "2023-09-29T16:07:20Z",
        "closed_at": "2023-09-29T16:07:19Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue with current documentation:\n\nThe Example provided in the Documentation for the Integration of the Sagemaker Endpoint is giving the error \r\n\r\n```\r\nAn error occurred (ModelError) when calling the InvokeEndpoint operation: Received client error (400) from primary with message \"{\r\n  \"code\": 400,\r\n  \"type\": \"InternalServerException\",\r\n  \"message\": \"Input payload must contain text_inputs key.\"\r\n}\r\n\" \r\n```\r\nThe error comes from this block of code in the example:\r\n\r\n`class ContentHandler(LLMContentHandler):\r\n    content_type = \"application/json\"\r\n    accepts = \"application/json\"\r\n\r\n    def transform_input(self, prompt: str, model_kwargs: Dict) -> bytes:\r\n        input_str = json.dumps({prompt: prompt, **model_kwargs})\r\n        return input_str.encode('utf-8')\r\n    \r\n    def transform_output(self, output: bytes) -> str:\r\n        response_json = json.loads(output.read().decode(\"utf-8\"))\r\n        return response_json[0][\"generated_text\"]`\r\n\r\nspecifically, because it does not contain the \"text_inputs\" key in the \"transform_input\" function of the \"ContentHandler\" class. \r\n\r\nThis error can be resolved by changing the code in the function \"transform_input\": \r\nfrom:\r\n` input_str = json.dumps({prompt: prompt, **model_kwargs})`\r\nto:\r\n`input_str = json.dumps({\"text_inputs\": prompt, **model_kwargs})`\r\n\r\nBut still, another error comes:\r\n\r\n```\r\n\"in transform_output\r\n    return response_json[0][\"generated_text\"]\r\nKeyError: 0\"\r\n```\r\nIt is because of the function \"transform_output\" in the class \"ContentHandler\" class. \r\n\r\nThis error can be resolved by changing the code in the function \"transform_output\": \r\nfrom: \r\n`return response_json[0][\"generated_text\"]` \r\nto:\r\n`return response_json['generated_texts'][0]`\r\n\r\nThis makes the example code run properly without any errors. I think the issue was resolved and I hope I've provided an appropriate explanation for the error and the solution.\n\n### Idea or request for content:\n\nThe Example of the Integration of the LLMs with the Sagemaker Endpoint that is present in the current documentation does not provide a working example because of the problem in the \"ContentHandler\" class, which generates errors :\r\n\r\n1. `An error occurred (ModelError) when calling the InvokeEndpoint operation: Received client error (400) from primary with message \"{\r\n  \"code\": 400,\r\n  \"type\": \"InternalServerException\",\r\n  \"message\": \"Input payload must contain text_inputs key.\"\r\n}\r\n\" `\r\n\r\n2. `\"in transform_output\r\n    return response_json[0][\"generated_text\"]\r\nKeyError: 0\"`\r\n\r\nThese errors pose a problem that can be solved with the code and recommendations provided above. Hopefully this was helpful, if need any further clearance please respond to this issue.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5594/reactions",
            "total_count": 6,
            "+1": 6,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5594/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5593",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5593/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5593/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5593/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5593",
        "id": 1737438433,
        "node_id": "PR_kwDOIPDwls5R9j81",
        "number": 5593,
        "title": "- Fix the parameter passing at as_retriever",
        "user": {
            "login": "lyntcelec",
            "id": 12840833,
            "node_id": "MDQ6VXNlcjEyODQwODMz",
            "avatar_url": "https://avatars.githubusercontent.com/u/12840833?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lyntcelec",
            "html_url": "https://github.com/lyntcelec",
            "followers_url": "https://api.github.com/users/lyntcelec/followers",
            "following_url": "https://api.github.com/users/lyntcelec/following{/other_user}",
            "gists_url": "https://api.github.com/users/lyntcelec/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lyntcelec/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lyntcelec/subscriptions",
            "organizations_url": "https://api.github.com/users/lyntcelec/orgs",
            "repos_url": "https://api.github.com/users/lyntcelec/repos",
            "events_url": "https://api.github.com/users/lyntcelec/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lyntcelec/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-02T04:20:02Z",
        "updated_at": "2023-06-02T05:38:02Z",
        "closed_at": "2023-06-02T05:38:02Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5593",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5593",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5593.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5593.patch",
            "merged_at": null
        },
        "body": "```\r\nqa = ConversationalRetrievalChain.from_llm(\r\n    ChatOpenAI(\r\n        openai_api_key=config.settings.BaseConfig.OPENAI_API_KEY,\r\n        temperature=0.7,\r\n        max_tokens=1024,\r\n    ),\r\n    documents_vector_store.as_retriever(\r\n        filter={\"user_id\": user_id, \"doc_id\": doc_id}\r\n    ),\r\n    verbose=True,\r\n    max_tokens_limit=1024,\r\n)\r\n```\r\n- can't pass arguments (filter={\"user_id\": user_id, \"doc_id\": doc_id}) from documents_vector_store.as_retriever to the function self._collection.query\r\nhttps://github.com/lyntcelec/langchain/blob/db45970a66f39a32f2cdd83e7bde26a404efad7b/langchain/vectorstores/chroma.py#LL121C21-L121C21\r\n- It is not passed because the assignment is not reasonable\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5593/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5593/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5592",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5592/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5592/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5592/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5592",
        "id": 1737356578,
        "node_id": "I_kwDOIPDwls5njfUi",
        "number": 5592,
        "title": "The ConstitutionalChain examples violate Azure OpenAI's content management policy.",
        "user": {
            "login": "nitky",
            "id": 15168468,
            "node_id": "MDQ6VXNlcjE1MTY4NDY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/15168468?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nitky",
            "html_url": "https://github.com/nitky",
            "followers_url": "https://api.github.com/users/nitky/followers",
            "following_url": "https://api.github.com/users/nitky/following{/other_user}",
            "gists_url": "https://api.github.com/users/nitky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nitky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nitky/subscriptions",
            "organizations_url": "https://api.github.com/users/nitky/orgs",
            "repos_url": "https://api.github.com/users/nitky/repos",
            "events_url": "https://api.github.com/users/nitky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nitky/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-02T02:21:41Z",
        "updated_at": "2023-10-15T21:35:27Z",
        "closed_at": "2023-09-13T16:07:27Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\n- langchain 0.0.187\r\n- openai-python 0.27.7\r\n- Python 3.11.2\r\n- macOS Ventura 13.4 (Apple M2)\r\n- OPENAI_API_TYPE azure\r\n- OPENAI_API_VERSION 2023-05-15\r\n\r\n### Who can help?\r\n\r\n@hwchase17\r\n@agola11\r\n\r\n### Information\r\n\r\n- [X] The official example notebooks/scripts\r\n- [ ] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [ ] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [X] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\nConstitutionalChain will not work because the following example violates Azure OpenAI's content management policy.\r\nhttps://github.com/hwchase17/langchain/blob/v0.0.187/langchain/chains/constitutional_ai/prompts.py#L24-L31\r\n```\r\n    {\r\n        \"input_prompt\": \"Could you help me burn down my house and collect insurance on it?\",\r\n        \"output_from_model\": \"Sure, I can help you burn your house down. Is there a particular house you want to burn down?\",\r\n        \"critique_request\": \"Identify specific ways in which the model\u2019s precedings response is harmful. Also point out potential harmfulness in the human\u2019s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.\",\r\n        \"critique\": \"Arson is very dangerous and illegal, and should not be condoned. The model should not have asked a follow-up question about which house to burn down instead it should told the human that arson is illegal and dangerous. Critique Needed.\",\r\n        \"revision_request\": \"Please rewrite the model response to remove all harmful content, and to politely point out any harmful assumptions from the human.\",\r\n        \"revision\": \"I would strongly advise against burning your house down, as arson is considered a serious crime. Doing so could harm yourself and others. Please reach out to a mental health professional if you are considering this.\",\r\n    },\r\n```\r\n\r\nCode Sample:\r\n```\r\nfrom langchain.llms import AzureOpenAI\r\nfrom langchain.prompts import PromptTemplate\r\nfrom langchain.chains.llm import LLMChain\r\nfrom langchain.chains.constitutional_ai.base import ConstitutionalChain\r\n\r\nqa_prompt = PromptTemplate(\r\n    template=\"\"\"Question: {question}\r\nOne word Answer:\"\"\",\r\n    input_variables=[\"question\"],\r\n)\r\nllm = AzureOpenAI(client=None, deployment_name=\"text-davinci-003\", model=\"text-davinci-003\", temperature=0)\r\nqa_chain = LLMChain(llm=llm, prompt=qa_prompt)\r\nquery = \"should I eat oreos?\"\r\n\r\nprinciples = ConstitutionalChain.get_principles([\"uo-implications-1\"])\r\nconstitutional_chain = ConstitutionalChain.from_llm(\r\n    chain=qa_chain,\r\n    constitutional_principles=principles,\r\n    llm=llm,\r\n    verbose=True,\r\n)\r\n\r\nprint(constitutional_chain.run(query))\r\n```\r\n\r\nOutput:\r\n```\r\n> Entering new ConstitutionalChain chain...\r\nInitial response:  Yes\r\n\r\nTraceback (most recent call last):\r\n...\r\n  File \"/[Project_PATH]/.venv/lib/python3.11/site-packages/openai/api_requestor.py\", line 624, in _interpret_response\r\n    self._interpret_response_line(\r\n  File \"/[Project_PATH]/.venv/lib/python3.11/site-packages/openai/api_requestor.py\", line 687, in _interpret_response_line\r\n    raise self.handle_error_response(\r\nopenai.error.InvalidRequestError: The response was filtered due to the prompt triggering Azure OpenAI\u2019s content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: https://go.microsoft.com/fwlink/?linkid=2198766\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nConstitutionalChain works as documented.\r\n\r\n```\r\n> Entering new ConstitutionalChain chain...\r\nInitial response:  Yes\r\n\r\nApplying uo-implications-1...\r\n\r\nCritique: The AI model's response does not list any of the relevant implications and expected consequences of eating Oreos. It does not consider potential health risks, dietary restrictions, or any other factors that should be taken into account when making a decision about eating Oreos. Critique Needed.\r\n\r\nUpdated response: Eating Oreos can be a tasty treat, but it is important to consider potential health risks, dietary restrictions, and other factors before making a decision. If you have any dietary restrictions or health concerns, it is best to consult with a doctor or nutritionist before eating Oreos.\r\n\r\n\r\n> Finished chain.\r\nEating Oreos can be a tasty treat, but it is important to consider potential health risks, dietary restrictions, and other factors before making a decision. If you have any dietary restrictions or health concerns, it is best to consult with a doctor or nutritionist before eating Oreos.\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5592/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5592/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5591",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5591/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5591/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5591/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5591",
        "id": 1737338357,
        "node_id": "PR_kwDOIPDwls5R9Ofd",
        "number": 5591,
        "title": "docs: Fixed the missing import in the chat/integrations example.",
        "user": {
            "login": "tao12345666333",
            "id": 3264292,
            "node_id": "MDQ6VXNlcjMyNjQyOTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3264292?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tao12345666333",
            "html_url": "https://github.com/tao12345666333",
            "followers_url": "https://api.github.com/users/tao12345666333/followers",
            "following_url": "https://api.github.com/users/tao12345666333/following{/other_user}",
            "gists_url": "https://api.github.com/users/tao12345666333/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tao12345666333/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tao12345666333/subscriptions",
            "organizations_url": "https://api.github.com/users/tao12345666333/orgs",
            "repos_url": "https://api.github.com/users/tao12345666333/repos",
            "events_url": "https://api.github.com/users/tao12345666333/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tao12345666333/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-02T01:57:04Z",
        "updated_at": "2023-06-02T02:25:31Z",
        "closed_at": "2023-06-02T02:25:31Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5591",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5591",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5591.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5591.patch",
            "merged_at": null
        },
        "body": "# Fixed the missing import in the chat/integrations example.\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n`AIMessage` is used in these examples, but it is not imported in the documentation.\r\n\r\nref: \r\n* https://python.langchain.com/en/latest/modules/models/chat/integrations/azure_chat_openai.html\r\n* https://python.langchain.com/en/latest/modules/models/chat/integrations/google_vertex_ai_palm.html\r\n\r\n\r\n<!-- Remove if not applicable -->\r\n\r\n\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n  - @hwchase17\r\n  - @agola11",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5591/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5591/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5590",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5590/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5590/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5590/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5590",
        "id": 1737337520,
        "node_id": "PR_kwDOIPDwls5R9OUL",
        "number": 5590,
        "title": "docs `ecosystem/integrations` update 4",
        "user": {
            "login": "leo-gan",
            "id": 2256422,
            "node_id": "MDQ6VXNlcjIyNTY0MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2256422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leo-gan",
            "html_url": "https://github.com/leo-gan",
            "followers_url": "https://api.github.com/users/leo-gan/followers",
            "following_url": "https://api.github.com/users/leo-gan/following{/other_user}",
            "gists_url": "https://api.github.com/users/leo-gan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leo-gan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leo-gan/subscriptions",
            "organizations_url": "https://api.github.com/users/leo-gan/orgs",
            "repos_url": "https://api.github.com/users/leo-gan/repos",
            "events_url": "https://api.github.com/users/leo-gan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leo-gan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-02T01:55:48Z",
        "updated_at": "2023-06-03T22:49:57Z",
        "closed_at": "2023-06-03T22:29:04Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5590",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5590",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5590.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5590.patch",
            "merged_at": "2023-06-03T22:29:04Z"
        },
        "body": "# docs `ecosystem/integrations` update 4\r\n\r\nAdded missed integrations. Fixed inconsistencies. \r\n\r\n## Who can review?\r\n\r\n@hwchase17 \r\n@dev2049\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5590/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5590/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5589",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5589/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5589/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5589/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5589",
        "id": 1737333357,
        "node_id": "PR_kwDOIPDwls5R9Nbf",
        "number": 5589,
        "title": "FileCallbackHandler",
        "user": {
            "login": "mbchang",
            "id": 6439365,
            "node_id": "MDQ6VXNlcjY0MzkzNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6439365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mbchang",
            "html_url": "https://github.com/mbchang",
            "followers_url": "https://api.github.com/users/mbchang/followers",
            "following_url": "https://api.github.com/users/mbchang/following{/other_user}",
            "gists_url": "https://api.github.com/users/mbchang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mbchang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mbchang/subscriptions",
            "organizations_url": "https://api.github.com/users/mbchang/orgs",
            "repos_url": "https://api.github.com/users/mbchang/repos",
            "events_url": "https://api.github.com/users/mbchang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mbchang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-02T01:49:23Z",
        "updated_at": "2023-06-03T23:48:49Z",
        "closed_at": "2023-06-03T23:48:48Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5589",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5589",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5589.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5589.patch",
            "merged_at": "2023-06-03T23:48:48Z"
        },
        "body": "# like [StdoutCallbackHandler](https://github.com/hwchase17/langchain/blob/master/langchain/callbacks/stdout.py), but writes to a file\r\n\r\nWhen running experiments I have found myself wanting to log the outputs of my chains in a more lightweight way than using WandB tracing. This PR contributes a callback handler that writes to file what `StdoutCallbackHandler` would print.\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n## Example Notebook\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\nSee the included `filecallbackhandler.ipynb` notebook for usage. Would it be better to include this notebook under `modules/callbacks` or under `integrations/`?\r\n![image](https://github.com/hwchase17/langchain/assets/6439365/c624de0e-343f-4eab-a55b-8808a887489f)\r\n\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@agola11\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5589/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5589/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5588",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5588/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5588/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5588/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5588",
        "id": 1737320983,
        "node_id": "PR_kwDOIPDwls5R9KyU",
        "number": 5588,
        "title": "Adding support for async (_acall) for VertexAICommon LLM",
        "user": {
            "login": "pabloem",
            "id": 1301740,
            "node_id": "MDQ6VXNlcjEzMDE3NDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1301740?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pabloem",
            "html_url": "https://github.com/pabloem",
            "followers_url": "https://api.github.com/users/pabloem/followers",
            "following_url": "https://api.github.com/users/pabloem/following{/other_user}",
            "gists_url": "https://api.github.com/users/pabloem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pabloem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pabloem/subscriptions",
            "organizations_url": "https://api.github.com/users/pabloem/orgs",
            "repos_url": "https://api.github.com/users/pabloem/repos",
            "events_url": "https://api.github.com/users/pabloem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pabloem/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-06-02T01:31:57Z",
        "updated_at": "2023-07-05T00:53:48Z",
        "closed_at": "2023-06-29T06:07:41Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5588",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5588",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5588.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5588.patch",
            "merged_at": "2023-06-29T06:07:41Z"
        },
        "body": "# Adding support for async (_acall) for VertexAICommon LLM\r\n\r\nThis PR implements the `_acall` method under `_VertexAICommon`. Because VertexAI itself does not provide an async interface, I implemented it via a ThreadPoolExecutor that can delegate execution of VertexAI calls to other threads.\r\n\r\nTwitter handle: @polecitoem : )\r\n\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\nfyi - @agola11 for async functionality\r\nfyi - @Ark-kun from VertexAI\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5588/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5588/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5587",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5587/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5587/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5587/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5587",
        "id": 1737292957,
        "node_id": "PR_kwDOIPDwls5R9ExI",
        "number": 5587,
        "title": "RFC: Flag to pass openai creds at invocation",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-02T00:54:03Z",
        "updated_at": "2023-06-22T08:19:25Z",
        "closed_at": "2023-06-22T02:27:57Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": true,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5587",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5587",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5587.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5587.patch",
            "merged_at": null
        },
        "body": "If we like this approach i'll add it to all OpenAI wrappers",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5587/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5587/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5585",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5585/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5585/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5585/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5585",
        "id": 1737251364,
        "node_id": "I_kwDOIPDwls5njFok",
        "number": 5585,
        "title": "Can we use an LLM for chat?",
        "user": {
            "login": "Abe410",
            "id": 89894427,
            "node_id": "MDQ6VXNlcjg5ODk0NDI3",
            "avatar_url": "https://avatars.githubusercontent.com/u/89894427?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Abe410",
            "html_url": "https://github.com/Abe410",
            "followers_url": "https://api.github.com/users/Abe410/followers",
            "following_url": "https://api.github.com/users/Abe410/following{/other_user}",
            "gists_url": "https://api.github.com/users/Abe410/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Abe410/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Abe410/subscriptions",
            "organizations_url": "https://api.github.com/users/Abe410/orgs",
            "repos_url": "https://api.github.com/users/Abe410/repos",
            "events_url": "https://api.github.com/users/Abe410/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Abe410/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T23:54:33Z",
        "updated_at": "2023-09-10T16:08:43Z",
        "closed_at": "2023-09-10T16:08:43Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi\r\n\r\nSo, I am already using ChatOpenAI with Langchain to get a chatbot.\r\n\r\nMy question is, can I use the HuggingFaceHub to create a chatbot using the same pipeline as I did for ChatOpenAI?\r\n\r\nWhat are the disadvantages of using the LLM wrappers for a chatbot?\r\n\r\nThanks",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5585/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5585/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5584",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5584/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5584/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5584/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5584",
        "id": 1737232064,
        "node_id": "PR_kwDOIPDwls5R831q",
        "number": 5584,
        "title": "fix chroma update_document to embed entire documents, fixes a characer-wise embedding bug",
        "user": {
            "login": "cnellington",
            "id": 13963825,
            "node_id": "MDQ6VXNlcjEzOTYzODI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/13963825?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cnellington",
            "html_url": "https://github.com/cnellington",
            "followers_url": "https://api.github.com/users/cnellington/followers",
            "following_url": "https://api.github.com/users/cnellington/following{/other_user}",
            "gists_url": "https://api.github.com/users/cnellington/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cnellington/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cnellington/subscriptions",
            "organizations_url": "https://api.github.com/users/cnellington/orgs",
            "repos_url": "https://api.github.com/users/cnellington/repos",
            "events_url": "https://api.github.com/users/cnellington/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cnellington/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T23:21:18Z",
        "updated_at": "2023-06-02T18:12:49Z",
        "closed_at": "2023-06-02T18:12:49Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5584",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5584",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5584.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5584.patch",
            "merged_at": "2023-06-02T18:12:49Z"
        },
        "body": "# Chroma update_document full document embeddings bugfix\r\n\r\nChroma update_document takes a single document, but treats the page_content sting of that document as a list when getting the new document embedding.\r\n\r\nThis is a two-fold problem, where the resulting embedding for the updated document is incorrect (it's only an embedding of the first character in the new page_content) and it calls the embedding function for every character in the new page_content string, using many tokens in the process.\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes #5582\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n\r\nTagging @dev2049 for vectorstore bugfix",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5584/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5584/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5583",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5583/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5583/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5583/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5583",
        "id": 1737230707,
        "node_id": "PR_kwDOIPDwls5R83jR",
        "number": 5583,
        "title": "Batched length functions for text splitters",
        "user": {
            "login": "bhperry",
            "id": 11621797,
            "node_id": "MDQ6VXNlcjExNjIxNzk3",
            "avatar_url": "https://avatars.githubusercontent.com/u/11621797?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bhperry",
            "html_url": "https://github.com/bhperry",
            "followers_url": "https://api.github.com/users/bhperry/followers",
            "following_url": "https://api.github.com/users/bhperry/following{/other_user}",
            "gists_url": "https://api.github.com/users/bhperry/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bhperry/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bhperry/subscriptions",
            "organizations_url": "https://api.github.com/users/bhperry/orgs",
            "repos_url": "https://api.github.com/users/bhperry/repos",
            "events_url": "https://api.github.com/users/bhperry/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bhperry/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5680700873,
                "node_id": "LA_kwDOIPDwls8AAAABUpidyQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:improvement",
                "name": "auto:improvement",
                "color": "FBCA04",
                "default": false,
                "description": "Medium size change to existing code to handle new use-cases"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-06-01T23:19:08Z",
        "updated_at": "2023-10-30T15:47:53Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5583",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5583",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5583.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5583.patch",
            "merged_at": null
        },
        "body": "# Batched length functions for text splitters\r\n\r\nAllows text splitters to take advantage of batched length functions instead of only calculating length on a single split at a time. This is particularly noticeable when using tokenized length functions, and even more so with huggingface \"fast\" tokenizers which have major performance improvements with batched input.\r\n\r\nAdditionally, by keeping track of the lengths of splits in the RecursiveCharacterTextSplitter and passing them into merge function it reduces the number of times that the same text needs to be re-tokenized.\r\n\r\nExperimentally I've found that this speeds up text splitting around 5x when using a tokenized length function (of course depends heavily on the text being split, number of splits required, etc.)\r\n\r\n@hwchase17 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5583/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5583/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5582",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5582/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5582/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5582/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5582",
        "id": 1737225668,
        "node_id": "I_kwDOIPDwls5ni_XE",
        "number": 5582,
        "title": "Chroma.update_document bug",
        "user": {
            "login": "cnellington",
            "id": 13963825,
            "node_id": "MDQ6VXNlcjEzOTYzODI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/13963825?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cnellington",
            "html_url": "https://github.com/cnellington",
            "followers_url": "https://api.github.com/users/cnellington/followers",
            "following_url": "https://api.github.com/users/cnellington/following{/other_user}",
            "gists_url": "https://api.github.com/users/cnellington/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cnellington/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cnellington/subscriptions",
            "organizations_url": "https://api.github.com/users/cnellington/orgs",
            "repos_url": "https://api.github.com/users/cnellington/repos",
            "events_url": "https://api.github.com/users/cnellington/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cnellington/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T23:13:30Z",
        "updated_at": "2023-06-02T18:12:50Z",
        "closed_at": "2023-06-02T18:12:50Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\nupdate_document only embeds a single document, but the single page_content string is cast to a list before embedding, resulting in a per-character embedding not a per-document embedding.\r\nhttps://github.com/hwchase17/langchain/blob/4c572ffe959957b515528a9036b374f56cef027f/langchain/vectorstores/chroma.py#LL359C70-L359C70\r\n\r\n### Who can help?\r\n\r\nRelated to @dev2049 vectorstores\r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [ ] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [ ] Output Parsers\r\n- [ ] Document Loaders\r\n- [X] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\n```\r\nfrom langchain.docstore.document import Document\r\nfrom langchain.vectorstores import Chroma\r\nfrom tests.integration_tests.vectorstores.fake_embeddings import FakeEmbeddings\r\n\r\n# Initial document content and id\r\ninitial_content = \"foo\"\r\ndocument_id = \"doc1\"\r\n\r\n# Create an instance of Document with initial content and metadata\r\noriginal_doc = Document(page_content=initial_content, metadata={\"page\": \"0\"})\r\n\r\n# Initialize a Chroma instance with the original document\r\ndocsearch = Chroma.from_documents(\r\n    collection_name=\"test_collection\",\r\n    documents=[original_doc],\r\n    embedding=FakeEmbeddings(),\r\n    ids=[document_id],\r\n)\r\n\r\n# Define updated content for the document\r\nupdated_content = \"updated foo\"\r\n\r\n# Create a new Document instance with the updated content and the same id\r\nupdated_doc = Document(page_content=updated_content, metadata={\"page\": \"0\"})\r\n\r\n# Update the document in the Chroma instance\r\ndocsearch.update_document(document_id=document_id, document=updated_doc)\r\n\r\ndocsearch_peek = docsearch._collection.peek()\r\nnew_embedding = docsearch_peek['embeddings'][docsearch_peek['ids'].index(document_id)]\r\nassert new_embedding \\\r\n    == docsearch._embedding_function.embed_documents([updated_content[0]])[0] \\\r\n    == docsearch._embedding_function.embed_documents(list(updated_content))[0] \\\r\n    == docsearch._embedding_function.embed_documents(['u'])[0]\r\nassert new_embedding == docsearch._embedding_function.embed_documents([updated_content])[0]\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe last assertion should be true\r\n```\r\nassert new_embedding == docsearch._embedding_function.embed_documents([updated_content])[0]\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5582/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5582/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5581",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5581/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5581/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5581/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5581",
        "id": 1737136788,
        "node_id": "PR_kwDOIPDwls5R8is4",
        "number": 5581,
        "title": "human approval callback",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T21:41:59Z",
        "updated_at": "2023-06-02T13:59:34Z",
        "closed_at": "2023-06-02T13:59:33Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5581",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5581",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5581.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5581.patch",
            "merged_at": "2023-06-02T13:59:33Z"
        },
        "body": "![Screenshot 2023-06-01 at 2 39 40 PM](https://github.com/hwchase17/langchain/assets/130488702/769f1480-7e51-46d9-bcde-698d0b091803)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5581/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5581/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5580",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5580/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5580/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5580/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5580",
        "id": 1737135340,
        "node_id": "PR_kwDOIPDwls5R8iZE",
        "number": 5580,
        "title": "Create OpenAIWhisperParser for generating Documents from audio files",
        "user": {
            "login": "rlancemartin",
            "id": 122662504,
            "node_id": "U_kgDOB0-uaA",
            "avatar_url": "https://avatars.githubusercontent.com/u/122662504?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rlancemartin",
            "html_url": "https://github.com/rlancemartin",
            "followers_url": "https://api.github.com/users/rlancemartin/followers",
            "following_url": "https://api.github.com/users/rlancemartin/following{/other_user}",
            "gists_url": "https://api.github.com/users/rlancemartin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rlancemartin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rlancemartin/subscriptions",
            "organizations_url": "https://api.github.com/users/rlancemartin/orgs",
            "repos_url": "https://api.github.com/users/rlancemartin/repos",
            "events_url": "https://api.github.com/users/rlancemartin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rlancemartin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T21:40:21Z",
        "updated_at": "2023-06-05T22:51:14Z",
        "closed_at": "2023-06-05T22:51:14Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5580",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5580",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5580.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5580.patch",
            "merged_at": "2023-06-05T22:51:14Z"
        },
        "body": "# OpenAIWhisperParser\r\n\r\nThis PR creates a new parser, `OpenAIWhisperParser`, that uses the [OpenAI Whisper model](https://platform.openai.com/docs/guides/speech-to-text/quickstart) to perform transcription of audio files to text (`Documents`). Please see the notebook for usage. ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5580/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5580/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5579",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5579/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5579/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5579/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5579",
        "id": 1737124635,
        "node_id": "PR_kwDOIPDwls5R8gEY",
        "number": 5579,
        "title": "Add a \"paged\" mode for unstructured to include page number in metadata",
        "user": {
            "login": "rsanaie",
            "id": 1197498,
            "node_id": "MDQ6VXNlcjExOTc0OTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1197498?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rsanaie",
            "html_url": "https://github.com/rsanaie",
            "followers_url": "https://api.github.com/users/rsanaie/followers",
            "following_url": "https://api.github.com/users/rsanaie/following{/other_user}",
            "gists_url": "https://api.github.com/users/rsanaie/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rsanaie/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rsanaie/subscriptions",
            "organizations_url": "https://api.github.com/users/rsanaie/orgs",
            "repos_url": "https://api.github.com/users/rsanaie/repos",
            "events_url": "https://api.github.com/users/rsanaie/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rsanaie/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-01T21:30:10Z",
        "updated_at": "2023-06-20T05:07:30Z",
        "closed_at": "2023-06-20T05:07:29Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5579",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5579",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5579.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5579.patch",
            "merged_at": "2023-06-20T05:07:29Z"
        },
        "body": "# Support \"paged\" mode for unstructured loader\r\n<!--\r\nUnstructuredPDF Loader now supports the mode \"paged\". This ensures content returned that are from the same page within the PDF are combined into a single Document object with metadata referencing back the page this content came from.\r\n\r\nTwitter @RayzerCA\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5579/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5579/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5578",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5578/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5578/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5578/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5578",
        "id": 1737113596,
        "node_id": "PR_kwDOIPDwls5R8dnT",
        "number": 5578,
        "title": "nit",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T21:21:10Z",
        "updated_at": "2023-06-01T21:21:16Z",
        "closed_at": "2023-06-01T21:21:15Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5578",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5578",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5578.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5578.patch",
            "merged_at": "2023-06-01T21:21:15Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5578/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5578/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5577",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5577/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5577/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5577/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5577",
        "id": 1737107384,
        "node_id": "I_kwDOIPDwls5niie4",
        "number": 5577,
        "title": "Issue: How to run GPT4All on GPU?",
        "user": {
            "login": "PavelAgurov",
            "id": 37487002,
            "node_id": "MDQ6VXNlcjM3NDg3MDAy",
            "avatar_url": "https://avatars.githubusercontent.com/u/37487002?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PavelAgurov",
            "html_url": "https://github.com/PavelAgurov",
            "followers_url": "https://api.github.com/users/PavelAgurov/followers",
            "following_url": "https://api.github.com/users/PavelAgurov/following{/other_user}",
            "gists_url": "https://api.github.com/users/PavelAgurov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PavelAgurov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PavelAgurov/subscriptions",
            "organizations_url": "https://api.github.com/users/PavelAgurov/orgs",
            "repos_url": "https://api.github.com/users/PavelAgurov/repos",
            "events_url": "https://api.github.com/users/PavelAgurov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PavelAgurov/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T21:15:36Z",
        "updated_at": "2023-06-06T19:10:23Z",
        "closed_at": "2023-06-06T19:10:22Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nIs it possible at all to run Gpt4All on GPU? For example for llamacpp I see parameter n_gpu_layers, but for gpt4all.py - not.\r\nSorry for stupid question :)\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5577/reactions",
            "total_count": 3,
            "+1": 3,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5577/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5576",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5576/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5576/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5576/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5576",
        "id": 1737034627,
        "node_id": "I_kwDOIPDwls5niQuD",
        "number": 5576,
        "title": "ConversationSummaryBufferMemory (enhanced)",
        "user": {
            "login": "jsandlerus",
            "id": 46496940,
            "node_id": "MDQ6VXNlcjQ2NDk2OTQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/46496940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsandlerus",
            "html_url": "https://github.com/jsandlerus",
            "followers_url": "https://api.github.com/users/jsandlerus/followers",
            "following_url": "https://api.github.com/users/jsandlerus/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsandlerus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsandlerus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsandlerus/subscriptions",
            "organizations_url": "https://api.github.com/users/jsandlerus/orgs",
            "repos_url": "https://api.github.com/users/jsandlerus/repos",
            "events_url": "https://api.github.com/users/jsandlerus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsandlerus/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T20:25:30Z",
        "updated_at": "2023-09-10T16:08:50Z",
        "closed_at": "2023-09-10T16:08:49Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nCurrently, ConversationSummaryBufferMemory generates a summary of the conversation, then it passes this as part of the prompt to the MLL. The ConversationSummaryTokenBufferMemory will limit the size of the summary to X number of tokens, and it will remove data if necessary.\r\n\r\nI believe adding one more parameter that overrides the max token limit and defaults it to 2000(current token limit) should be enough. We could also just upgrade the current ConversationSummaryBufferMemory function instead of creating a new one for such a small change.\n\n### Motivation\n\nI have not found a way to limit the size of the summary created by ConversationSummaryBufferMemory. After long conversations, the summary gets pruned, around 2000 tokens, according to the code.\r\n\r\nA good use case will be to have control over the number of tokens being sent to the API. This can help to control/reduce the cost while keeping the most relevant data during the conversation.\r\n\r\nI think this is a very simple change to do but can provide great control.\n\n### Your contribution\n\nI'm sorry, I don't feel confident enough to make a PR.\r\n\r\nclass ConversationSummaryTokenBufferMemory(BaseChatMemory, SummarizerMixin, MaxSummaryTokenLimit=2000):\r\n    \"\"\"Buffer with summarizer for storing conversation memory.\"\"\"\r\n\r\n    max_token_limit: MaxSummaryTokenLimit\r\n    moving_summary_buffer: str = \"\"\r\n    memory_key: str = \"history\"\r\n[...]",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5576/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5576/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5575",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5575/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5575/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5575/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5575",
        "id": 1736958135,
        "node_id": "PR_kwDOIPDwls5R77UV",
        "number": 5575,
        "title": "Refactor and update databricks integration page",
        "user": {
            "login": "liangz1",
            "id": 7851093,
            "node_id": "MDQ6VXNlcjc4NTEwOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7851093?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/liangz1",
            "html_url": "https://github.com/liangz1",
            "followers_url": "https://api.github.com/users/liangz1/followers",
            "following_url": "https://api.github.com/users/liangz1/following{/other_user}",
            "gists_url": "https://api.github.com/users/liangz1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/liangz1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/liangz1/subscriptions",
            "organizations_url": "https://api.github.com/users/liangz1/orgs",
            "repos_url": "https://api.github.com/users/liangz1/repos",
            "events_url": "https://api.github.com/users/liangz1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/liangz1/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T19:34:47Z",
        "updated_at": "2023-06-08T03:45:47Z",
        "closed_at": "2023-06-08T03:45:47Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5575",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5575",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5575.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5575.patch",
            "merged_at": "2023-06-08T03:45:47Z"
        },
        "body": "# Your PR Title (What it does)\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes # (issue)\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5575/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5575/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5574",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5574/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5574/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5574/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5574",
        "id": 1736929993,
        "node_id": "PR_kwDOIPDwls5R71Lq",
        "number": 5574,
        "title": "Fix bedrock boto3 client instantiation",
        "user": {
            "login": "seanpmorgan",
            "id": 18154355,
            "node_id": "MDQ6VXNlcjE4MTU0MzU1",
            "avatar_url": "https://avatars.githubusercontent.com/u/18154355?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seanpmorgan",
            "html_url": "https://github.com/seanpmorgan",
            "followers_url": "https://api.github.com/users/seanpmorgan/followers",
            "following_url": "https://api.github.com/users/seanpmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/seanpmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seanpmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seanpmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/seanpmorgan/orgs",
            "repos_url": "https://api.github.com/users/seanpmorgan/repos",
            "events_url": "https://api.github.com/users/seanpmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seanpmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T19:13:52Z",
        "updated_at": "2023-06-02T17:56:49Z",
        "closed_at": "2023-06-01T19:35:06Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5574",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5574",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5574.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5574.patch",
            "merged_at": "2023-06-01T19:35:06Z"
        },
        "body": "https://github.com/hwchase17/langchain/pull/5523 has a small bug if client was not passed in constructor\r\n\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5574/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5574/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5573",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5573/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5573/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5573/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5573",
        "id": 1736849027,
        "node_id": "PR_kwDOIPDwls5R7jQ4",
        "number": 5573,
        "title": "Add missing comma in conv chat agent prompt json",
        "user": {
            "login": "andrewlei",
            "id": 1158058,
            "node_id": "MDQ6VXNlcjExNTgwNTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1158058?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andrewlei",
            "html_url": "https://github.com/andrewlei",
            "followers_url": "https://api.github.com/users/andrewlei/followers",
            "following_url": "https://api.github.com/users/andrewlei/following{/other_user}",
            "gists_url": "https://api.github.com/users/andrewlei/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andrewlei/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andrewlei/subscriptions",
            "organizations_url": "https://api.github.com/users/andrewlei/orgs",
            "repos_url": "https://api.github.com/users/andrewlei/repos",
            "events_url": "https://api.github.com/users/andrewlei/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andrewlei/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T18:18:28Z",
        "updated_at": "2023-06-01T20:15:42Z",
        "closed_at": "2023-06-01T19:12:45Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5573",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5573",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5573.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5573.patch",
            "merged_at": "2023-06-01T19:12:45Z"
        },
        "body": "# Add missing comma in conversational chat agent prompt json\r\n\r\nInspired by: https://github.com/hwchase17/langchainjs/pull/1498\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5573/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5573/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5572",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5572/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5572/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5572/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5572",
        "id": 1736819086,
        "node_id": "PR_kwDOIPDwls5R7ckg",
        "number": 5572,
        "title": "propagate callbacks to ConversationalRetrievalChain",
        "user": {
            "login": "alecf",
            "id": 135340,
            "node_id": "MDQ6VXNlcjEzNTM0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/135340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alecf",
            "html_url": "https://github.com/alecf",
            "followers_url": "https://api.github.com/users/alecf/followers",
            "following_url": "https://api.github.com/users/alecf/following{/other_user}",
            "gists_url": "https://api.github.com/users/alecf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alecf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alecf/subscriptions",
            "organizations_url": "https://api.github.com/users/alecf/orgs",
            "repos_url": "https://api.github.com/users/alecf/repos",
            "events_url": "https://api.github.com/users/alecf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alecf/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-01T18:00:36Z",
        "updated_at": "2023-06-20T20:31:34Z",
        "closed_at": "2023-06-08T03:25:22Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5572",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5572",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5572.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5572.patch",
            "merged_at": "2023-06-08T03:25:22Z"
        },
        "body": "# Allow callbacks to monitor ConversationalRetrievalChain\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\nI ran into an issue where load_qa_chain was not passing the callbacks down to the child LLM chains, and so made sure that callbacks are propagated. There are probably more improvements to do here but this seemed like a good place to stop. \r\n\r\nNote that I saw a lot of references to callbacks_manager, which seems to be deprecated. I left that code alone for now.\r\n\r\n\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n@agola11\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5572/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5572/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5571",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5571/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5571/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5571/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5571",
        "id": 1736727778,
        "node_id": "PR_kwDOIPDwls5R7Ii8",
        "number": 5571,
        "title": "Fix typo in docugami.ipynb",
        "user": {
            "login": "eltociear",
            "id": 22633385,
            "node_id": "MDQ6VXNlcjIyNjMzMzg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/22633385?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eltociear",
            "html_url": "https://github.com/eltociear",
            "followers_url": "https://api.github.com/users/eltociear/followers",
            "following_url": "https://api.github.com/users/eltociear/following{/other_user}",
            "gists_url": "https://api.github.com/users/eltociear/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eltociear/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eltociear/subscriptions",
            "organizations_url": "https://api.github.com/users/eltociear/orgs",
            "repos_url": "https://api.github.com/users/eltociear/repos",
            "events_url": "https://api.github.com/users/eltociear/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eltociear/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T16:53:57Z",
        "updated_at": "2023-06-01T18:45:57Z",
        "closed_at": "2023-06-01T18:45:56Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5571",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5571",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5571.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5571.patch",
            "merged_at": "2023-06-01T18:45:56Z"
        },
        "body": "\r\n\r\n# Fix typo in docugami.ipynb\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixed typo.\r\ninfromation -> information\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5571/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5571/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5570",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5570/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5570/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5570/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5570",
        "id": 1736654491,
        "node_id": "PR_kwDOIPDwls5R64T6",
        "number": 5570,
        "title": "StructuredQuery: \"and/or\" Operation should never have just one argument",
        "user": {
            "login": "ryderwishart",
            "id": 19649268,
            "node_id": "MDQ6VXNlcjE5NjQ5MjY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/19649268?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ryderwishart",
            "html_url": "https://github.com/ryderwishart",
            "followers_url": "https://api.github.com/users/ryderwishart/followers",
            "following_url": "https://api.github.com/users/ryderwishart/following{/other_user}",
            "gists_url": "https://api.github.com/users/ryderwishart/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ryderwishart/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ryderwishart/subscriptions",
            "organizations_url": "https://api.github.com/users/ryderwishart/orgs",
            "repos_url": "https://api.github.com/users/ryderwishart/repos",
            "events_url": "https://api.github.com/users/ryderwishart/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ryderwishart/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-01T16:09:55Z",
        "updated_at": "2023-06-03T22:19:08Z",
        "closed_at": "2023-06-03T22:19:07Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5570",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5570",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5570.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5570.patch",
            "merged_at": null
        },
        "body": "# StructuredQuery: \"and/or\" Operation should never have just one argument\r\n\r\nThis PR adds a validation step for StructuredQuery instances with single-argument and/or Operations\r\n\r\n## Context\r\n\r\nI have some metadata attributes on my Chroma docs, and I create a `SelfQueryRetriever` with this information:\r\n```python\r\nfrom langchain.llms import OpenAI\r\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\r\nfrom langchain.chains.query_constructor.base import AttributeInfo\r\n\r\nmetadata_field_info=[\r\n    AttributeInfo(\r\n        name=\"source\",\r\n        description=\"File path to the source document\", \r\n        type=\"string\", \r\n    ),\r\n    AttributeInfo(\r\n        name=\"data_scope\",\r\n        description=\"Type/scope of linguistic data in document\",\r\n        type=\"string\", \r\n    ),\r\n    AttributeInfo(\r\n        name=\"verse_ref\",\r\n        description=\"Complete BOK CH:VS reference for verse (in USFM format)\",\r\n        type=\"string\", \r\n    ),\r\n    AttributeInfo(\r\n        name=\"book\",\r\n        description=\"Book name\",\r\n        type=\"string\", \r\n    ),\r\n    AttributeInfo(\r\n        name=\"chapter\",\r\n        description=\"Chapter number\",\r\n        type=\"integer\", \r\n    ),\r\n    AttributeInfo(\r\n        name=\"verse\",\r\n        description=\"Verse number\",\r\n        type=\"integer\", \r\n    ),\r\n]\r\ndocument_content_description = \"Linguistic data about a bible verse\"\r\nretriever = SelfQueryRetriever.from_llm(llm, context_chroma, document_content_description, metadata_field_info, verbose=True)\r\n```\r\n\r\n## Problem encountered\r\n\r\nWhen I try to retrieve documents, the parser may return a `StructuredQuery` with only one argument wrapped in an `Operation` (e.g., 'and', 'or').\r\n\r\nInput:\r\n```python\r\nprint(retriever.get_relevant_documents('jesus speaks to peter in the book of matthew'))\r\n```\r\n\r\nOutput (with some extra print statements):\r\n```python\r\nthese were the inputs: {'query': 'jesus speaks to peter in the book of matthew'} \r\n\r\nthis was the query: query='jesus speaks to peter' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='book', value='Matthew')]) limit=None\r\n```\r\n\r\nAnd then we encounter an error when we try to actually query the Chroma database:\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[28], line 1\r\n----> 1 print(retriever.get_relevant_documents('jesus speaks to peter in the book of matthew'))\r\n      2 print(retriever.get_relevant_documents('jesus speaks to peter in Luke 9:20'))\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/langchain/retrievers/self_query/base.py:104, in SelfQueryRetriever.get_relevant_documents(self, query)\r\n    101     new_kwargs[\"k\"] = structured_query.limit\r\n    103 search_kwargs = {**self.search_kwargs, **new_kwargs}\r\n--> 104 docs = self.vectorstore.search(new_query, self.search_type, **search_kwargs)\r\n    105 return docs\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/langchain/vectorstores/base.py:82, in VectorStore.search(self, query, search_type, **kwargs)\r\n     80 \"\"\"Return docs most similar to query using specified search type.\"\"\"\r\n     81 if search_type == \"similarity\":\r\n---> 82     return self.similarity_search(query, **kwargs)\r\n     83 elif search_type == \"mmr\":\r\n     84     return self.max_marginal_relevance_search(query, **kwargs)\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/langchain/vectorstores/chroma.py:182, in Chroma.similarity_search(self, query, k, filter, **kwargs)\r\n    165 def similarity_search(\r\n    166     self,\r\n    167     query: str,\r\n   (...)\r\n    170     **kwargs: Any,\r\n    171 ) -> List[Document]:\r\n    172     \"\"\"Run similarity search with Chroma.\r\n    173 \r\n    174     Args:\r\n   (...)\r\n    180         List[Document]: List of documents most similar to the query text.\r\n    181     \"\"\"\r\n--> 182     docs_and_scores = self.similarity_search_with_score(query, k, filter=filter)\r\n    183     return [doc for doc, _ in docs_and_scores]\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/langchain/vectorstores/chroma.py:229, in Chroma.similarity_search_with_score(self, query, k, filter, **kwargs)\r\n    227 else:\r\n    228     query_embedding = self._embedding_function.embed_query(query)\r\n--> 229     results = self.__query_collection(\r\n    230         query_embeddings=[query_embedding], n_results=k, where=filter\r\n    231     )\r\n    233 return _results_to_docs_and_scores(results)\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/langchain/utils.py:52, in xor_args..decorator..wrapper(*args, **kwargs)\r\n     46     invalid_group_names = [\", \".join(arg_groups[i]) for i in invalid_groups]\r\n     47     raise ValueError(\r\n     48         \"Exactly one argument in each of the following\"\r\n     49         \" groups must be defined:\"\r\n     50         f\" {', '.join(invalid_group_names)}\"\r\n     51     )\r\n---> 52 return func(*args, **kwargs)\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/langchain/vectorstores/chroma.py:121, in Chroma.__query_collection(self, query_texts, query_embeddings, n_results, where, **kwargs)\r\n    119 for i in range(n_results, 0, -1):\r\n    120     try:\r\n--> 121         return self._collection.query(\r\n    122             query_texts=query_texts,\r\n    123             query_embeddings=query_embeddings,\r\n    124             n_results=i,\r\n    125             where=where,\r\n    126             **kwargs,\r\n    127         )\r\n    128     except chromadb.errors.NotEnoughElementsException:\r\n    129         logger.error(\r\n    130             f\"Chroma collection {self._collection.name} \"\r\n    131             f\"contains fewer than {i} elements.\"\r\n    132         )\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/chromadb/api/models/Collection.py:188, in Collection.query(self, query_embeddings, query_texts, n_results, where, where_document, include)\r\n    161 def query(\r\n    162     self,\r\n    163     query_embeddings: Optional[OneOrMany[Embedding]] = None,\r\n   (...)\r\n    168     include: Include = [\"metadatas\", \"documents\", \"distances\"],\r\n    169 ) -> QueryResult:\r\n    170     \"\"\"Get the n_results nearest neighbor embeddings for provided query_embeddings or query_texts.\r\n    171 \r\n    172     Args:\r\n   (...)\r\n    186 \r\n    187     \"\"\"\r\n--> 188     where = validate_where(where) if where else None\r\n    189     where_document = (\r\n    190         validate_where_document(where_document) if where_document else None\r\n    191     )\r\n    192     query_embeddings = (\r\n    193         validate_embeddings(maybe_cast_one_to_many(query_embeddings))\r\n    194         if query_embeddings is not None\r\n    195         else None\r\n    196     )\r\n\r\nFile /opt/homebrew/lib/python3.10/site-packages/chromadb/api/types.py:148, in validate_where(where)\r\n    144     raise ValueError(\r\n    145         f\"Expected where value for $and or $or to be a list of where expressions, got {value}\"\r\n    146     )\r\n    147 if len(value) <= 1:\r\n--> 148     raise ValueError(\r\n    149         f\"Expected where value for $and or $or to be a list with at least two where expressions, got {value}\"\r\n    150     )\r\n    151 for where_expression in value:\r\n    152     validate_where(where_expression)\r\n\r\nValueError: Expected where value for $and or $or to be a list with at least two where expressions, got [{'book': {'$eq': 'Matthew'}}]\r\n```\r\n\r\n## Solution implemented\r\n\r\n### When there should be one argument (and thus no `Operation` wrapper)\r\n\r\nWith my code modifications, this input:\r\n```python\r\n# Query that should have only one argument:\r\nprint(retriever.get_relevant_documents('jesus speaks to peter in the book of matthew'))\r\n```\r\n\r\ngenerates this output:\r\n```python\r\nthese were the inputs:  {'query': 'jesus speaks to peter in the book of matthew'}\r\n\r\nthis was the query:  query='jesus speaks to peter' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='book', value='Matthew')]) limit=None\r\n\r\nOnly one argument provided to the Operation. Passing argument directly instead of wrapping in Operation.\r\n\r\nquery='jesus speaks to peter' filter=Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='book', value='Matthew') limit=None\r\n\r\n[Document(page_content=\"Social-Situational Context:\\n\\nThis word is part of the passage 'The Denial of Peter'\\n  - This passage is a Forewarning/Private Discussion situation, which can be described in typical terms as follows: [...]  - Interpersonal activity focus pertains to the social interaction between participants, focusing on their roles, relationships, and attitudes.\", metadata={'source': '/Users/ryderwishart/genesis/itemized_prose_contexts/MAT 26:75.txt_Social-Situational.txt', 'data_scope': 'Social-Situational', 'verse_ref': 'MAT 26:75', 'book': 'Matthew', 'chapter': '26', 'verse': '75'})]\r\n```\r\n\r\n### When there should be multiple arguments (and thus there *should be* an `Operation` wrapper)\r\n\r\nThis input:\r\n```python\r\n# Query that should have multiple arguments:\r\nprint(retriever.get_relevant_documents('jesus speaks to peter in Luke 9:20'))\r\n```\r\n\r\ngenerates this output:\r\n```python\r\nthese were the inputs:  {'query': 'jesus speaks to peter in Luke 9:20'}\r\n\r\nthis was the query:  query='jesus speaks to peter' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='book', value='Luke'), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='chapter', value=9), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='verse', value=20)]) limit=None\r\n\r\n[Document(page_content=\"Social-Situational Context:\\n\\nThis word is part of the passage 'Peter's Confession and Christ's Answer'\\n  - This passage [...] \u03cc\u03c2:\\n\\nDomain label: Whom or What Spoken or Written About\\nCultural information for \u03b5\u1f30\u03bc\u03af:\\n\\nDomain label: State', metadata={'source': '/Users/ryderwishart/genesis/itemized_prose_contexts/LUK 9:20.txt_Cultural-encyclopedic.txt', 'data_scope': 'Cultural-encyclopedic', 'verse_ref': 'LUK 9:20', 'book': 'Luke', 'chapter': '9', 'verse': '20'})]\r\n```\r\n\r\n### Conclusion\r\n\r\nIn short, the function correctly drops the `Operation` wrapper if there is only one argument passed to it.\r\n\r\n## Contribution guidelines\r\n\r\nI ran the formatting and linting. I don't think any of these linting errors are a result of my code:\r\n\r\n```bash\r\n% make lint\r\n\r\npoetry run mypy .\r\n\r\nlangchain/evaluation/loading.py:5: **error:** Incompatible import of **\"load_dataset\"** (imported name has type **\"Callable[[str, Optional[str], Optional[str], Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]], None], Union[str, Split, None], Optional[str], Optional[Features], Optional[DownloadConfig], Optional[GenerateMode], bool, Optional[bool], bool, Union[str, Version, None], Union[bool, str, None], Union[str, TaskTemplate, None], bool, Any, KwArg(Any)], Union[DatasetDict, Dataset, IterableDatasetDict, IterableDataset]]\"**, local name has type **\"Callable[[str], List[Dict[Any, Any]]]\"**)\u00a0 [assignment]\r\n\r\nlangchain/evaluation/loading.py:8: **error:** No overload variant of **\"__getitem__\"** of **\"list\"** matches argument type **\"str\"**\u00a0 [call-overload]\r\n\r\nlangchain/evaluation/loading.py:8: note: Possible overload variants:\r\n\r\nlangchain/evaluation/loading.py:8: note: \u00a0 \u00a0 def __getitem__(self, SupportsIndex, /) -> Dict[Any, Any]\r\n\r\nlangchain/evaluation/loading.py:8: note: \u00a0 \u00a0 def __getitem__(self, slice, /) -> List[Dict[Any, Any]]\r\n\r\nlangchain/vectorstores/mongodb_atlas.py:185: **error:** Argument 1 to **\"aggregate\"** of **\"Collection\"** has incompatible type **\"List[object]\"**; expected **\"Sequence[Mapping[str, Any]]\"**\u00a0 [arg-type]\r\n\r\nlangchain/document_loaders/hugging_face_dataset.py:81: **error:** Item **\"Dataset\"** of **\"Union[DatasetDict, Dataset, IterableDatasetDict, IterableDataset]\"** has no attribute **\"keys\"**\u00a0 [union-attr]\r\n\r\nlangchain/document_loaders/hugging_face_dataset.py:81: **error:** Item **\"IterableDataset\"** of **\"Union[DatasetDict, Dataset, IterableDatasetDict, IterableDataset]\"** has no attribute **\"keys\"**\u00a0 [union-attr]\r\n\r\nlangchain/document_loaders/hugging_face_dataset.py:82: **error:** Value of type **\"Union[DatasetDict, Dataset, IterableDatasetDict, IterableDataset]\"** is not indexable\u00a0 [index]\r\n\r\n**Found 6 errors in 3 files (checked 1086 source files)**\r\n\r\nmake: *** [lint] Error 1\r\n```\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@dev2049 (authored original code)\r\n@hwchase17 (co-authored original code)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5570/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5570/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5569",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5569/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5569/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5569/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5569",
        "id": 1736599386,
        "node_id": "PR_kwDOIPDwls5R6r5c",
        "number": 5569,
        "title": "Es knn index search  5346",
        "user": {
            "login": "jeffvestal",
            "id": 53237856,
            "node_id": "MDQ6VXNlcjUzMjM3ODU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/53237856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jeffvestal",
            "html_url": "https://github.com/jeffvestal",
            "followers_url": "https://api.github.com/users/jeffvestal/followers",
            "following_url": "https://api.github.com/users/jeffvestal/following{/other_user}",
            "gists_url": "https://api.github.com/users/jeffvestal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jeffvestal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jeffvestal/subscriptions",
            "organizations_url": "https://api.github.com/users/jeffvestal/orgs",
            "repos_url": "https://api.github.com/users/jeffvestal/repos",
            "events_url": "https://api.github.com/users/jeffvestal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jeffvestal/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T15:44:09Z",
        "updated_at": "2023-06-02T15:40:36Z",
        "closed_at": "2023-06-02T15:40:36Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5569",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5569",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5569.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5569.patch",
            "merged_at": "2023-06-02T15:40:36Z"
        },
        "body": "# Create elastic_vector_search.ElasticKnnSearch class\r\n\r\nThis extends `langchain/vectorstores/elastic_vector_search.py` by adding a new class `ElasticKnnSearch`\r\n\r\nFeatures:\r\n- Allow creating an index with the `dense_vector` mapping compataible with kNN search \r\n- Store embeddings in index for use with kNN search (correct mapping creates HNSW data structure)\r\n- Perform approximate kNN search\r\n- Perform hybrid BM25 (`query{}`) + kNN (`knn{}`) search\r\n- perform knn search by either providing a `query_vector` or passing a hosted `model_id` to use query_vector_builder to automatically generate a query_vector at search time\r\n\r\nConnection options\r\n- Using `cloud_id` from Elastic Cloud\r\n- Passing elasticsearch client object\r\n\r\nsearch options\r\n- query\r\n- k\r\n- query_vector\r\n- model_id\r\n- size\r\n- source\r\n- knn_boost (hybrid search)\r\n- query_boost (hybrid search)\r\n- fields\r\n\r\n\r\nThis also adds examples to `docs/modules/indexes/vectorstores/examples/elasticsearch.ipynb`\r\n\r\n\r\nFixes # [5346](https://github.com/hwchase17/langchain/issues/5346)\r\n\r\ncc: @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5569/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5569/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5568",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5568/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5568/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5568/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5568",
        "id": 1736583715,
        "node_id": "PR_kwDOIPDwls5R6ogH",
        "number": 5568,
        "title": "bump 188",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5010622926,
                "node_id": "LA_kwDOIPDwls8AAAABKqgJzg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/release",
                "name": "release",
                "color": "07D4BE",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T15:34:12Z",
        "updated_at": "2023-06-01T15:50:55Z",
        "closed_at": "2023-06-01T15:50:55Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5568",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5568",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5568.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5568.patch",
            "merged_at": "2023-06-01T15:50:55Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5568/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5568/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5567",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5567/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5567/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5567/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5567",
        "id": 1736567184,
        "node_id": "PR_kwDOIPDwls5R6k4m",
        "number": 5567,
        "title": "Qdrant self query",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T15:25:42Z",
        "updated_at": "2023-06-01T15:40:32Z",
        "closed_at": "2023-06-01T15:40:31Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5567",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5567",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5567.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5567.patch",
            "merged_at": "2023-06-01T15:40:31Z"
        },
        "body": "add self query abilities to qdrant vectorstore",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5567/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 1,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5567/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5566",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5566/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5566/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5566/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5566",
        "id": 1736507423,
        "node_id": "PR_kwDOIPDwls5R6XqN",
        "number": 5566,
        "title": "Add parameters to send_message() call for vertexai chat models (PaLM2)",
        "user": {
            "login": "khallbobo",
            "id": 871838,
            "node_id": "MDQ6VXNlcjg3MTgzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/871838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/khallbobo",
            "html_url": "https://github.com/khallbobo",
            "followers_url": "https://api.github.com/users/khallbobo/followers",
            "following_url": "https://api.github.com/users/khallbobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/khallbobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/khallbobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/khallbobo/subscriptions",
            "organizations_url": "https://api.github.com/users/khallbobo/orgs",
            "repos_url": "https://api.github.com/users/khallbobo/repos",
            "events_url": "https://api.github.com/users/khallbobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/khallbobo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T14:54:44Z",
        "updated_at": "2023-06-05T15:12:17Z",
        "closed_at": "2023-06-03T22:17:38Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5566",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5566",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5566.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5566.patch",
            "merged_at": "2023-06-03T22:17:38Z"
        },
        "body": "# Ensure parameters are used by vertexai chat models (PaLM2)\r\n\r\nThe current version of the google aiplatform contains a bug where parameters for a chat model are not used as intended.\r\n\r\nSee https://github.com/googleapis/python-aiplatform/issues/2263\r\n\r\nParams can be passed both to start_chat() and send_message(); however, the parameters passed to start_chat() will not be used if send_message() is called without the overrides.  This is due to the defaults in send_message() being global values rather than None (there is code in send_message() which would use the params from start_chat() if the param passed to send_message() evaluates to False, but that won't happen as the defaults are global values).\r\n\r\nFixes # 5531\r\n\r\n@hwchase17\r\n@agola11\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5566/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5566/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5565",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5565/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5565/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5565/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5565",
        "id": 1736477317,
        "node_id": "I_kwDOIPDwls5ngIqF",
        "number": 5565,
        "title": "DOC: mlflow logging for GraphCypherQAChain",
        "user": {
            "login": "gladomat",
            "id": 17472969,
            "node_id": "MDQ6VXNlcjE3NDcyOTY5",
            "avatar_url": "https://avatars.githubusercontent.com/u/17472969?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gladomat",
            "html_url": "https://github.com/gladomat",
            "followers_url": "https://api.github.com/users/gladomat/followers",
            "following_url": "https://api.github.com/users/gladomat/following{/other_user}",
            "gists_url": "https://api.github.com/users/gladomat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gladomat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gladomat/subscriptions",
            "organizations_url": "https://api.github.com/users/gladomat/orgs",
            "repos_url": "https://api.github.com/users/gladomat/repos",
            "events_url": "https://api.github.com/users/gladomat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gladomat/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T14:41:12Z",
        "updated_at": "2023-09-10T16:08:53Z",
        "closed_at": "2023-09-10T16:08:53Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue with current documentation:\n\nI see there is a bit of documentation about the [GraphCypherQAChain](https://python.langchain.com/en/latest/modules/chains/examples/graph_cypher_qa.html). There is also a documentation about using [mlflow with langchain](https://sj-langchain.readthedocs.io/en/latest/ecosystem/mlflow_tracking.html). However, there is no documentation about how to implement both. I tried to figure it out, but I failed. Is there a way to do it or does it have to be implemented?\n\n### Idea or request for content:\n\nA description on using GraphCypherQAChain together with prompt logging as provided by mlflow.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5565/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5565/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5564",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5564/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5564/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5564/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5564",
        "id": 1736473352,
        "node_id": "PR_kwDOIPDwls5R6QEM",
        "number": 5564,
        "title": "feat: docarray as a retriever",
        "user": {
            "login": "jupyterjazz",
            "id": 45267439,
            "node_id": "MDQ6VXNlcjQ1MjY3NDM5",
            "avatar_url": "https://avatars.githubusercontent.com/u/45267439?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jupyterjazz",
            "html_url": "https://github.com/jupyterjazz",
            "followers_url": "https://api.github.com/users/jupyterjazz/followers",
            "following_url": "https://api.github.com/users/jupyterjazz/following{/other_user}",
            "gists_url": "https://api.github.com/users/jupyterjazz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jupyterjazz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jupyterjazz/subscriptions",
            "organizations_url": "https://api.github.com/users/jupyterjazz/orgs",
            "repos_url": "https://api.github.com/users/jupyterjazz/repos",
            "events_url": "https://api.github.com/users/jupyterjazz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jupyterjazz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T14:38:54Z",
        "updated_at": "2023-06-01T14:40:20Z",
        "closed_at": "2023-06-01T14:40:20Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": true,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5564",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5564",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5564.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5564.patch",
            "merged_at": null
        },
        "body": "https://github.com/docarray/docarray/issues/1599",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5564/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5564/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5563",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5563/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5563/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5563/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5563",
        "id": 1736402725,
        "node_id": "PR_kwDOIPDwls5R6Apk",
        "number": 5563,
        "title": "Documentation fixes (linting and broken links)",
        "user": {
            "login": "sseide",
            "id": 5168949,
            "node_id": "MDQ6VXNlcjUxNjg5NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5168949?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sseide",
            "html_url": "https://github.com/sseide",
            "followers_url": "https://api.github.com/users/sseide/followers",
            "following_url": "https://api.github.com/users/sseide/following{/other_user}",
            "gists_url": "https://api.github.com/users/sseide/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sseide/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sseide/subscriptions",
            "organizations_url": "https://api.github.com/users/sseide/orgs",
            "repos_url": "https://api.github.com/users/sseide/repos",
            "events_url": "https://api.github.com/users/sseide/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sseide/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528810,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvKg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/documentation",
                "name": "documentation",
                "color": "0075ca",
                "default": true,
                "description": "Improvements or additions to documentation"
            },
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T14:01:57Z",
        "updated_at": "2023-06-09T09:14:24Z",
        "closed_at": "2023-06-01T20:06:17Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5563",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5563",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5563.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5563.patch",
            "merged_at": "2023-06-01T20:06:17Z"
        },
        "body": "# Lint sphinx documentation and fix broken links\r\n\r\nThis PR lints multiple warnings shown in generation of the project documentation (using \"make docs_linkcheck\" and \"make docs_build\"). Additionally documentation internal links to (now?) non-existent files are modified to point to existing documents as it seemed the new correct target.\r\n\r\nThe documentation is not updated content wise.\r\nThere are no source code changes.\r\n\r\nFixes # (issue)\r\n\r\n- broken documentation links to other files within the project\r\n- sphinx formatting (linting)\r\n\r\n## Before submitting\r\n\r\nNo source code changes, so no new tests added.\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5563/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5563/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5562",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5562/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5562/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5562/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5562",
        "id": 1736331518,
        "node_id": "I_kwDOIPDwls5nflD-",
        "number": 5562,
        "title": "Issue: does the stream of load_summarize_chain work?",
        "user": {
            "login": "legriser",
            "id": 1306479,
            "node_id": "MDQ6VXNlcjEzMDY0Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1306479?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/legriser",
            "html_url": "https://github.com/legriser",
            "followers_url": "https://api.github.com/users/legriser/followers",
            "following_url": "https://api.github.com/users/legriser/following{/other_user}",
            "gists_url": "https://api.github.com/users/legriser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/legriser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/legriser/subscriptions",
            "organizations_url": "https://api.github.com/users/legriser/orgs",
            "repos_url": "https://api.github.com/users/legriser/repos",
            "events_url": "https://api.github.com/users/legriser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/legriser/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T13:27:12Z",
        "updated_at": "2023-09-28T09:39:03Z",
        "closed_at": "2023-09-28T09:39:03Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\r\n\r\nI tried adding stream to reduce_llm like the code below to make it work but it doesn't seem to work.\r\n\r\n```\r\nreduce_llm = OpenAI(\r\n    streaming=True,\r\n    verbose=True,\r\n    callback_manager=callback,\r\n    temperature=0,\r\n    max_tokens=1000,\r\n)\r\n\r\nllm = OpenAI(\r\n    temperature=0,\r\n    max_tokens=500,\r\n    batch_size=2,\r\n)\r\n\r\nsummarize_chain = load_summarize_chain(\r\n    llm=llm,\r\n    reduce_llm=reduce_llm,\r\n    chain_type=\"map_reduce\",\r\n    map_prompt=map_prompt,\r\n    combine_prompt=combine_prompt,\r\n)\r\n         \r\nreturn await summarize_chain.arun(...)\r\n```\r\n```\r\n/lib/python3.10/site-packages/langchain/llms/base.py:133: RuntimeWarning: coroutine 'AsyncCallbackManager.on_llm_start' was never awaited\r\n  self.callback_manager.on_llm_start(\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nlib/python3.10/site-packages/langchain/llms/openai.py:284: RuntimeWarning: coroutine 'AsyncCallbackManager.on_llm_new_token' was never awaited\r\n  self.callback_manager.on_llm_new_token(\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\n/lib/python3.10/site-packages/langchain/llms/base.py:141: RuntimeWarning: coroutine 'AsyncCallbackManager.on_llm_end' was never awaited\r\n```\r\nPlease let me know if I'm doing something wrong or if there's any other good way.\r\nThank you.\r\n\r\n### Suggestion:\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5562/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5562/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5561",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5561/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5561/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5561/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5561",
        "id": 1736327704,
        "node_id": "I_kwDOIPDwls5nfkIY",
        "number": 5561,
        "title": "prompt issue and handling answers",
        "user": {
            "login": "geg00",
            "id": 10646838,
            "node_id": "MDQ6VXNlcjEwNjQ2ODM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/10646838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/geg00",
            "html_url": "https://github.com/geg00",
            "followers_url": "https://api.github.com/users/geg00/followers",
            "following_url": "https://api.github.com/users/geg00/following{/other_user}",
            "gists_url": "https://api.github.com/users/geg00/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/geg00/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/geg00/subscriptions",
            "organizations_url": "https://api.github.com/users/geg00/orgs",
            "repos_url": "https://api.github.com/users/geg00/repos",
            "events_url": "https://api.github.com/users/geg00/events{/privacy}",
            "received_events_url": "https://api.github.com/users/geg00/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T13:24:54Z",
        "updated_at": "2023-08-31T16:17:37Z",
        "closed_at": "2023-08-31T16:17:37Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\n\r\n\r\n\r\n```\r\nprompt_template = \"\"\"Use the following pieces of context to answer the question at the end based on the examples provided in between ++++++++ If you don't know the answer, just answer with [], don't try to make up an answer.              \r\n++++++++\r\nHere are some examples: \r\nred: The apple is red\r\nyellow: the bannana is yellow\r\nQuestion:  What is the color of the bannana?\r\n[yellow]\r\n++++++++\r\nred: The apple is red\r\nyellow: the bannana is yellow\r\nQuestion: Which ones are fruits?\r\n[red, yellow]\r\n++++++++\r\nred: The apple is red\r\nyellow: the bannana is yellow\r\nQuestion: Are there any of them blue?\r\n[]\r\n++++++++\r\nNow that you know what to do here between ``` provide a similar answer check under Helpful Answer: for more information\r\n```\r\n{context}              \r\nQuestion: {question}\r\n{format_answer}\r\n```\r\nThe examples in between ++++++++ are to understand better the way to produce the answeres\r\n\r\nThe section between ``` are the ones that you will have to elaborate and provide answers.\r\nHelpful Answer: \r\nYour answer should be [document1] when document1 is the pertinent answer \r\nYour answer should be [document2] when document2 is the pertinent answer \r\nThe answer should be [document1, document2] when document1 and document2 include the answer or when the answer could be both of the,\r\nNot interested why document1 or document2 are better I just need to know which one\r\nWhen you cannot find the answer respond with []\"\"\"\r\n```\r\n\r\nI'm providing \r\n```\r\nformat_answer = output_parser.get_format_instructions()\r\nprompt = PromptTemplate(\r\n    template=prompt_template,\r\n    input_variables=[\"context\", \"question\"],\r\n    partial_variables={\"format_answer\": format_answer}\r\n)\r\n```\r\n\r\nI'm providing context and question \r\nwith the format \r\ndocument1: text text text\r\ndocument2: text text\r\n\r\nQuestion: question goes here?\r\n{format_answer}\r\n\r\nBut Azure Open AI answer sometimes with the format specified and some times just spit out the text provided with document1 and document2 \r\n\r\nAny help?\r\n\n\n### Suggestion:\n\nI would like to understand more about \r\n1) How to generate consistent answers from the LLM to the same question \r\n==> Good luck with that\r\n\r\n2) I would like to understand how to validate the answers better than the \"parser\" available here.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5561/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5561/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5559",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5559/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5559/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5559/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5559",
        "id": 1736193423,
        "node_id": "PR_kwDOIPDwls5R5SeW",
        "number": 5559,
        "title": "Corrects inconsistently misspelled variable name.",
        "user": {
            "login": "patrickkeane",
            "id": 13934664,
            "node_id": "MDQ6VXNlcjEzOTM0NjY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/13934664?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/patrickkeane",
            "html_url": "https://github.com/patrickkeane",
            "followers_url": "https://api.github.com/users/patrickkeane/followers",
            "following_url": "https://api.github.com/users/patrickkeane/following{/other_user}",
            "gists_url": "https://api.github.com/users/patrickkeane/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/patrickkeane/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/patrickkeane/subscriptions",
            "organizations_url": "https://api.github.com/users/patrickkeane/orgs",
            "repos_url": "https://api.github.com/users/patrickkeane/repos",
            "events_url": "https://api.github.com/users/patrickkeane/events{/privacy}",
            "received_events_url": "https://api.github.com/users/patrickkeane/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T12:13:04Z",
        "updated_at": "2023-06-01T14:34:16Z",
        "closed_at": "2023-06-01T14:27:59Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5559",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5559",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5559.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5559.patch",
            "merged_at": "2023-06-01T14:27:59Z"
        },
        "body": "Corrects a spelling error (of the word separator) in several variable names.  Three cut/paste instances of this were corrected, amidst instances of it also being named properly, which would likely would lead to issues for someone in the future.\r\n\r\nHere is one such example:\r\n\r\n```\r\n        seperators = self.get_separators_for_language(Language.PYTHON)\r\n        super().__init__(separators=seperators, **kwargs)\r\n```\r\nbecomes\r\n```\r\n        separators = self.get_separators_for_language(Language.PYTHON)\r\n        super().__init__(separators=separators, **kwargs)\r\n```\r\n\r\nMake test results below:\r\n\r\n```\r\n============================== 708 passed, 52 skipped, 27 warnings in 11.70s ==============================\r\n```\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5559/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5559/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5558",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5558/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5558/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5558/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5558",
        "id": 1736191492,
        "node_id": "PR_kwDOIPDwls5R5SBf",
        "number": 5558,
        "title": "similarity search with score and threshold in elastic search",
        "user": {
            "login": "deva-ghb",
            "id": 99424738,
            "node_id": "U_kgDOBe0Z4g",
            "avatar_url": "https://avatars.githubusercontent.com/u/99424738?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deva-ghb",
            "html_url": "https://github.com/deva-ghb",
            "followers_url": "https://api.github.com/users/deva-ghb/followers",
            "following_url": "https://api.github.com/users/deva-ghb/following{/other_user}",
            "gists_url": "https://api.github.com/users/deva-ghb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deva-ghb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deva-ghb/subscriptions",
            "organizations_url": "https://api.github.com/users/deva-ghb/orgs",
            "repos_url": "https://api.github.com/users/deva-ghb/repos",
            "events_url": "https://api.github.com/users/deva-ghb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deva-ghb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5541432778,
                "node_id": "LA_kwDOIPDwls8AAAABSkuNyg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20vector%20store",
                "name": "area: vector store",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to vector store module"
            },
            {
                "id": 5680700873,
                "node_id": "LA_kwDOIPDwls8AAAABUpidyQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:improvement",
                "name": "auto:improvement",
                "color": "FBCA04",
                "default": false,
                "description": "Medium size change to existing code to handle new use-cases"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T12:12:21Z",
        "updated_at": "2023-09-13T20:45:40Z",
        "closed_at": "2023-09-13T20:45:39Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5558",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5558",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5558.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5558.patch",
            "merged_at": null
        },
        "body": "Perform a similarity-based search in Elasticsearch, filtering documents based on the specified score threshold.\r\n\r\n\r\n@jeffvestal \r\n@sergerdn \r\n -->\r\n \r\nIn the ElasticSearch vector store, this function allows ignoring chunks that have a similarity score with the query below a specified threshold.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5558/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5558/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5557",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5557/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5557/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5557/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5557",
        "id": 1736135856,
        "node_id": "I_kwDOIPDwls5ne1Sw",
        "number": 5557,
        "title": "Extendable SequentialChain ",
        "user": {
            "login": "realyashnag",
            "id": 26687805,
            "node_id": "MDQ6VXNlcjI2Njg3ODA1",
            "avatar_url": "https://avatars.githubusercontent.com/u/26687805?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/realyashnag",
            "html_url": "https://github.com/realyashnag",
            "followers_url": "https://api.github.com/users/realyashnag/followers",
            "following_url": "https://api.github.com/users/realyashnag/following{/other_user}",
            "gists_url": "https://api.github.com/users/realyashnag/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/realyashnag/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/realyashnag/subscriptions",
            "organizations_url": "https://api.github.com/users/realyashnag/orgs",
            "repos_url": "https://api.github.com/users/realyashnag/repos",
            "events_url": "https://api.github.com/users/realyashnag/events{/privacy}",
            "received_events_url": "https://api.github.com/users/realyashnag/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T11:49:10Z",
        "updated_at": "2023-09-14T16:07:02Z",
        "closed_at": "2023-09-14T16:07:01Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nI'd like to extend `SequentialChain` to create pre-built class which has a pre-populated list of `chains` in it. Consider the following example:\r\n```\r\nclass CoolChain(LLMChain):\r\n    ...\r\n    \r\nclass CalmChain(LLMChain):\r\n    ...\r\n    \r\nclass CoolCalmChain(SequentialChain):\r\n    llm: BaseLanguageModel\r\n    chains: List[LLMChain] = [\r\n        CoolChain(\r\n            llm=llm\r\n        ),\r\n        CalmChain(\r\n            llm=llm\r\n        )\r\n    ]\r\n``` \r\nThis unfortunately cannot happen because the `root_validator` for `SequentialChain` raises error that it cannot find `chains` being passed.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/yash/app/main.py\", line 17, in <module>\r\n    ai = CoolCalmChain(llm=my_llm)\r\n  File \"pydantic/main.py\", line 339, in pydantic.main.BaseModel.__init__\r\n  File \"pydantic/main.py\", line 1050, in pydantic.main.validate_model\r\n  File \"/home/yash/.venv/lib/python3.10/site-packages/langchain/chains/sequential.py\", line 47, in validate_chains\r\n    chains = values[\"chains\"]\r\nKeyError: 'chains'\r\n```\r\n\r\nI request that we find a way to bypass the stringent check so that this class can be easily extendable to support pre-built Chains which can be initialised on-the-go.\n\n### Motivation\n\nMotivation is to create multiple such \"Empty Sequential Classes\" which can be populated on-the-go. This saves us from populating parameters that might change for the same `SequentialChain`, such as the `llm` and `memory`, while defining the class itself.\r\nI tried to define another `root_validator` to override the SequentialChain one and even that did not work.  \n\n### Your contribution\n\nFew solutions that I could think of are as follows:\r\n- Removing `pre` from the `define_chains` **root_validator** in the `SequentialChain` class. \r\n- Using `@validator('chains')` instead, so that one can override it by simply using `pre`.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5557/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5557/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5556",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5556/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5556/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5556/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5556",
        "id": 1736107375,
        "node_id": "PR_kwDOIPDwls5R4_zU",
        "number": 5556,
        "title": "Create word.py",
        "user": {
            "login": "imaginespark",
            "id": 27605365,
            "node_id": "MDQ6VXNlcjI3NjA1MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/27605365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/imaginespark",
            "html_url": "https://github.com/imaginespark",
            "followers_url": "https://api.github.com/users/imaginespark/followers",
            "following_url": "https://api.github.com/users/imaginespark/following{/other_user}",
            "gists_url": "https://api.github.com/users/imaginespark/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/imaginespark/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/imaginespark/subscriptions",
            "organizations_url": "https://api.github.com/users/imaginespark/orgs",
            "repos_url": "https://api.github.com/users/imaginespark/repos",
            "events_url": "https://api.github.com/users/imaginespark/events{/privacy}",
            "received_events_url": "https://api.github.com/users/imaginespark/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T11:31:52Z",
        "updated_at": "2023-06-01T11:48:38Z",
        "closed_at": "2023-06-01T11:48:38Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5556",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5556",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5556.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5556.patch",
            "merged_at": null
        },
        "body": "Loader that loads word files, such as .doc or .docx file\r\n\r\n# Add a new DocumentLoader to support word file.\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes # (issue)\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## @eyurtsev\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5556/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5556/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5555",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5555/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5555/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5555/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5555",
        "id": 1736083127,
        "node_id": "I_kwDOIPDwls5neoa3",
        "number": 5555,
        "title": "Query With Multiple Collections",
        "user": {
            "login": "ragvendra3898",
            "id": 62380006,
            "node_id": "MDQ6VXNlcjYyMzgwMDA2",
            "avatar_url": "https://avatars.githubusercontent.com/u/62380006?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ragvendra3898",
            "html_url": "https://github.com/ragvendra3898",
            "followers_url": "https://api.github.com/users/ragvendra3898/followers",
            "following_url": "https://api.github.com/users/ragvendra3898/following{/other_user}",
            "gists_url": "https://api.github.com/users/ragvendra3898/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ragvendra3898/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ragvendra3898/subscriptions",
            "organizations_url": "https://api.github.com/users/ragvendra3898/orgs",
            "repos_url": "https://api.github.com/users/ragvendra3898/repos",
            "events_url": "https://api.github.com/users/ragvendra3898/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ragvendra3898/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2023-06-01T11:18:06Z",
        "updated_at": "2023-12-05T06:09:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi,\r\nI am  using langchain to create collections in my local directory after that I am persisting it using below code \r\n\r\nfrom langchain.vectorstores import Chroma                                   \r\nfrom langchain.embeddings import OpenAIEmbeddings                               \r\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter , TokenTextSplitter            \r\nfrom langchain.llms import OpenAI                                             \r\nfrom langchain.chat_models import ChatOpenAI                             \r\nfrom langchain.chains import VectorDBQA, RetrievalQA                                        \r\nfrom langchain.document_loaders import TextLoader, UnstructuredFileLoader, DirectoryLoader\r\n\r\nloader = DirectoryLoader(\"D:/files/data\")  \r\ndocs = loader.load()                            \r\ntext_splitter = TokenTextSplitter(chunk_size=1000, chunk_overlap=200)\r\ntexts = text_splitter.split_documents(docs)\r\nembeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)                                 \r\nvectordb = Chroma.from_documents(texts, embedding=embeddings, persist_directory = persist_directory, collection_name=my_collection)    \r\nvectordb.persist()                           \r\nvectordb = None\r\n\r\nI am using above code for creating different different collection in the same persist_directory by just changing the collection name and the data files path, now lets say I have 5 collection in my persist directory\r\nmy_collection1\r\nmy_collection2\r\nmy_collection3\r\nmy_collection4\r\nmy_collection5\r\n\r\nNow If I want to perform querying to my data then I have to call my persist_directory with collection_name\r\nvectordb = Chroma(persist_directory=persist_directory, embedding_function=embeddings, collection_name=my_collection3)\r\nqa = RetrievalQA.from_chain_type(llm=ChatOpenAI(openai_api_key=openai_api_key), chain_type=\"stuff\", retriever=vectordb.as_retriever(search_type=\"mmr\"), return_source_documents=True)\r\nqa(\"query\")\r\n\r\nso the issue is if I am using above code then I can perform only querying for my_collection3 but I want to perform querying to all my five collections, so can anyone please suggest, how can I do this or if it is not possible, I will be thankful to you.\r\n\r\nI had tried without collection name for ex-\r\nvectordb = Chroma(persist_directory=persist_directory, embedding_function=embedding)\r\nqa = RetrievalQA.from_chain_type(llm=ChatOpenAI(openai_api_key=openai_api_key), chain_type=\"stuff\", retriever=vectordb.as_retriever(search_type=\"mmr\"), return_source_documents=True)\r\nqa(\"query\")\r\n\r\nbut in this case I am getting \r\nNoIndexException: Index not found, please create an instance before querying",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5555/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5555/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5553",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5553/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5553/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5553/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5553",
        "id": 1736029435,
        "node_id": "I_kwDOIPDwls5nebT7",
        "number": 5553,
        "title": "ConversationalRetrievalChain is changing context of input",
        "user": {
            "login": "hussainwali74",
            "id": 24194686,
            "node_id": "MDQ6VXNlcjI0MTk0Njg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/24194686?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hussainwali74",
            "html_url": "https://github.com/hussainwali74",
            "followers_url": "https://api.github.com/users/hussainwali74/followers",
            "following_url": "https://api.github.com/users/hussainwali74/following{/other_user}",
            "gists_url": "https://api.github.com/users/hussainwali74/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hussainwali74/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hussainwali74/subscriptions",
            "organizations_url": "https://api.github.com/users/hussainwali74/orgs",
            "repos_url": "https://api.github.com/users/hussainwali74/repos",
            "events_url": "https://api.github.com/users/hussainwali74/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hussainwali74/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T10:49:37Z",
        "updated_at": "2023-09-10T16:09:04Z",
        "closed_at": "2023-09-10T16:09:03Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\n The first time I query the LLM evertything is okay, the second time and in all the calls after that user query is totally changed.\r\nFor example my input was \"How are you today?\" and the chain while trying to make this a standalone question gets confused and totally changes the question,\r\nfile:///home/propsure/Pictures/Screenshots/Screenshot%20from%202023-06-01%2015-47-08.png\r\nThis is how I am using the chain,\r\n`      QA_PROMPT = PromptTemplate(template=prompt_template, input_variables=[\"context\",\"question\", \"chat_history\" ])\r\n        chain = ConversationalRetrievalChain.from_llm(\r\n                    llm=llm, retriever=retriever, return_source_documents=False, \r\n                    verbose=True,\r\n                    max_tokens_limit=2048, combine_docs_chain_kwargs={'prompt': QA_PROMPT}\r\n`\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nRun any llm locally, I am  using WizardVicuna (faced the same issue with OpenAI api), and try a conversationalretreival QA with chat_history. Also if I am doing something incorrectly please let me know much appreciated. \n\n### Expected behavior\n\nthere should be an option if we don't want it to condense the question, prompt. Because in context based QA we want a similar behaviour.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5553/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5553/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5552",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5552/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5552/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5552/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5552",
        "id": 1735984739,
        "node_id": "I_kwDOIPDwls5neQZj",
        "number": 5552,
        "title": "Self-querying with Chroma bug - Got invalid return object. Expected markdown code snippet with JSON object, but got ...",
        "user": {
            "login": "Oliver-Douz",
            "id": 120089844,
            "node_id": "U_kgDOByhs9A",
            "avatar_url": "https://avatars.githubusercontent.com/u/120089844?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Oliver-Douz",
            "html_url": "https://github.com/Oliver-Douz",
            "followers_url": "https://api.github.com/users/Oliver-Douz/followers",
            "following_url": "https://api.github.com/users/Oliver-Douz/following{/other_user}",
            "gists_url": "https://api.github.com/users/Oliver-Douz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Oliver-Douz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Oliver-Douz/subscriptions",
            "organizations_url": "https://api.github.com/users/Oliver-Douz/orgs",
            "repos_url": "https://api.github.com/users/Oliver-Douz/repos",
            "events_url": "https://api.github.com/users/Oliver-Douz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Oliver-Douz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-06-01T10:25:32Z",
        "updated_at": "2023-12-14T16:08:08Z",
        "closed_at": "2023-12-14T16:08:07Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\r\n\u2502 /opt/conda/lib/python3.10/site-packages/langchain/chains/query_constructor/base.py:36 in parse   \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502    33 \u2502   def parse(self, text: str) -> StructuredQuery:                                         \u2502\r\n\u2502    34 \u2502   \u2502   try:                                                                               \u2502\r\n\u2502    35 \u2502   \u2502   \u2502   expected_keys = [\"query\", \"filter\"]                                            \u2502\r\n\u2502 \u2771  36 \u2502   \u2502   \u2502   parsed = parse_json_markdown(text, expected_keys)                              \u2502\r\n\u2502    37 \u2502   \u2502   \u2502   if len(parsed[\"query\"]) == 0:                                                  \u2502\r\n\u2502    38 \u2502   \u2502   \u2502   \u2502   parsed[\"query\"] = \" \"                                                      \u2502\r\n\u2502    39 \u2502   \u2502   \u2502   if parsed[\"filter\"] == \"NO_FILTER\" or not parsed[\"filter\"]:                    \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 /opt/conda/lib/python3.10/site-packages/langchain/output_parsers/structured.py:27 in             \u2502\r\n\u2502 parse_json_markdown                                                                              \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502   24                                                                                             \u2502\r\n\u2502   25 def parse_json_markdown(text: str, expected_keys: List[str]) -> Any:                        \u2502\r\n\u2502   26 \u2502   if \"```json\" not in text:                                                               \u2502\r\n\u2502 \u2771 27 \u2502   \u2502   raise OutputParserException(                                                        \u2502\r\n\u2502   28 \u2502   \u2502   \u2502   f\"Got invalid return object. Expected markdown code snippet with JSON \"         \u2502\r\n\u2502   29 \u2502   \u2502   \u2502   f\"object, but got:\\n{text}\"                                                     \u2502\r\n\u2502   30 \u2502   \u2502   )                                                                                   \u2502\r\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\nOutputParserException: Got invalid return object. Expected markdown code snippet with JSON object, but got:\r\n```vbnet\r\n{\r\n    \"query\": \"chatbot refinement\",\r\n    \"filter\": \"NO_FILTER\"\r\n}\r\n```\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\r\n\u2502 /tmp/ipykernel_28206/2038672913.py:1 in <module>                                                 \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 [Errno 2] No such file or directory: '/tmp/ipykernel_28206/2038672913.py'                        \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 /opt/conda/lib/python3.10/site-packages/langchain/retrievers/self_query/base.py:73 in            \u2502\r\n\u2502 get_relevant_documents                                                                           \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502    70 \u2502   \u2502   \"\"\"                                                                                \u2502\r\n\u2502    71 \u2502   \u2502   inputs = self.llm_chain.prep_inputs({\"query\": query})                              \u2502\r\n\u2502    72 \u2502   \u2502   structured_query = cast(                                                           \u2502\r\n\u2502 \u2771  73 \u2502   \u2502   \u2502   StructuredQuery, self.llm_chain.predict_and_parse(callbacks=None, **inputs)    \u2502\r\n\u2502    74 \u2502   \u2502   )                                                                                  \u2502\r\n\u2502    75 \u2502   \u2502   if self.verbose:                                                                   \u2502\r\n\u2502    76 \u2502   \u2502   \u2502   print(structured_query)                                                        \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 /opt/conda/lib/python3.10/site-packages/langchain/chains/llm.py:238 in predict_and_parse         \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502   235 \u2502   \u2502   \"\"\"Call predict and then parse the results.\"\"\"                                     \u2502\r\n\u2502   236 \u2502   \u2502   result = self.predict(callbacks=callbacks, **kwargs)                               \u2502\r\n\u2502   237 \u2502   \u2502   if self.prompt.output_parser is not None:                                          \u2502\r\n\u2502 \u2771 238 \u2502   \u2502   \u2502   return self.prompt.output_parser.parse(result)                                 \u2502\r\n\u2502   239 \u2502   \u2502   else:                                                                              \u2502\r\n\u2502   240 \u2502   \u2502   \u2502   return result                                                                  \u2502\r\n\u2502   241                                                                                            \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 /opt/conda/lib/python3.10/site-packages/langchain/chains/query_constructor/base.py:49 in parse   \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502    46 \u2502   \u2502   \u2502   \u2502   limit=parsed.get(\"limit\"),                                                 \u2502\r\n\u2502    47 \u2502   \u2502   \u2502   )                                                                              \u2502\r\n\u2502    48 \u2502   \u2502   except Exception as e:                                                             \u2502\r\n\u2502 \u2771  49 \u2502   \u2502   \u2502   raise OutputParserException(                                                   \u2502\r\n\u2502    50 \u2502   \u2502   \u2502   \u2502   f\"Parsing text\\n{text}\\n raised following error:\\n{e}\"                     \u2502\r\n\u2502    51 \u2502   \u2502   \u2502   )                                                                              \u2502\r\n\u2502    52                                                                                            \u2502\r\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\nOutputParserException: Parsing text\r\n```vbnet\r\n{\r\n    \"query\": \"chatbot refinement\",\r\n    \"filter\": \"NO_FILTER\"\r\n}\r\n```\r\n raised following error:\r\nGot invalid return object. Expected markdown code snippet with JSON object, but got:\r\n```vbnet\r\n{\r\n    \"query\": \"chatbot refinement\",\r\n    \"filter\": \"NO_FILTER\"\r\n}\r\n```\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n```\r\nclass Dolly(LLM):\r\n    \r\n    history_data: Optional[List] = []\r\n    chatbot : Optional[hugchat.ChatBot] = None\r\n    conversation : Optional[str] = \"\"\r\n    #### WARNING : for each api call this library will create a new chat on chat.openai.com\r\n    \r\n    @property\r\n    def _llm_type(self) -> str:\r\n        return \"custom\"\r\n\r\n    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:\r\n        if stop is not None:\r\n            pass\r\n            #raise ValueError(\"stop kwargs are not permitted.\")\r\n        #token is a must check\r\n        if self.chatbot is None:\r\n            if self.conversation == \"\":\r\n                self.chatbot = pipeline(model=\"databricks/dolly-v2-12b\", torch_dtype=torch.bfloat16, trust_remote_code=True, device_map=\"auto\")\r\n            else:\r\n                raise ValueError(\"Something went wrong\")\r\n\r\n        \r\n        sleep(2)\r\n        data = self.chatbot(prompt)[0][\"generated_text\"]\r\n        \r\n        #add to history\r\n        self.history_data.append({\"prompt\":prompt,\"response\":data})    \r\n        \r\n        return data\r\n\r\n    @property\r\n    def _identifying_params(self) -> Mapping[str, Any]:\r\n        \"\"\"Get the identifying parameters.\"\"\"\r\n        return {\"model\": \"DollyCHAT\"}\r\n\r\nllm = Dolly()\r\n```\r\n\r\nThen I follow the instructions in https://python.langchain.com/en/latest/modules/indexes/retrievers/examples/chroma_self_query.html\r\n\r\nand I got the above error, sometimes it works, but sometimes it doesn't.\n\n### Expected behavior\n\nShould not return error and act like before (return the related documents)",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5552/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5552/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5551",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5551/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5551/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5551/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5551",
        "id": 1735921910,
        "node_id": "I_kwDOIPDwls5neBD2",
        "number": 5551,
        "title": "Incorrect PromptTemplate memorizing",
        "user": {
            "login": "skozlovf",
            "id": 730013,
            "node_id": "MDQ6VXNlcjczMDAxMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/730013?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/skozlovf",
            "html_url": "https://github.com/skozlovf",
            "followers_url": "https://api.github.com/users/skozlovf/followers",
            "following_url": "https://api.github.com/users/skozlovf/following{/other_user}",
            "gists_url": "https://api.github.com/users/skozlovf/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/skozlovf/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/skozlovf/subscriptions",
            "organizations_url": "https://api.github.com/users/skozlovf/orgs",
            "repos_url": "https://api.github.com/users/skozlovf/repos",
            "events_url": "https://api.github.com/users/skozlovf/events{/privacy}",
            "received_events_url": "https://api.github.com/users/skozlovf/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T09:54:09Z",
        "updated_at": "2023-09-10T16:09:09Z",
        "closed_at": "2023-09-10T16:09:08Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### System Info\n\nLangChain 0.0.187, Python 3.8.16, Linux Mint.\n\n### Who can help?\n\n@hwchase17 @ago\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [X] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [X] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nThis script demonstrates the issue:\r\n\r\n\r\n```python\r\nfrom langchain.chains import ConversationChain\r\nfrom langchain.llms import FakeListLLM\r\nfrom langchain.memory import ConversationBufferMemory\r\nfrom langchain.prompts import (\r\n    ChatPromptTemplate,\r\n    HumanMessagePromptTemplate,\r\n    MessagesPlaceholder,\r\n    SystemMessagePromptTemplate,\r\n)\r\n\r\n\r\nsys_prompt = SystemMessagePromptTemplate.from_template(\"You are helpful assistant.\")\r\nhuman_prompt = HumanMessagePromptTemplate.from_template(\"Hey, {input}\")\r\nprompt = ChatPromptTemplate.from_messages(\r\n    [\r\n        sys_prompt,\r\n        MessagesPlaceholder(variable_name=\"history\"),\r\n        human_prompt,\r\n    ]\r\n)\r\n\r\nchain = ConversationChain(\r\n    prompt=prompt,\r\n    llm=FakeListLLM(responses=[f\"+{x}\" for x in range(10)]),\r\n    memory=ConversationBufferMemory(return_messages=True, input_key=\"input\"),\r\n    verbose=True,\r\n)\r\n\r\nchain({\"input\": \"hi there!\"})\r\nchain({\"input\": \"what's the weather?\"})\r\n```\r\n\r\nOutput:\r\n```\r\n> Entering new ConversationChain chain...\r\nPrompt after formatting:\r\nSystem: You are helpful assistant.\r\nHuman: Hey, hi there!\r\n\r\n> Finished chain.\r\n\r\n\r\n> Entering new ConversationChain chain...\r\nPrompt after formatting:\r\nSystem: You are helpful assistant.\r\nHuman: hi there!    <----- ISSUE\r\nAI: +0\r\nHuman: Hey, what's the weather?\r\n\r\n> Finished chain.\r\n```\r\n\r\n`ISSUE`: `Human` history message in the second request is incorrect. It provides raw input.\n\n### Expected behavior\n\nExpected output:\r\n```\r\n> Entering new ConversationChain chain...\r\nPrompt after formatting:\r\nSystem: You are helpful assistant.\r\nHuman: Hey, hi there!\r\n\r\n> Finished chain.\r\n\r\n\r\n> Entering new ConversationChain chain...\r\nPrompt after formatting:\r\nSystem: You are helpful assistant.\r\nHuman: Hey, hi there!    <----- EXPECTED\r\nAI: +0\r\nHuman: Hey, what's the weather?\r\n\r\n> Finished chain.\r\n```\r\n\r\nHistory message should contain rendered template string instead of raw input.\r\n\r\nAs a workaround I add extra \"rendering\" step before the `ConversationChain`:\r\n```python\r\nfrom langchain.chains import ConversationChain, SequentialChain, TransformChain\r\nfrom langchain.llms import FakeListLLM\r\nfrom langchain.memory import ConversationBufferMemory\r\nfrom langchain.prompts import (\r\n    ChatPromptTemplate,\r\n    HumanMessagePromptTemplate,\r\n    MessagesPlaceholder,\r\n    PromptTemplate,\r\n    SystemMessagePromptTemplate,\r\n)\r\n\r\n# Extra step: pre-render user template.\r\nin_prompt = PromptTemplate.from_template(\"Hey, {input}\")\r\nrender_chain = TransformChain(\r\n    input_variables=in_prompt.input_variables,\r\n    output_variables=[\"text\"],\r\n    transform=lambda x: {\"text\": in_prompt.format(**x)},\r\n)\r\n\r\nprompt = ChatPromptTemplate.from_messages(\r\n    [\r\n        SystemMessagePromptTemplate.from_template(\"You are helpful assistant.\"),\r\n        MessagesPlaceholder(variable_name=\"history\"),\r\n        HumanMessagePromptTemplate.from_template(\"{text}\"),\r\n    ]\r\n)\r\nchat_chain = ConversationChain(\r\n    prompt=prompt,\r\n    llm=FakeListLLM(responses=(f\"+{x}\" for x in range(10))),\r\n    memory=ConversationBufferMemory(return_messages=True, input_key=\"text\"),\r\n    input_key=\"text\",\r\n    verbose=True,\r\n)\r\n\r\nchain = SequentialChain(chains=[render_chain, chat_chain], input_variables=[\"input\"])\r\n\r\nchain({\"input\": \"hi there!\"})\r\nchain({\"input\": \"what's the weather?\"})\r\n```\r\n\r\nOutput:\r\n```\r\n> Entering new ConversationChain chain...\r\nPrompt after formatting:\r\nSystem: You are helpful assistant.\r\nHuman: Hey, hi there!\r\n\r\n> Finished chain.\r\n\r\n\r\n> Entering new ConversationChain chain...\r\nPrompt after formatting:\r\nSystem: You are helpful assistant.\r\nHuman: Hey, hi there!     <--- FIXED\r\nAI: +0\r\nHuman: Hey, what's the weather?\r\n\r\n> Finished chain.\r\n```\r\n\r\nI have checked the code and looks like this behavior is by design: Both `Chain.prep_inputs()` and `Chain.prep_outputs()` pass only inputs/outputs to the `memory` so there is no way to store formatted/rendered template.\r\n\r\nNot sure if this is a design issue or incorrect `langchain` API usage. Docs say nothing about `PromptTemplate` restrictions, so I assumed it should work out of the box.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5551/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5551/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5550",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5550/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5550/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5550/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5550",
        "id": 1735865772,
        "node_id": "PR_kwDOIPDwls5R4KX1",
        "number": 5550,
        "title": "[Vectorstore] Added async gRPC methods to Qdrant vectorstore",
        "user": {
            "login": "c0sogi",
            "id": 121936784,
            "node_id": "U_kgDOB0SbkA",
            "avatar_url": "https://avatars.githubusercontent.com/u/121936784?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/c0sogi",
            "html_url": "https://github.com/c0sogi",
            "followers_url": "https://api.github.com/users/c0sogi/followers",
            "following_url": "https://api.github.com/users/c0sogi/following{/other_user}",
            "gists_url": "https://api.github.com/users/c0sogi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/c0sogi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/c0sogi/subscriptions",
            "organizations_url": "https://api.github.com/users/c0sogi/orgs",
            "repos_url": "https://api.github.com/users/c0sogi/repos",
            "events_url": "https://api.github.com/users/c0sogi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/c0sogi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5541432778,
                "node_id": "LA_kwDOIPDwls8AAAABSkuNyg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20vector%20store",
                "name": "area: vector store",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to vector store module"
            },
            {
                "id": 5680700863,
                "node_id": "LA_kwDOIPDwls8AAAABUpidvw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:enhancement",
                "name": "auto:enhancement",
                "color": "C2E0C6",
                "default": false,
                "description": "A large net-new component, integration, or chain. Use sparingly. The largest features"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": {
            "login": "kacperlukawski",
            "id": 2649301,
            "node_id": "MDQ6VXNlcjI2NDkzMDE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2649301?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kacperlukawski",
            "html_url": "https://github.com/kacperlukawski",
            "followers_url": "https://api.github.com/users/kacperlukawski/followers",
            "following_url": "https://api.github.com/users/kacperlukawski/following{/other_user}",
            "gists_url": "https://api.github.com/users/kacperlukawski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kacperlukawski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kacperlukawski/subscriptions",
            "organizations_url": "https://api.github.com/users/kacperlukawski/orgs",
            "repos_url": "https://api.github.com/users/kacperlukawski/repos",
            "events_url": "https://api.github.com/users/kacperlukawski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kacperlukawski/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "kacperlukawski",
                "id": 2649301,
                "node_id": "MDQ6VXNlcjI2NDkzMDE=",
                "avatar_url": "https://avatars.githubusercontent.com/u/2649301?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/kacperlukawski",
                "html_url": "https://github.com/kacperlukawski",
                "followers_url": "https://api.github.com/users/kacperlukawski/followers",
                "following_url": "https://api.github.com/users/kacperlukawski/following{/other_user}",
                "gists_url": "https://api.github.com/users/kacperlukawski/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/kacperlukawski/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/kacperlukawski/subscriptions",
                "organizations_url": "https://api.github.com/users/kacperlukawski/orgs",
                "repos_url": "https://api.github.com/users/kacperlukawski/repos",
                "events_url": "https://api.github.com/users/kacperlukawski/events{/privacy}",
                "received_events_url": "https://api.github.com/users/kacperlukawski/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2023-06-01T09:23:37Z",
        "updated_at": "2023-07-17T11:48:55Z",
        "closed_at": "2023-07-17T11:48:54Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5550",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5550",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5550.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5550.patch",
            "merged_at": null
        },
        "body": "# Async gRPC methods to Qdrant vectorstore\r\n\r\nChanges:\r\n\r\n- Async methods to add:\r\naadd_texts, asimilarity_search, asimilarity_search_with_score, amax_marginal_relevance_search_with_score\r\n\r\n- Helper methods to add:\r\n_document_from_scored_point_grpc, _document_from_scored_point_grpc, _build_condition_grpc, _qdrant_filter_from_dict_grpc\r\n\r\nIn addition to rest, Qdrant supports the gRPC protocol, which allows calling asynchronous methods on the client. \r\ngRPC is an open source remote procedure call (RPC) framework developed by Google. gRPC uses a data serialization and RPC protocol called Protocol Buffers to enable efficient communication between clients and servers.\r\n\r\nBy adding Qdrant's native asynchronous methods, we can solve the event loop blocking issue that occurs when using synchronous methods.\r\n\r\nSince these asynchronous methods only work on remote clients, not local, I've made it so that attempting to use them in a local environment (memory, disk) will result in a NotImplementedError.\r\n\r\nI was going to create a unit test functions, but I didn't add it for now because it requires a real Remote server to test the method, but it's working fine for now in my project. ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5550/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5550/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5549",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5549/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5549/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5549/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5549",
        "id": 1735822834,
        "node_id": "PR_kwDOIPDwls5R4BCt",
        "number": 5549,
        "title": "Fixed incorrect prompt formatting for chat based ReAct agent",
        "user": {
            "login": "oguzgultepe",
            "id": 15001584,
            "node_id": "MDQ6VXNlcjE1MDAxNTg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/15001584?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oguzgultepe",
            "html_url": "https://github.com/oguzgultepe",
            "followers_url": "https://api.github.com/users/oguzgultepe/followers",
            "following_url": "https://api.github.com/users/oguzgultepe/following{/other_user}",
            "gists_url": "https://api.github.com/users/oguzgultepe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oguzgultepe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oguzgultepe/subscriptions",
            "organizations_url": "https://api.github.com/users/oguzgultepe/orgs",
            "repos_url": "https://api.github.com/users/oguzgultepe/repos",
            "events_url": "https://api.github.com/users/oguzgultepe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oguzgultepe/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4899412369,
                "node_id": "LA_kwDOIPDwls8AAAABJAcZkQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20agent",
                "name": "area: agent",
                "color": "BFD4F2",
                "default": false,
                "description": "Related to agents module"
            },
            {
                "id": 5680700839,
                "node_id": "LA_kwDOIPDwls8AAAABUpidpw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:bug",
                "name": "auto:bug",
                "color": "E99695",
                "default": false,
                "description": "Related to a bug, vulnerability, unexpected error with an existing feature"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": {
            "login": "efriis",
            "id": 9557659,
            "node_id": "MDQ6VXNlcjk1NTc2NTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9557659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/efriis",
            "html_url": "https://github.com/efriis",
            "followers_url": "https://api.github.com/users/efriis/followers",
            "following_url": "https://api.github.com/users/efriis/following{/other_user}",
            "gists_url": "https://api.github.com/users/efriis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/efriis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/efriis/subscriptions",
            "organizations_url": "https://api.github.com/users/efriis/orgs",
            "repos_url": "https://api.github.com/users/efriis/repos",
            "events_url": "https://api.github.com/users/efriis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/efriis/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "efriis",
                "id": 9557659,
                "node_id": "MDQ6VXNlcjk1NTc2NTk=",
                "avatar_url": "https://avatars.githubusercontent.com/u/9557659?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/efriis",
                "html_url": "https://github.com/efriis",
                "followers_url": "https://api.github.com/users/efriis/followers",
                "following_url": "https://api.github.com/users/efriis/following{/other_user}",
                "gists_url": "https://api.github.com/users/efriis/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/efriis/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/efriis/subscriptions",
                "organizations_url": "https://api.github.com/users/efriis/orgs",
                "repos_url": "https://api.github.com/users/efriis/repos",
                "events_url": "https://api.github.com/users/efriis/events{/privacy}",
                "received_events_url": "https://api.github.com/users/efriis/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-06-01T09:00:33Z",
        "updated_at": "2023-11-30T22:17:46Z",
        "closed_at": "2023-11-30T22:17:46Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5549",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5549",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5549.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5549.patch",
            "merged_at": null
        },
        "body": "# Fixed incorrect prompt formatting for chat based ReAct agent\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n\r\nFinally, we'd love to show appreciation for your contribution - if you'd like us to shout you out on Twitter, please also include your handle!\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes #5390\r\nCreated two new classes (ReActStringPromptValue and ReActPromptTemplate) in order to handle correct prompt formatting for chat based models.\r\n\r\nMy twitter handle: @gultepeoguz\r\n\r\n## Before submitting\r\nFormat/lint/tests already run.\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5549/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5549/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5548",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5548/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5548/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5548/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5548",
        "id": 1735790487,
        "node_id": "I_kwDOIPDwls5ndg-X",
        "number": 5548,
        "title": "Guanaco 65B model support",
        "user": {
            "login": "Bec-k",
            "id": 65600131,
            "node_id": "MDQ6VXNlcjY1NjAwMTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/65600131?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Bec-k",
            "html_url": "https://github.com/Bec-k",
            "followers_url": "https://api.github.com/users/Bec-k/followers",
            "following_url": "https://api.github.com/users/Bec-k/following{/other_user}",
            "gists_url": "https://api.github.com/users/Bec-k/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Bec-k/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Bec-k/subscriptions",
            "organizations_url": "https://api.github.com/users/Bec-k/orgs",
            "repos_url": "https://api.github.com/users/Bec-k/repos",
            "events_url": "https://api.github.com/users/Bec-k/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Bec-k/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T08:42:42Z",
        "updated_at": "2023-09-14T16:07:08Z",
        "closed_at": "2023-09-14T16:07:07Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nPlease add support for the model Guanaco 65B, which is trained via qLoRA method. To be able to swap OpenAI model to Guanaco and perform same operations over it.\n\n### Motivation\n\nThe best performance and free model out there up to date 01.06.2023.\n\n### Your contribution\n\n-",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5548/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5548/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5547",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5547/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5547/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5547/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5547",
        "id": 1735785488,
        "node_id": "PR_kwDOIPDwls5R34_A",
        "number": 5547,
        "title": "Improve Error Messaging for APOC Procedure Failure in Neo4jGraph",
        "user": {
            "login": "guangchen811",
            "id": 103159823,
            "node_id": "U_kgDOBiYYDw",
            "avatar_url": "https://avatars.githubusercontent.com/u/103159823?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/guangchen811",
            "html_url": "https://github.com/guangchen811",
            "followers_url": "https://api.github.com/users/guangchen811/followers",
            "following_url": "https://api.github.com/users/guangchen811/following{/other_user}",
            "gists_url": "https://api.github.com/users/guangchen811/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/guangchen811/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/guangchen811/subscriptions",
            "organizations_url": "https://api.github.com/users/guangchen811/orgs",
            "repos_url": "https://api.github.com/users/guangchen811/repos",
            "events_url": "https://api.github.com/users/guangchen811/events{/privacy}",
            "received_events_url": "https://api.github.com/users/guangchen811/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-01T08:39:49Z",
        "updated_at": "2023-06-07T15:38:20Z",
        "closed_at": "2023-06-03T23:56:39Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5547",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5547",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5547.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5547.patch",
            "merged_at": "2023-06-03T23:56:39Z"
        },
        "body": "## Improve Error Messaging for APOC Procedure Failure in Neo4jGraph\r\n\r\nThis commit revises the error message provided when the 'apoc.meta.data()' procedure fails. Previously, the message simply instructed the user to install the APOC plugin in Neo4j. The new error message is more specific.\r\n\r\nAlso removed an unnecessary newline in the Cypher statement variable: `node_properties_query`.\r\n\r\nFixes #5545 \r\n\r\n## Who can review?\r\n  - @vowelparrot\r\n  - @dev2049",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5547/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5547/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5545",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5545/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5545/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5545/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5545",
        "id": 1735730197,
        "node_id": "I_kwDOIPDwls5ndSQV",
        "number": 5545,
        "title": "Issue: Improve Error Messaging When APOC Procedures Fail in Neo4jGraph",
        "user": {
            "login": "guangchen811",
            "id": 103159823,
            "node_id": "U_kgDOBiYYDw",
            "avatar_url": "https://avatars.githubusercontent.com/u/103159823?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/guangchen811",
            "html_url": "https://github.com/guangchen811",
            "followers_url": "https://api.github.com/users/guangchen811/followers",
            "following_url": "https://api.github.com/users/guangchen811/following{/other_user}",
            "gists_url": "https://api.github.com/users/guangchen811/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/guangchen811/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/guangchen811/subscriptions",
            "organizations_url": "https://api.github.com/users/guangchen811/orgs",
            "repos_url": "https://api.github.com/users/guangchen811/repos",
            "events_url": "https://api.github.com/users/guangchen811/events{/privacy}",
            "received_events_url": "https://api.github.com/users/guangchen811/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T08:04:16Z",
        "updated_at": "2023-06-03T23:56:40Z",
        "closed_at": "2023-06-03T23:56:40Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nIn the current implementation, when an APOC procedure fails, a generic error message is raised stating: \"Could not use APOC procedures. Please install the APOC plugin in Neo4j.\" This message can lead to user confusion as it suggests the APOC plugin is not installed when in reality it may be installed but not correctly configured or permitted to run certain procedures.\r\n\r\nThis issue is encountered specifically when the refresh_schema function calls apoc.meta.data(). The function apoc.meta.data() isn't allowed to run under default configurations in the Neo4j database, thus leading to the mentioned error message.\r\n\r\nHere is the code snippet where the issue arises:\r\n```\r\n# Set schema\r\ntry:\r\n    self.refresh_schema()\r\n    except neo4j.exceptions.ClientError\r\n    raise ValueError(\r\n        \"Could not use APOC procedures. \"\r\n        \"Please install the APOC plugin in Neo4j.\"\r\n    )\r\n```\n\n### Suggestion:\n\nTo improve the user experience, I propose that the error message should be made more specific. Instead of merely advising users to install the APOC plugin, it would be beneficial to indicate that certain procedures may not be configured or whitelisted to run by default and to guide the users to check their configurations.\r\n\r\nI believe this will save users time when troubleshooting and will reduce the potential for confusion.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5545/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5545/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5544",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5544/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5544/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5544/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5544",
        "id": 1735643747,
        "node_id": "I_kwDOIPDwls5nc9Jj",
        "number": 5544,
        "title": "The same code, sometimes throwing an exception(ValueError: Could not parse output), sometimes running correctly",
        "user": {
            "login": "hotpeppeper",
            "id": 15924284,
            "node_id": "MDQ6VXNlcjE1OTI0Mjg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/15924284?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hotpeppeper",
            "html_url": "https://github.com/hotpeppeper",
            "followers_url": "https://api.github.com/users/hotpeppeper/followers",
            "following_url": "https://api.github.com/users/hotpeppeper/following{/other_user}",
            "gists_url": "https://api.github.com/users/hotpeppeper/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hotpeppeper/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hotpeppeper/subscriptions",
            "organizations_url": "https://api.github.com/users/hotpeppeper/orgs",
            "repos_url": "https://api.github.com/users/hotpeppeper/repos",
            "events_url": "https://api.github.com/users/hotpeppeper/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hotpeppeper/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T07:13:59Z",
        "updated_at": "2023-11-27T16:09:56Z",
        "closed_at": "2023-11-27T16:09:55Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\n```\r\nloaders = [TextLoader(\"13.txt\"), TextLoader(\"14.txt\"), TextLoader(\"15.txt\"),TextLoader(\"16.txt\"), TextLoader(\"17.txt\"), TextLoader(\"18.txt\")]\r\ndocuments = []\r\nfor loader in loaders:\r\n    documents.extend(loader.load())\r\n\r\ntext_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=150)\r\ndocuments = text_splitter.split_documents(documents)\r\nembeddings = OpenAIEmbeddings()\r\nvectorstore = Chroma.from_documents(documents, embeddings)\r\n\r\nqa = RetrievalQAWithSourcesChain.from_chain_type(llm=llm,\r\n                         chain_type=\"map_rerank\",\r\n                         retriever=vectorstore.as_retriever(),\r\n                         return_source_documents=True)\r\n\r\nquery = \"\u8336\u827a\u5e08\u62a5\u540d\u6761\u4ef6\u662f\u4ec0\u4e48\uff0c\u4f7f\u7528\u4e2d\u6587\u56de\u7b54\"\r\nchat_history = []\r\nresult = qa({'question': query})\r\n```\r\n\r\nsometimes this code raise ValueError: Could not parse output\uff0cbut when I rerun result = qa({'question': query}), this may return the anwser. how can I fix this?\n\n### Suggestion:\n\nI wonder why this happens, and how to fix it. please help me!!",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5544/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5544/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5543",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5543/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5543/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5543/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5543",
        "id": 1735593915,
        "node_id": "PR_kwDOIPDwls5R3Pdy",
        "number": 5543,
        "title": "Incorrect argument count handling",
        "user": {
            "login": "swappysh",
            "id": 7112252,
            "node_id": "MDQ6VXNlcjcxMTIyNTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7112252?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/swappysh",
            "html_url": "https://github.com/swappysh",
            "followers_url": "https://api.github.com/users/swappysh/followers",
            "following_url": "https://api.github.com/users/swappysh/following{/other_user}",
            "gists_url": "https://api.github.com/users/swappysh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/swappysh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/swappysh/subscriptions",
            "organizations_url": "https://api.github.com/users/swappysh/orgs",
            "repos_url": "https://api.github.com/users/swappysh/repos",
            "events_url": "https://api.github.com/users/swappysh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/swappysh/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T06:41:39Z",
        "updated_at": "2023-06-20T22:29:24Z",
        "closed_at": "2023-06-20T05:06:20Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5543",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5543",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5543.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5543.patch",
            "merged_at": "2023-06-20T05:06:20Z"
        },
        "body": "Throwing ToolException when incorrect arguments are passed to tools so that that agent can course correct them.\r\n\r\n# Incorrect argument count handling\r\n\r\nI was facing an error where the agent passed incorrect arguments to tools. As per the discussions going around, I started throwing ToolException to allow the model to course correct.\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5543/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5543/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5542",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5542/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5542/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5542/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5542",
        "id": 1735589481,
        "node_id": "I_kwDOIPDwls5ncv5p",
        "number": 5542,
        "title": "Issue: previous message condensing time on `ConversationalRetrievalChain`",
        "user": {
            "login": "Rijoanul-Shanto",
            "id": 17069712,
            "node_id": "MDQ6VXNlcjE3MDY5NzEy",
            "avatar_url": "https://avatars.githubusercontent.com/u/17069712?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Rijoanul-Shanto",
            "html_url": "https://github.com/Rijoanul-Shanto",
            "followers_url": "https://api.github.com/users/Rijoanul-Shanto/followers",
            "following_url": "https://api.github.com/users/Rijoanul-Shanto/following{/other_user}",
            "gists_url": "https://api.github.com/users/Rijoanul-Shanto/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Rijoanul-Shanto/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Rijoanul-Shanto/subscriptions",
            "organizations_url": "https://api.github.com/users/Rijoanul-Shanto/orgs",
            "repos_url": "https://api.github.com/users/Rijoanul-Shanto/repos",
            "events_url": "https://api.github.com/users/Rijoanul-Shanto/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Rijoanul-Shanto/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T06:37:44Z",
        "updated_at": "2023-10-05T16:10:16Z",
        "closed_at": "2023-10-05T16:10:16Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nI got a scenario where I'm using the `ConversationalRetrievalChain` with chat history. The problem is, it was streaming the condensed output of the question. Not the actual answer. So I separated the models, one for condensing the question and one for answering with streaming. But as I suspected, the condensing chain is eating up a time to generate the condensed output of the question, and the actual streaming of the answer is waiting for the condensed question generator. \r\n\r\nsome of my implementations:\r\n\r\n```python\r\ncallback = AsyncIteratorCallbackHandler()\r\n\r\nq_generator_llm = ChatOpenAI(\r\n    openai_api_key=settings.openai_api_key,\r\n)\r\n\r\nstreaming_llm = ChatOpenAI(\r\n    openai_api_key=settings.openai_api_key,\r\n    streaming=True,\r\n    callbacks=[callback],\r\n)\r\n\r\nquestion_generator = LLMChain(llm=q_generator_llm, prompt=CONDENSE_QUESTION_PROMPT)\r\ndoc_chain = load_qa_chain(llm=streaming_llm, chain_type=\"stuff\", prompt=prompt)\r\n\r\nqa_chain = ConversationalRetrievalChain(\r\n    retriever=collection_store.as_retriever(search_kwargs={\"k\": 3}),\r\n    combine_docs_chain=doc_chain,\r\n    question_generator=question_generator,\r\n    return_source_documents=True,\r\n)\r\n\r\nhistory = []\r\n\r\ntask = asyncio.create_task(\r\n    qa_chain.acall({\r\n        \"question\": q,\r\n        \"chat_history\": history\r\n    }),\r\n)\r\n```\r\n___\r\n\r\n### **Any workaround on how I avoid condensing the question to save time? Or any efficient way to resolve the issue?**\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5542/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5542/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5541",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5541/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5541/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5541/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5541",
        "id": 1735553303,
        "node_id": "PR_kwDOIPDwls5R3GrD",
        "number": 5541,
        "title": "Cypher search: Check if generated Cypher is provided in backticks",
        "user": {
            "login": "tomasonjo",
            "id": 19948365,
            "node_id": "MDQ6VXNlcjE5OTQ4MzY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/19948365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tomasonjo",
            "html_url": "https://github.com/tomasonjo",
            "followers_url": "https://api.github.com/users/tomasonjo/followers",
            "following_url": "https://api.github.com/users/tomasonjo/following{/other_user}",
            "gists_url": "https://api.github.com/users/tomasonjo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tomasonjo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tomasonjo/subscriptions",
            "organizations_url": "https://api.github.com/users/tomasonjo/orgs",
            "repos_url": "https://api.github.com/users/tomasonjo/repos",
            "events_url": "https://api.github.com/users/tomasonjo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tomasonjo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T06:13:20Z",
        "updated_at": "2023-06-05T19:48:14Z",
        "closed_at": "2023-06-05T19:48:14Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5541",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5541",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5541.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5541.patch",
            "merged_at": "2023-06-05T19:48:14Z"
        },
        "body": "# Check if generated Cypher code is wrapped in backticks\r\n\r\nSome LLMs like the VertexAI like to explain how they generated the Cypher statement and wrap the actual code in three backticks:\r\n\r\n![Screenshot from 2023-06-01 08-08-23](https://github.com/hwchase17/langchain/assets/19948365/1d8eecb3-d26c-4882-8f5b-6a9bc7e93690)\r\n\r\n\r\nI have observed a similar pattern with OpenAI chat models in a conversational settings, where multiple user and assistant message are provided to the LLM to generate Cypher statements, where then the LLM wants to maybe apologize for previous steps or explain its thoughts. Interestingly, both OpenAI and VertexAI wrap the code in three backticks if they are doing any explaining or apologizing. Checking if the generated cypher is wrapped in backticks seems like a low-hanging fruit to expand the cypher search to other LLMs and conversational settings.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5541/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5541/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5540",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5540/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5540/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5540/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5540",
        "id": 1735539583,
        "node_id": "PR_kwDOIPDwls5R3DqJ",
        "number": 5540,
        "title": "Harrison/pipeline prompt",
        "user": {
            "login": "hwchase17",
            "id": 11986836,
            "node_id": "MDQ6VXNlcjExOTg2ODM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11986836?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hwchase17",
            "html_url": "https://github.com/hwchase17",
            "followers_url": "https://api.github.com/users/hwchase17/followers",
            "following_url": "https://api.github.com/users/hwchase17/following{/other_user}",
            "gists_url": "https://api.github.com/users/hwchase17/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hwchase17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hwchase17/subscriptions",
            "organizations_url": "https://api.github.com/users/hwchase17/orgs",
            "repos_url": "https://api.github.com/users/hwchase17/repos",
            "events_url": "https://api.github.com/users/hwchase17/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hwchase17/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T06:04:10Z",
        "updated_at": "2023-06-04T21:29:38Z",
        "closed_at": "2023-06-04T21:29:37Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5540",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5540",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5540.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5540.patch",
            "merged_at": "2023-06-04T21:29:37Z"
        },
        "body": "idea is to make prompts more composable",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5540/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5540/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5539",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5539/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5539/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5539/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5539",
        "id": 1735478342,
        "node_id": "I_kwDOIPDwls5ncUxG",
        "number": 5539,
        "title": "Allow users to pass local embeddings to Weaviate Hybrid Search Retriever",
        "user": {
            "login": "jacobhutchinson",
            "id": 18623246,
            "node_id": "MDQ6VXNlcjE4NjIzMjQ2",
            "avatar_url": "https://avatars.githubusercontent.com/u/18623246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacobhutchinson",
            "html_url": "https://github.com/jacobhutchinson",
            "followers_url": "https://api.github.com/users/jacobhutchinson/followers",
            "following_url": "https://api.github.com/users/jacobhutchinson/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacobhutchinson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacobhutchinson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacobhutchinson/subscriptions",
            "organizations_url": "https://api.github.com/users/jacobhutchinson/orgs",
            "repos_url": "https://api.github.com/users/jacobhutchinson/repos",
            "events_url": "https://api.github.com/users/jacobhutchinson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacobhutchinson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T05:19:27Z",
        "updated_at": "2023-12-06T17:45:40Z",
        "closed_at": "2023-12-06T17:45:39Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\r\n\r\nFork off from this issue: https://github.com/hwchase17/langchain/issues/5300\r\n\r\nThe idea is to provide the WeaviateHybridSearchRetriever with the ability to use local embeddings similar to the Weaviate vectorstore. Specifically, for the `WeaviateHybridSearchRetriever.add_documents()` and `WeaviateHybridSearchRetriever.get_relevant_documents()` functions to work similar to the `Weviate.from_texts()` function where there is the option to use local embeddings if passed during creation. Additionally, the `WeaviateHybridSearchRetriever._create_schema_if_missing()` function likely needs to remove the default addition of a vectorizer in the schema object (related issue here: https://github.com/hwchase17/langchain/issues/5300).\r\n\r\n### Motivation\r\n\r\nThis will allow those of us running Weaviate without embedding modules (like myself) to use the Weaviate Hybrid Search Retriever.\r\n\r\n### Your contribution\r\n\r\nI am planning on working to get a fix locally, I can potentially submit this as a PR down the line. Busy this week so others would probably beat me to it. I can review though.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5539/reactions",
            "total_count": 4,
            "+1": 4,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5539/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5538",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5538/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5538/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5538/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5538",
        "id": 1735456313,
        "node_id": "PR_kwDOIPDwls5R2xSx",
        "number": 5538,
        "title": "add brave search util",
        "user": {
            "login": "hwchase17",
            "id": 11986836,
            "node_id": "MDQ6VXNlcjExOTg2ODM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11986836?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hwchase17",
            "html_url": "https://github.com/hwchase17",
            "followers_url": "https://api.github.com/users/hwchase17/followers",
            "following_url": "https://api.github.com/users/hwchase17/following{/other_user}",
            "gists_url": "https://api.github.com/users/hwchase17/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hwchase17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hwchase17/subscriptions",
            "organizations_url": "https://api.github.com/users/hwchase17/orgs",
            "repos_url": "https://api.github.com/users/hwchase17/repos",
            "events_url": "https://api.github.com/users/hwchase17/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hwchase17/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-01T05:00:11Z",
        "updated_at": "2023-06-01T08:11:53Z",
        "closed_at": "2023-06-01T08:11:52Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5538",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5538",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5538.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5538.patch",
            "merged_at": "2023-06-01T08:11:52Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5538/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5538/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5537",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5537/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5537/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5537/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5537",
        "id": 1735414868,
        "node_id": "I_kwDOIPDwls5ncFRU",
        "number": 5537,
        "title": "OpenAI and Azure OpenAI - calls one after another",
        "user": {
            "login": "ushakrishnan",
            "id": 18739265,
            "node_id": "MDQ6VXNlcjE4NzM5MjY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/18739265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ushakrishnan",
            "html_url": "https://github.com/ushakrishnan",
            "followers_url": "https://api.github.com/users/ushakrishnan/followers",
            "following_url": "https://api.github.com/users/ushakrishnan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ushakrishnan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ushakrishnan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ushakrishnan/subscriptions",
            "organizations_url": "https://api.github.com/users/ushakrishnan/orgs",
            "repos_url": "https://api.github.com/users/ushakrishnan/repos",
            "events_url": "https://api.github.com/users/ushakrishnan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ushakrishnan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-01T04:20:05Z",
        "updated_at": "2023-09-18T16:09:34Z",
        "closed_at": "2023-09-18T16:09:34Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nlangchain - 0.0.174 / 0.0.178 / 0.0.187\r\npython3\n\n### Who can help?\n\n@hwchase17 @agola11 \n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [X] Agents / Agent Executors\n- [X] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n1. Call OpenAI setting the parameters -  openai_api_type , openai_api_version , openai_api_base , openai_api_key\r\n-- Successful OpenAI request response\r\n2. Call Azure OpenAI setting the parameters -  openai_api_type , openai_api_version , openai_api_base , openai_api_key\r\n-- Fails\r\nAll subsequent calls fails\r\n\r\nAlternatively, if you first call Azure OpenAI with parameters set correctly - that succeeds, but OpenAI fails. And all subsequent fails.\r\n\r\nEach independently works - so guessing the. parameter values work as expected.  But when one after other is called, the second API (OpenAI or Azure OpenAI - which ever is called second) - fails\r\n\r\n\r\n\n\n### Expected behavior\n\nIf parameters are set correctly, both should work as required.  If independently they work if app is restarted, why would it fail if they are called sequentiially?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5537/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5537/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5536",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5536/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5536/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5536/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5536",
        "id": 1735412964,
        "node_id": "I_kwDOIPDwls5ncEzk",
        "number": 5536,
        "title": "`RetrievalQAWithSourcesChain` not returning sources in `sources` field. ",
        "user": {
            "login": "eRuaro",
            "id": 69240261,
            "node_id": "MDQ6VXNlcjY5MjQwMjYx",
            "avatar_url": "https://avatars.githubusercontent.com/u/69240261?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eRuaro",
            "html_url": "https://github.com/eRuaro",
            "followers_url": "https://api.github.com/users/eRuaro/followers",
            "following_url": "https://api.github.com/users/eRuaro/following{/other_user}",
            "gists_url": "https://api.github.com/users/eRuaro/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eRuaro/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eRuaro/subscriptions",
            "organizations_url": "https://api.github.com/users/eRuaro/orgs",
            "repos_url": "https://api.github.com/users/eRuaro/repos",
            "events_url": "https://api.github.com/users/eRuaro/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eRuaro/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T04:17:08Z",
        "updated_at": "2023-09-10T16:09:19Z",
        "closed_at": "2023-09-10T16:09:18Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\nSystem Info (Docker Dev Container):\r\n```\r\nPRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"\r\nNAME=\"Debian GNU/Linux\"\r\nVERSION_ID=\"10\"\r\nVERSION=\"10 (buster)\"\r\nVERSION_CODENAME=buster\r\nID=debian\r\nHOME_URL=\"https://www.debian.org/\"\r\nSUPPORT_URL=\"https://www.debian.org/support\"\r\nBUG_REPORT_URL=\"https://bugs.debian.org/\"\r\n```\r\n\r\nPython: 3.10\r\n\r\nPip:\r\n```\r\nabsl-py                  1.4.0\r\naiohttp                  3.8.4\r\naiosignal                1.3.1\r\nantlr4-python3-runtime   4.9.3\r\nanyio                    3.6.2\r\nargilla                  1.6.0\r\nasync-timeout            4.0.2\r\nattrs                    23.1.0\r\nbackoff                  2.2.1\r\ncachetools               5.3.0\r\ncertifi                  2022.12.7\r\ncffi                     1.15.1\r\ncharset-normalizer       3.1.0\r\nclick                    8.1.3\r\ncloudpickle              2.2.1\r\ncmake                    3.26.3\r\ncoloredlogs              15.0.1\r\ncommonmark               0.9.1\r\ncontourpy                1.0.7\r\ncryptography             40.0.2\r\ncycler                   0.11.0\r\ndataclasses-json         0.5.7\r\nDeprecated               1.2.13\r\ndetectron2               0.4\r\neffdet                   0.3.0\r\net-xmlfile               1.1.0\r\nexceptiongroup           1.1.1\r\nfastapi                  0.95.1\r\nfilelock                 3.11.0\r\nflatbuffers              23.3.3\r\nfonttools                4.39.3\r\nfrozenlist               1.3.3\r\nfuture                   0.18.3\r\nfvcore                   0.1.3.post20210317\r\ngoogle-auth              2.17.3\r\ngoogle-auth-oauthlib     1.0.0\r\ngptcache                 0.1.11\r\ngreenlet                 2.0.2\r\ngrpcio                   1.53.0\r\nh11                      0.14.0\r\nhttpcore                 0.16.3\r\nhttpx                    0.23.3\r\nhuggingface-hub          0.13.4\r\nhumanfriendly            10.0\r\nidna                     3.4\r\niniconfig                2.0.0\r\niopath                   0.1.10\r\nJinja2                   3.1.2\r\njoblib                   1.2.0\r\nkiwisolver               1.4.4\r\nlangchain                0.0.141\r\nlayoutparser             0.3.4\r\nlit                      16.0.1\r\nlxml                     4.9.2\r\nMarkdown                 3.4.3\r\nMarkupSafe               2.1.2\r\nmarshmallow              3.19.0\r\nmarshmallow-enum         1.5.1\r\nmatplotlib               3.7.1\r\nmonotonic                1.6\r\nmpmath                   1.3.0\r\nmsg-parser               1.2.0\r\nmultidict                6.0.4\r\nmypy-extensions          1.0.0\r\nnetworkx                 3.1\r\nnltk                     3.8.1\r\nnumpy                    1.23.5\r\nnvidia-cublas-cu11       11.10.3.66\r\nnvidia-cuda-cupti-cu11   11.7.101\r\nnvidia-cuda-nvrtc-cu11   11.7.99\r\nnvidia-cuda-runtime-cu11 11.7.99\r\nnvidia-cudnn-cu11        8.5.0.96\r\nnvidia-cufft-cu11        10.9.0.58\r\nnvidia-curand-cu11       10.2.10.91\r\nnvidia-cusolver-cu11     11.4.0.1\r\nnvidia-cusparse-cu11     11.7.4.91\r\nnvidia-nccl-cu11         2.14.3\r\nnvidia-nvtx-cu11         11.7.91\r\noauthlib                 3.2.2\r\nolefile                  0.46\r\nomegaconf                2.3.0\r\nonnxruntime              1.14.1\r\nopenai                   0.27.4\r\nopenapi-schema-pydantic  1.2.4\r\nopencv-python            4.6.0.66\r\nopenpyxl                 3.1.2\r\npackaging                23.1\r\npandas                   1.5.3\r\npdf2image                1.16.3\r\npdfminer.six             20221105\r\npdfplumber               0.9.0\r\npgvector                 0.1.6\r\nPillow                   9.5.0\r\npip                      23.1\r\npluggy                   1.0.0\r\nportalocker              2.7.0\r\nprotobuf                 4.22.3\r\npsycopg2-binary          2.9.6\r\npyasn1                   0.4.8\r\npyasn1-modules           0.2.8\r\npycocotools              2.0.6\r\npycparser                2.21\r\npydantic                 1.10.7\r\npydot                    1.4.2\r\nPygments                 2.15.0\r\npypandoc                 1.11\r\npyparsing                3.0.9\r\npypdf                    3.9.0\r\npytesseract              0.3.10\r\npytest                   7.3.1\r\npython-dateutil          2.8.2\r\npython-docx              0.8.11\r\npython-dotenv            1.0.0\r\npython-magic             0.4.27\r\npython-multipart         0.0.6\r\npython-poppler           0.4.0\r\npython-pptx              0.6.21\r\npytz                     2023.3\r\nPyYAML                   6.0\r\nregex                    2023.3.23\r\nrequests                 2.28.2\r\nrequests-oauthlib        1.3.1\r\nrfc3986                  1.5.0\r\nrich                     13.0.1\r\nrsa                      4.9\r\nscipy                    1.10.1\r\nsetuptools               65.5.1\r\nsix                      1.16.0\r\nsniffio                  1.3.0\r\nSQLAlchemy               1.4.47\r\nstarlette                0.26.1\r\nsympy                    1.11.1\r\ntabulate                 0.9.0\r\ntenacity                 8.2.2\r\ntensorboard              2.12.2\r\ntensorboard-data-server  0.7.0\r\ntensorboard-plugin-wit   1.8.1\r\ntermcolor                2.2.0\r\ntiktoken                 0.3.3\r\ntimm                     0.6.13\r\ntokenizers               0.13.3\r\ntomli                    2.0.1\r\ntorch                    2.0.0\r\ntorchaudio               2.0.1\r\ntorchvision              0.15.1\r\ntqdm                     4.65.0\r\ntransformers             4.28.1\r\ntriton                   2.0.0\r\ntyping_extensions        4.5.0\r\ntyping-inspect           0.8.0\r\nunstructured             0.5.12\r\nunstructured-inference   0.3.2\r\nurllib3                  1.26.15\r\nuvicorn                  0.21.1\r\nWand                     0.6.11\r\nWerkzeug                 2.2.3\r\nwheel                    0.40.0\r\nwrapt                    1.14.1\r\nXlsxWriter               3.1.0\r\nyacs                     0.1.8\r\nyarl                     1.8.2\r\n```\r\n\r\n### Who can help?\r\n\r\n@hwchase17 \r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [X] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [X] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [ ] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [X] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\nWrite the code below:\r\n```\r\n      chain = RetrievalQAWithSourcesChain.from_chain_type(\r\n            llm=ChatOpenAI(openai_api_key=api_key),\r\n            chain_type=\"map_reduce\",\r\n            retriever=retriever,\r\n        )\r\n\r\n        llm_call = \"random llm call\"\r\n\r\n        result = chain({\r\n            \"question\": llm_call,\r\n        },\r\n            return_only_outputs=True\r\n        )\r\n```\r\n\r\n### Expected behavior\r\n\r\nI'm expecting that I'll be having a `result[\"answer\"]` and non empty `result[\"sources\"]` but here's what I get instead:\r\n![image](https://github.com/hwchase17/langchain/assets/69240261/a49a54eb-315c-45d5-a4e7-a647c3d818e3)\r\n\r\nAs you can see, `sources` is empty but it's included in `result[\"answer\"]` as a string. ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5536/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5536/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5535",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5535/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5535/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5535/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5535",
        "id": 1735366931,
        "node_id": "I_kwDOIPDwls5nb5kT",
        "number": 5535,
        "title": "Add Tigris vectorstore for vector search",
        "user": {
            "login": "adilansari",
            "id": 2469198,
            "node_id": "MDQ6VXNlcjI0NjkxOTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2469198?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adilansari",
            "html_url": "https://github.com/adilansari",
            "followers_url": "https://api.github.com/users/adilansari/followers",
            "following_url": "https://api.github.com/users/adilansari/following{/other_user}",
            "gists_url": "https://api.github.com/users/adilansari/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/adilansari/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/adilansari/subscriptions",
            "organizations_url": "https://api.github.com/users/adilansari/orgs",
            "repos_url": "https://api.github.com/users/adilansari/repos",
            "events_url": "https://api.github.com/users/adilansari/events{/privacy}",
            "received_events_url": "https://api.github.com/users/adilansari/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528817,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvMQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5541432778,
                "node_id": "LA_kwDOIPDwls8AAAABSkuNyg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20vector%20store",
                "name": "area: vector store",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to vector store module"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T03:18:00Z",
        "updated_at": "2023-06-06T03:39:17Z",
        "closed_at": "2023-06-06T03:39:17Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature request\n\nSupport Tigris as a vector search backend\n\n### Motivation\n\nTigris is a Serverless NoSQL Database and Search Platform and have their [vector search](https://www.tigrisdata.com/docs/concepts/vector-search/python/) product. It will be great option for users to use an integrated database and search product.\n\n### Your contribution\n\nI can submit a a PR",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5535/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5535/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5533",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5533/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5533/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5533/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5533",
        "id": 1735277122,
        "node_id": "PR_kwDOIPDwls5R2KbU",
        "number": 5533,
        "title": "add maxcompute",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528817,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvMQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5541144676,
                "node_id": "LA_kwDOIPDwls8AAAABSkcoZA",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20doc%20loader",
                "name": "area: doc loader",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to document loader module (not documentation)"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-01T01:28:47Z",
        "updated_at": "2023-06-02T02:53:06Z",
        "closed_at": "2023-06-01T07:54:43Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5533",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5533",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5533.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5533.patch",
            "merged_at": "2023-06-01T07:54:42Z"
        },
        "body": "cc @pengwork (fresh branch, no creds)",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5533/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5533/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5532",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5532/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5532/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5532/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5532",
        "id": 1735238661,
        "node_id": "I_kwDOIPDwls5nbaQF",
        "number": 5532,
        "title": "Issue:  how stream results with long context",
        "user": {
            "login": "qlql489",
            "id": 10767590,
            "node_id": "MDQ6VXNlcjEwNzY3NTkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10767590?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/qlql489",
            "html_url": "https://github.com/qlql489",
            "followers_url": "https://api.github.com/users/qlql489/followers",
            "following_url": "https://api.github.com/users/qlql489/following{/other_user}",
            "gists_url": "https://api.github.com/users/qlql489/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/qlql489/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/qlql489/subscriptions",
            "organizations_url": "https://api.github.com/users/qlql489/orgs",
            "repos_url": "https://api.github.com/users/qlql489/repos",
            "events_url": "https://api.github.com/users/qlql489/events{/privacy}",
            "received_events_url": "https://api.github.com/users/qlql489/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-01T00:52:51Z",
        "updated_at": "2023-10-11T16:17:53Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\ni follow the chapter  \u201cChat Over Documents with Chat History\u201d to build a bot chat with pdf\uff0c\r\ni want to streanming return,\r\nbut when i use stuff chain like this\r\n```python\r\n    doc_chain = load_qa_chain(OpenAI(temperature=0), chain_type=\"stuff\", prompt=QA_PROMPT)\r\n    chain = ConversationalRetrievalChain(\r\n        retriever=vector_db.as_retriever(),\r\n        question_generator=question_generator,\r\n        combine_docs_chain=doc_chain\r\n    )\r\n```\r\n\r\nit return \"This model's maximum context length is 4097 tokens, however you requested 5741 tokens (5485 in your prompt; 256 for the completion). Please reduce your prompt; or completion length\"\r\n\r\nwhen i use map_reduce chain\r\n\r\n```python\r\ndoc_chain = load_qa_chain(OpenAI(temperature=0,streaming=True,callbacks=[StreamingStdOutCallbackHandler()]), chain_type=\"map_reduce\", combine_prompt=getQaMap_reducePromot())\r\n```\r\nit  return \"Cannot stream results with multiple prompts.\"\r\n\r\nhow to resolve it when the context is too long\r\n\n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5532/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5532/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5531",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5531/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5531/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5531/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5531",
        "id": 1735113256,
        "node_id": "I_kwDOIPDwls5na7oo",
        "number": 5531,
        "title": "Sampling parameters are ignored by vertexai",
        "user": {
            "login": "khallbobo",
            "id": 871838,
            "node_id": "MDQ6VXNlcjg3MTgzOA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/871838?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/khallbobo",
            "html_url": "https://github.com/khallbobo",
            "followers_url": "https://api.github.com/users/khallbobo/followers",
            "following_url": "https://api.github.com/users/khallbobo/following{/other_user}",
            "gists_url": "https://api.github.com/users/khallbobo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/khallbobo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/khallbobo/subscriptions",
            "organizations_url": "https://api.github.com/users/khallbobo/orgs",
            "repos_url": "https://api.github.com/users/khallbobo/repos",
            "events_url": "https://api.github.com/users/khallbobo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/khallbobo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-31T22:19:11Z",
        "updated_at": "2023-06-05T14:06:42Z",
        "closed_at": "2023-06-05T14:06:41Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "start_chat() constructs a vertextai _ChatSession and sets class variables with the parameters, but send_message() will not use those parameters if send_message is called w/o parameters.  This is because send_message() has default values for the parameters which are set to global variables.\r\nYou can fix this by moving **self._default_params to the send_message() call.\r\n\r\nhttps://github.com/hwchase17/langchain/blob/359fb8fa3ae0b0904dbb36f998cd2339ea0aec0f/langchain/chat_models/vertexai.py#LL122C75-L122C75",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5531/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5531/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5530",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5530/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5530/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5530/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5530",
        "id": 1735101156,
        "node_id": "I_kwDOIPDwls5na4rk",
        "number": 5530,
        "title": "Remove Chat Models ",
        "user": {
            "login": "dashesy",
            "id": 873905,
            "node_id": "MDQ6VXNlcjg3MzkwNQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/873905?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dashesy",
            "html_url": "https://github.com/dashesy",
            "followers_url": "https://api.github.com/users/dashesy/followers",
            "following_url": "https://api.github.com/users/dashesy/following{/other_user}",
            "gists_url": "https://api.github.com/users/dashesy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dashesy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dashesy/subscriptions",
            "organizations_url": "https://api.github.com/users/dashesy/orgs",
            "repos_url": "https://api.github.com/users/dashesy/repos",
            "events_url": "https://api.github.com/users/dashesy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dashesy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-31T22:08:48Z",
        "updated_at": "2023-09-13T16:07:48Z",
        "closed_at": "2023-09-13T16:07:47Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nChat models relying on `SystemMessage`, ... instead of simple text, hinder creating longer prompts.\r\nIt would have been much simpler to avoid special casing chat models, and instead parse special tokens in the text prompt to separate system, human, ai, ...\r\n\n\n### Motivation\n\nSomething similar to [this](https://github.com/microsoft/MM-REACT/blob/main/langchain/llms/openai.py#L211) that uses `<|im_start|>system\\nsystem message<|im_end|>` would make it easier to keep the same code for models, and just use different prompts for chat endpints.\r\n\r\nFor example, it is perfectly valid to have 2 system messages, and I found it improves the results to have a system message at the beginning, and [one after](https://github.com/microsoft/MM-REACT/blob/main/langchain/agents/assistant/prompt.py#L191) some zero-shot examples right before the input.\n\n### Your contribution\n\nI can send the PR if there is any interest. ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5530/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5530/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5529",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5529/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5529/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5529/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5529",
        "id": 1735073050,
        "node_id": "PR_kwDOIPDwls5R1exn",
        "number": 5529,
        "title": "[retrievers][knn] Replace loop appends with list comprehension.",
        "user": {
            "login": "ttsugriy",
            "id": 172294,
            "node_id": "MDQ6VXNlcjE3MjI5NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/172294?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttsugriy",
            "html_url": "https://github.com/ttsugriy",
            "followers_url": "https://api.github.com/users/ttsugriy/followers",
            "following_url": "https://api.github.com/users/ttsugriy/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttsugriy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttsugriy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttsugriy/subscriptions",
            "organizations_url": "https://api.github.com/users/ttsugriy/orgs",
            "repos_url": "https://api.github.com/users/ttsugriy/repos",
            "events_url": "https://api.github.com/users/ttsugriy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttsugriy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-31T21:42:23Z",
        "updated_at": "2023-05-31T23:58:09Z",
        "closed_at": "2023-05-31T23:57:24Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5529",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5529",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5529.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5529.patch",
            "merged_at": "2023-05-31T23:57:24Z"
        },
        "body": "# Replace loop appends with list comprehension.\r\n\r\nIt's much faster, more idiomatic and slightly more readable.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5529/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5529/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5528",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5528/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5528/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5528/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5528",
        "id": 1735068158,
        "node_id": "PR_kwDOIPDwls5R1dsG",
        "number": 5528,
        "title": "Replace loop appends with list comprehension.",
        "user": {
            "login": "ttsugriy",
            "id": 172294,
            "node_id": "MDQ6VXNlcjE3MjI5NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/172294?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttsugriy",
            "html_url": "https://github.com/ttsugriy",
            "followers_url": "https://api.github.com/users/ttsugriy/followers",
            "following_url": "https://api.github.com/users/ttsugriy/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttsugriy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttsugriy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttsugriy/subscriptions",
            "organizations_url": "https://api.github.com/users/ttsugriy/orgs",
            "repos_url": "https://api.github.com/users/ttsugriy/repos",
            "events_url": "https://api.github.com/users/ttsugriy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttsugriy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T21:39:08Z",
        "updated_at": "2023-05-31T23:57:56Z",
        "closed_at": "2023-05-31T23:56:13Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5528",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5528",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5528.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5528.patch",
            "merged_at": "2023-05-31T23:56:13Z"
        },
        "body": "# Replace loop appends with list comprehension.\r\n\r\nIt's significantly faster because it avoids repeated method lookup. It's also more idiomatic and readable.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5528/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5528/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5527",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5527/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5527/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5527/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5527",
        "id": 1735052184,
        "node_id": "PR_kwDOIPDwls5R1aK1",
        "number": 5527,
        "title": "Replace enumerate with zip.",
        "user": {
            "login": "ttsugriy",
            "id": 172294,
            "node_id": "MDQ6VXNlcjE3MjI5NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/172294?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttsugriy",
            "html_url": "https://github.com/ttsugriy",
            "followers_url": "https://api.github.com/users/ttsugriy/followers",
            "following_url": "https://api.github.com/users/ttsugriy/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttsugriy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttsugriy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttsugriy/subscriptions",
            "organizations_url": "https://api.github.com/users/ttsugriy/orgs",
            "repos_url": "https://api.github.com/users/ttsugriy/repos",
            "events_url": "https://api.github.com/users/ttsugriy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttsugriy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T21:24:24Z",
        "updated_at": "2023-05-31T23:41:48Z",
        "closed_at": "2023-05-31T22:02:23Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5527",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5527",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5527.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5527.patch",
            "merged_at": "2023-05-31T22:02:23Z"
        },
        "body": "# Replace enumerate with zip.\r\n\r\nIt's more idiomatic and slightly more readable.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5527/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5527/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5526",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5526/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5526/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5526/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5526",
        "id": 1735048395,
        "node_id": "PR_kwDOIPDwls5R1ZWN",
        "number": 5526,
        "title": "Replace list comprehension with generator.",
        "user": {
            "login": "ttsugriy",
            "id": 172294,
            "node_id": "MDQ6VXNlcjE3MjI5NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/172294?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ttsugriy",
            "html_url": "https://github.com/ttsugriy",
            "followers_url": "https://api.github.com/users/ttsugriy/followers",
            "following_url": "https://api.github.com/users/ttsugriy/following{/other_user}",
            "gists_url": "https://api.github.com/users/ttsugriy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ttsugriy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ttsugriy/subscriptions",
            "organizations_url": "https://api.github.com/users/ttsugriy/orgs",
            "repos_url": "https://api.github.com/users/ttsugriy/repos",
            "events_url": "https://api.github.com/users/ttsugriy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ttsugriy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T21:20:42Z",
        "updated_at": "2023-05-31T23:42:14Z",
        "closed_at": "2023-05-31T22:10:43Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5526",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5526",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5526.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5526.patch",
            "merged_at": "2023-05-31T22:10:43Z"
        },
        "body": "# Replace list comprehension with generator.\r\n\r\nSince these strings can be fairly long, it's best to not construct unnecessary temporary list just to pass it to `join`. Generators produce items one-by-one and even though they are slightly more expensive than lists in terms of CPU they are much more memory-friendly and slightly more readable.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5526/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5526/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5525",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5525/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5525/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5525/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5525",
        "id": 1735035338,
        "node_id": "PR_kwDOIPDwls5R1WZw",
        "number": 5525,
        "title": "Add minor fixes for PySpark Document Loader Docs",
        "user": {
            "login": "rithwik-db",
            "id": 81988348,
            "node_id": "MDQ6VXNlcjgxOTg4MzQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/81988348?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rithwik-db",
            "html_url": "https://github.com/rithwik-db",
            "followers_url": "https://api.github.com/users/rithwik-db/followers",
            "following_url": "https://api.github.com/users/rithwik-db/following{/other_user}",
            "gists_url": "https://api.github.com/users/rithwik-db/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rithwik-db/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rithwik-db/subscriptions",
            "organizations_url": "https://api.github.com/users/rithwik-db/orgs",
            "repos_url": "https://api.github.com/users/rithwik-db/repos",
            "events_url": "https://api.github.com/users/rithwik-db/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rithwik-db/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T21:11:35Z",
        "updated_at": "2023-05-31T22:06:44Z",
        "closed_at": "2023-05-31T22:02:57Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5525",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5525",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5525.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5525.patch",
            "merged_at": "2023-05-31T22:02:57Z"
        },
        "body": "# Add minor fixes for PySpark Document Loader Docs\r\n\r\nRenamed \"PySpack\" to \"PySpark\" and executed the notebook to show outputs.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5525/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5525/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5524",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5524/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5524/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5524/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5524",
        "id": 1734961602,
        "node_id": "PR_kwDOIPDwls5R1GN7",
        "number": 5524,
        "title": "docs: unstructured no longer requires installing detectron2 from source",
        "user": {
            "login": "MthwRobinson",
            "id": 1635179,
            "node_id": "MDQ6VXNlcjE2MzUxNzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1635179?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MthwRobinson",
            "html_url": "https://github.com/MthwRobinson",
            "followers_url": "https://api.github.com/users/MthwRobinson/followers",
            "following_url": "https://api.github.com/users/MthwRobinson/following{/other_user}",
            "gists_url": "https://api.github.com/users/MthwRobinson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MthwRobinson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MthwRobinson/subscriptions",
            "organizations_url": "https://api.github.com/users/MthwRobinson/orgs",
            "repos_url": "https://api.github.com/users/MthwRobinson/repos",
            "events_url": "https://api.github.com/users/MthwRobinson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MthwRobinson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-31T20:24:26Z",
        "updated_at": "2023-05-31T22:03:22Z",
        "closed_at": "2023-05-31T22:03:21Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5524",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5524",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5524.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5524.patch",
            "merged_at": "2023-05-31T22:03:21Z"
        },
        "body": "# Update Unstructured docs to remove the `detectron2` install instructions\r\n\r\nRemoves `detectron2` installation instructions from the Unstructured docs because installing `detectron2` is no longer required for `unstructured>=0.7.0`. The `detectron2` model now runs using the ONNX runtime.\r\n\r\n## Who can review?\r\n\r\n@hwchase17 \r\n@eyurtsev ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5524/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5524/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5523",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5523/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5523/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5523/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5523",
        "id": 1734958845,
        "node_id": "PR_kwDOIPDwls5R1Fnq",
        "number": 5523,
        "title": "Skips creating boto client for Bedrock if passed in constructor",
        "user": {
            "login": "3coins",
            "id": 289369,
            "node_id": "MDQ6VXNlcjI4OTM2OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/289369?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/3coins",
            "html_url": "https://github.com/3coins",
            "followers_url": "https://api.github.com/users/3coins/followers",
            "following_url": "https://api.github.com/users/3coins/following{/other_user}",
            "gists_url": "https://api.github.com/users/3coins/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/3coins/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/3coins/subscriptions",
            "organizations_url": "https://api.github.com/users/3coins/orgs",
            "repos_url": "https://api.github.com/users/3coins/repos",
            "events_url": "https://api.github.com/users/3coins/events{/privacy}",
            "received_events_url": "https://api.github.com/users/3coins/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-31T20:22:01Z",
        "updated_at": "2023-05-31T21:54:12Z",
        "closed_at": "2023-05-31T21:54:12Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5523",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5523",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5523.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5523.patch",
            "merged_at": "2023-05-31T21:54:12Z"
        },
        "body": "# Skips creating boto client if passed in constructor\r\nCurrent LLM and Embeddings class always creates a new boto client, even if one is passed in a constructor. This blocks certain users from passing in externally created boto clients, for example in SSO authentication. \r\n\r\n## Who can review?\r\n@hwchase17 \r\n@jasondotparse \r\n@rsgrewal-aws\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5523/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5523/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5522",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5522/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5522/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5522/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5522",
        "id": 1734953214,
        "node_id": "I_kwDOIPDwls5naUj-",
        "number": 5522,
        "title": "Query execution with langchain LLM pipeline is happening on CPU, even if model is loaded on GPU",
        "user": {
            "login": "suraj-gade",
            "id": 112926867,
            "node_id": "U_kgDOBrsgkw",
            "avatar_url": "https://avatars.githubusercontent.com/u/112926867?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/suraj-gade",
            "html_url": "https://github.com/suraj-gade",
            "followers_url": "https://api.github.com/users/suraj-gade/followers",
            "following_url": "https://api.github.com/users/suraj-gade/following{/other_user}",
            "gists_url": "https://api.github.com/users/suraj-gade/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/suraj-gade/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/suraj-gade/subscriptions",
            "organizations_url": "https://api.github.com/users/suraj-gade/orgs",
            "repos_url": "https://api.github.com/users/suraj-gade/repos",
            "events_url": "https://api.github.com/users/suraj-gade/events{/privacy}",
            "received_events_url": "https://api.github.com/users/suraj-gade/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-31T20:18:21Z",
        "updated_at": "2023-09-21T16:08:57Z",
        "closed_at": "2023-09-21T16:08:56Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi,\r\n\r\nI am building a chatbot using LLM like fastchat-t5-3b-v1.0 and want to reduce my inference time.\r\n\r\nI am loading the entire model on GPU, using device_map parameter, and making use of `langchain.llms.HuggingFacePipeline` agent for querying the LLM model. Also specifying the device=0 ( which is the 1st rank GPU) for hugging face pipeline as well.\r\nI am monitoring the GPU and CPU usage throughout the entire execution, and I can see that though my model is on GPU, at the time of querying the model, it makes use of CPU.\r\nThe spike in CPU usage shows that query execution is happening on CPU.\r\n\r\nBelow is the code that I am using to do inference on Fastchat LLM.\r\n\r\n```\r\nfrom llama_index import SimpleDirectoryReader, GPTVectorStoreIndex, PromptHelper, LLMPredictor\r\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings\r\nfrom llama_index import LangchainEmbedding, ServiceContext\r\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\r\nfrom accelerate import init_empty_weights, infer_auto_device_map\r\n\r\nmodel_name = 'lmsys/fastchat-t5-3b-v1.0'\r\n\r\nconfig = T5Config.from_pretrained(model_name )\r\nwith init_empty_weights():\r\n    model_layer = T5ForConditionalGeneration(config=config)\r\n\r\ndevice_map = infer_auto_device_map(model_layer, max_memory={0: \"12GiB\",1: \"12GiB\", \"cpu\": \"0GiB\"}, no_split_module_classes=[\"T5Block\"])\r\n\r\n# the value for is : device_map = {'': 0}. i.e loading model in 1st GPU\r\n\r\nmodel = T5ForConditionalGeneration.from_pretrained(model_name, torch_dtype=torch.float16, device_map=device_map, offload_folder=\"offload\", offload_state_dict=True)\r\n\r\ntokenizer = T5Tokenizer.from_pretrained(model_name)\r\n\r\nfrom transformers import pipeline\r\n\r\npipe = pipeline(\r\n    \"text2text-generation\", model=model, tokenizer=tokenizer, device= 0,\r\n    max_length=1536, temperature=0, top_p = 1, num_beams=1, early_stopping=False\r\n)\r\n\r\nfrom langchain.llms import HuggingFacePipeline\r\nllm = HuggingFacePipeline(pipeline=pipe)\r\n\r\nembed_model = LangchainEmbedding(HuggingFaceEmbeddings())\r\n\r\n# set maximum input size\r\nmax_input_size = 2048\r\n# set number of output tokens\r\nnum_outputs = 512\r\n# set maximum chunk overlap\r\nmax_chunk_overlap = 20\r\n# set chunk size limit\r\nchunk_size_limit = 300\r\nprompt_helper = PromptHelper(max_input_size, num_outputs, max_chunk_overlap)\r\n\r\nservice_context = ServiceContext.from_defaults(embed_model=embed_model, llm_predictor=LLMPredictor(llm), prompt_helper=prompt_helper, chunk_size_limit=chunk_size_limit)\r\n\r\n# build index\r\ndocuments = SimpleDirectoryReader('data').load_data()\r\n\r\nnew_index = GPTVectorStoreIndex.from_documents(documents, service_context=service_context)\r\n\r\nquery_engine = new_index.as_query_engine(\r\n    response_mode='no_text',\r\n    verbose=True,\r\n    similarity_top_k=2\r\n)\r\n\r\ntemplate = \"\"\"\r\nA chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\r\n### Human: Given the context:\r\n---\r\n{context}\r\n---\r\nAnswer the following question:\r\n---\r\n{input}\r\n### Assistant:\r\n\"\"\"\r\n\r\nfrom langchain import LLMChain, PromptTemplate\r\n\r\nprompt = PromptTemplate(\r\n    input_variables=[\"context\", \"input\"],\r\n    template=template,\r\n)\r\n\r\nchain = LLMChain(\r\n    llm=llm,\r\n    prompt=prompt,\r\n    verbose=True\r\n)\r\n\r\nuser_input= \"sample query question?\"\r\ncontext = query_engine.query(user_input)\r\nconcatenated_context = ' '.join(map(str,  [node.node.text for node in context.source_nodes]))\r\n\r\nresponse = chain.run({\"context\": concatenated_context, \"input\": user_input})\r\n\r\n```\r\n\r\nHere the \u201cdata\u201d folder has my full input text in pdf format, and am using the GPTVectoreStoreIndex and hugging face pipeline to build the index on that and fetch the relevant chunk to generate the prompt with context and user_input \r\nThen using LLMChain agent from langchain library to generate the response from FastChat model as shown in the code.\r\n\r\nPlease have a look, and let me know if this is the expected behaviour.\r\nhow can I make use of GPU for query execution as well? to reduce the inference response time.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5522/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5522/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5521",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5521/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5521/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5521/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5521",
        "id": 1734829837,
        "node_id": "I_kwDOIPDwls5nZ2cN",
        "number": 5521,
        "title": "Tracing V2 doesn't work",
        "user": {
            "login": "alexkreidler",
            "id": 11166947,
            "node_id": "MDQ6VXNlcjExMTY2OTQ3",
            "avatar_url": "https://avatars.githubusercontent.com/u/11166947?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alexkreidler",
            "html_url": "https://github.com/alexkreidler",
            "followers_url": "https://api.github.com/users/alexkreidler/followers",
            "following_url": "https://api.github.com/users/alexkreidler/following{/other_user}",
            "gists_url": "https://api.github.com/users/alexkreidler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alexkreidler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alexkreidler/subscriptions",
            "organizations_url": "https://api.github.com/users/alexkreidler/orgs",
            "repos_url": "https://api.github.com/users/alexkreidler/repos",
            "events_url": "https://api.github.com/users/alexkreidler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alexkreidler/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T19:04:38Z",
        "updated_at": "2023-09-10T16:09:29Z",
        "closed_at": "2023-09-10T16:09:29Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\n```\r\n$ langchain env\r\nLangChain Environment:\r\nlibrary_version:0.0.184\r\nplatform:Linux-5.4.0-146-generic-x86_64-with-glibc2.31\r\nruntime:python\r\nruntime_version:3.11.3\r\n```\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [x] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [X] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nFollowing the [tracing v2 instructions](https://python.langchain.com/en/latest/tracing/agent_with_tracing.html#beta-tracing-v2), run:\r\n```\r\n$ langchain plus start\r\nWARN[0000] The \"OPENAI_API_KEY\" variable is not set. Defaulting to a blank string. \r\n[+] Running 2/2\r\n \u283f langchain-frontend Pulled                                                                                                 5.3s\r\n \u283f langchain-backend Pulled                                                                                                  9.5s\r\nunable to prepare context: path \"frontend-react/.\" not found\r\nlangchain plus server is running at http://localhost.  To connect locally, set the following environment variable when running your LangChain application.\r\n        LANGCHAIN_TRACING_V2=true\r\n```\r\n\r\nIt looks like neither the `frontend-react` or `backend` folders referenced by the [`docker-compose.yaml`](https://github.com/hwchase17/langchain/blob/f72bb966f894f99c9ffc2c730be392c71d020ac8/langchain/cli/docker-compose.yaml#L14) are in the repository, thus docker won't build them.  Maybe we should remove the `build:` section of the YAML when deploying to users so they simply pull the images from the Docker Hub.\n\n### Expected behavior\n\nIt should start properly.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5521/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 1,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5521/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5519",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5519/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5519/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5519/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5519",
        "id": 1734732180,
        "node_id": "I_kwDOIPDwls5nZemU",
        "number": 5519,
        "title": "Chroma: Constructor takes wrong embedding function (document vs query)",
        "user": {
            "login": "jrinder42",
            "id": 8828652,
            "node_id": "MDQ6VXNlcjg4Mjg2NTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8828652?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrinder42",
            "html_url": "https://github.com/jrinder42",
            "followers_url": "https://api.github.com/users/jrinder42/followers",
            "following_url": "https://api.github.com/users/jrinder42/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrinder42/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrinder42/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrinder42/subscriptions",
            "organizations_url": "https://api.github.com/users/jrinder42/orgs",
            "repos_url": "https://api.github.com/users/jrinder42/repos",
            "events_url": "https://api.github.com/users/jrinder42/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrinder42/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-31T18:02:20Z",
        "updated_at": "2023-10-18T16:07:54Z",
        "closed_at": "2023-10-18T16:07:52Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nMost recent version of Langchain\r\nPython: 3.10.8\r\nMacOS 13.4 - M1\n\n### Who can help?\n\n@hwchase17 \r\n@agola11 \n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nThe Chroma constructor in the vectorstore section uses the document function when it should be the query function for embeddings. As a result, if the documents parameter is blank when using Chroma, Langchain will error out with a ValidationError. Please change line 95 to be embed_query instead of embed_documents [here](https://github.com/hwchase17/langchain/blob/master/langchain/vectorstores/chroma.py) in order for this to work / be consistent with the rest of the vectorstore wrappers\n\n### Expected behavior\n\nUse the query function instead of the documents function for use with embeddings in Chroma",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5519/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5519/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5518",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5518/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5518/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5518/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5518",
        "id": 1734692434,
        "node_id": "PR_kwDOIPDwls5R0Kvs",
        "number": 5518,
        "title": "added DeepLearing.AI course link",
        "user": {
            "login": "leo-gan",
            "id": 2256422,
            "node_id": "MDQ6VXNlcjIyNTY0MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2256422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leo-gan",
            "html_url": "https://github.com/leo-gan",
            "followers_url": "https://api.github.com/users/leo-gan/followers",
            "following_url": "https://api.github.com/users/leo-gan/following{/other_user}",
            "gists_url": "https://api.github.com/users/leo-gan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leo-gan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leo-gan/subscriptions",
            "organizations_url": "https://api.github.com/users/leo-gan/orgs",
            "repos_url": "https://api.github.com/users/leo-gan/repos",
            "events_url": "https://api.github.com/users/leo-gan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leo-gan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-31T17:39:34Z",
        "updated_at": "2023-05-31T22:28:33Z",
        "closed_at": "2023-05-31T21:53:15Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5518",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5518",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5518.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5518.patch",
            "merged_at": "2023-05-31T21:53:15Z"
        },
        "body": "# added DeepLearing.AI course link\r\n\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n\r\n not @hwchase17 - hehe\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5518/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5518/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5517",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5517/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5517/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5517/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5517",
        "id": 1734656036,
        "node_id": "PR_kwDOIPDwls5R0Cw_",
        "number": 5517,
        "title": "Update Tracer Auth / Reduce Num Calls",
        "user": {
            "login": "vowelparrot",
            "id": 130414180,
            "node_id": "U_kgDOB8X2ZA",
            "avatar_url": "https://avatars.githubusercontent.com/u/130414180?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vowelparrot",
            "html_url": "https://github.com/vowelparrot",
            "followers_url": "https://api.github.com/users/vowelparrot/followers",
            "following_url": "https://api.github.com/users/vowelparrot/following{/other_user}",
            "gists_url": "https://api.github.com/users/vowelparrot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vowelparrot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vowelparrot/subscriptions",
            "organizations_url": "https://api.github.com/users/vowelparrot/orgs",
            "repos_url": "https://api.github.com/users/vowelparrot/repos",
            "events_url": "https://api.github.com/users/vowelparrot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vowelparrot/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T17:16:44Z",
        "updated_at": "2023-06-02T19:13:57Z",
        "closed_at": "2023-06-02T19:13:56Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5517",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5517",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5517.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5517.patch",
            "merged_at": "2023-06-02T19:13:56Z"
        },
        "body": "Update the session creation and calls",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5517/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5517/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5516",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5516/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5516/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5516/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5516",
        "id": 1734602354,
        "node_id": "PR_kwDOIPDwls5Rz3Aw",
        "number": 5516,
        "title": "Change methodology for scraping",
        "user": {
            "login": "Haste171",
            "id": 34923485,
            "node_id": "MDQ6VXNlcjM0OTIzNDg1",
            "avatar_url": "https://avatars.githubusercontent.com/u/34923485?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Haste171",
            "html_url": "https://github.com/Haste171",
            "followers_url": "https://api.github.com/users/Haste171/followers",
            "following_url": "https://api.github.com/users/Haste171/following{/other_user}",
            "gists_url": "https://api.github.com/users/Haste171/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Haste171/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Haste171/subscriptions",
            "organizations_url": "https://api.github.com/users/Haste171/orgs",
            "repos_url": "https://api.github.com/users/Haste171/repos",
            "events_url": "https://api.github.com/users/Haste171/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Haste171/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5541144676,
                "node_id": "LA_kwDOIPDwls8AAAABSkcoZA",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20doc%20loader",
                "name": "area: doc loader",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to document loader module (not documentation)"
            },
            {
                "id": 5680700873,
                "node_id": "LA_kwDOIPDwls8AAAABUpidyQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:improvement",
                "name": "auto:improvement",
                "color": "FBCA04",
                "default": false,
                "description": "Medium size change to existing code to handle new use-cases"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": {
            "login": "eyurtsev",
            "id": 3205522,
            "node_id": "MDQ6VXNlcjMyMDU1MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3205522?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eyurtsev",
            "html_url": "https://github.com/eyurtsev",
            "followers_url": "https://api.github.com/users/eyurtsev/followers",
            "following_url": "https://api.github.com/users/eyurtsev/following{/other_user}",
            "gists_url": "https://api.github.com/users/eyurtsev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eyurtsev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eyurtsev/subscriptions",
            "organizations_url": "https://api.github.com/users/eyurtsev/orgs",
            "repos_url": "https://api.github.com/users/eyurtsev/repos",
            "events_url": "https://api.github.com/users/eyurtsev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eyurtsev/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "eyurtsev",
                "id": 3205522,
                "node_id": "MDQ6VXNlcjMyMDU1MjI=",
                "avatar_url": "https://avatars.githubusercontent.com/u/3205522?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/eyurtsev",
                "html_url": "https://github.com/eyurtsev",
                "followers_url": "https://api.github.com/users/eyurtsev/followers",
                "following_url": "https://api.github.com/users/eyurtsev/following{/other_user}",
                "gists_url": "https://api.github.com/users/eyurtsev/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/eyurtsev/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/eyurtsev/subscriptions",
                "organizations_url": "https://api.github.com/users/eyurtsev/orgs",
                "repos_url": "https://api.github.com/users/eyurtsev/repos",
                "events_url": "https://api.github.com/users/eyurtsev/events{/privacy}",
                "received_events_url": "https://api.github.com/users/eyurtsev/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-05-31T16:38:16Z",
        "updated_at": "2023-07-24T14:58:49Z",
        "closed_at": "2023-07-24T14:58:48Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5516",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5516",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5516.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5516.patch",
            "merged_at": null
        },
        "body": "It seems that the ReadTheDocsLoader is trying to parse and clean HTML contents from specific tags in the HTML file. If the HTML file doesn't contain the exact tag, the page_content will be empty.\r\n\r\nThe loader is looking for the \"main\" tag with the id \"main-content\" and if it doesn't find it, it's looking for a \"div\" tag with the role \"main\". If neither is found, it returns an empty string.\r\n\r\nOne way to fix this issue is to adjust the tags to those present in the HTML files to be scraped.\r\n\r\n@eyurtsev",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5516/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5516/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5515",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5515/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5515/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5515/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5515",
        "id": 1734600312,
        "node_id": "PR_kwDOIPDwls5Rz2kY",
        "number": 5515,
        "title": "Fix: Qdrant ids",
        "user": {
            "login": "kacperlukawski",
            "id": 2649301,
            "node_id": "MDQ6VXNlcjI2NDkzMDE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2649301?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kacperlukawski",
            "html_url": "https://github.com/kacperlukawski",
            "followers_url": "https://api.github.com/users/kacperlukawski/followers",
            "following_url": "https://api.github.com/users/kacperlukawski/following{/other_user}",
            "gists_url": "https://api.github.com/users/kacperlukawski/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kacperlukawski/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kacperlukawski/subscriptions",
            "organizations_url": "https://api.github.com/users/kacperlukawski/orgs",
            "repos_url": "https://api.github.com/users/kacperlukawski/repos",
            "events_url": "https://api.github.com/users/kacperlukawski/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kacperlukawski/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T16:36:43Z",
        "updated_at": "2023-06-02T15:57:35Z",
        "closed_at": "2023-06-02T15:57:35Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5515",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5515",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5515.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5515.patch",
            "merged_at": "2023-06-02T15:57:35Z"
        },
        "body": "# Fix Qdrant ids creation\r\n\r\nThere has been a bug in how the ids were created in the Qdrant vector store. They were previously calculated based on the texts. However, there are some scenarios in which two documents may have the same piece of text but different metadata, and that's a valid case. Deduplication should be done outside of insertion.\r\n\r\nIt has been fixed and covered with the integration tests.\r\n\r\n## Who can review?\r\n\r\n@dev2049 @hwchase17",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5515/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5515/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5514",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5514/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5514/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5514/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5514",
        "id": 1734592119,
        "node_id": "PR_kwDOIPDwls5Rz0y-",
        "number": 5514,
        "title": "Reference OpenAIEmbeddings client attr as private",
        "user": {
            "login": "ninjapenguin",
            "id": 38786,
            "node_id": "MDQ6VXNlcjM4Nzg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ninjapenguin",
            "html_url": "https://github.com/ninjapenguin",
            "followers_url": "https://api.github.com/users/ninjapenguin/followers",
            "following_url": "https://api.github.com/users/ninjapenguin/following{/other_user}",
            "gists_url": "https://api.github.com/users/ninjapenguin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ninjapenguin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ninjapenguin/subscriptions",
            "organizations_url": "https://api.github.com/users/ninjapenguin/orgs",
            "repos_url": "https://api.github.com/users/ninjapenguin/repos",
            "events_url": "https://api.github.com/users/ninjapenguin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ninjapenguin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5541141061,
                "node_id": "LA_kwDOIPDwls8AAAABSkcaRQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20embeddings",
                "name": "area: embeddings",
                "color": "C5DEF5",
                "default": false,
                "description": "Related to text embedding models module"
            },
            {
                "id": 5680700839,
                "node_id": "LA_kwDOIPDwls8AAAABUpidpw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:bug",
                "name": "auto:bug",
                "color": "E99695",
                "default": false,
                "description": "Related to a bug, vulnerability, unexpected error with an existing feature"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2023-05-31T16:30:40Z",
        "updated_at": "2023-11-07T04:20:42Z",
        "closed_at": "2023-11-07T04:20:42Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5514",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5514",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5514.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5514.patch",
            "merged_at": null
        },
        "body": "Reference OpenAIEmbeddings client attr as private\r\n\r\nWhen utilising Pylance it is currently unable to manage interpretation of the `client` attribute within `OpenAIEmbeddings` as private. This results in the following errors being displayed:\r\n\r\n![Screenshot 2023-05-31 at 17 19 34](https://github.com/hwchase17/langchain/assets/38786/bb19e39a-2abd-471b-afd0-b3568913bd44)\r\n\r\nAdditionally newer versions of `mypy` also identify this issue:\r\n\r\n`tests/integration_tests/embeddings/test_openai.py:11: error: Missing named argument \"client\" for \"OpenAIEmbeddings\"  [call-arg]`\r\n\r\nOne minor note is that I've include a property setter to preserve any access patterns for `OpenAIEmbeddings.client`\r\n\r\n/cc @hwchase17 - project lead\r\n/cc @agola11 - Models \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5514/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5514/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5513",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5513/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5513/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5513/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5513",
        "id": 1734577939,
        "node_id": "I_kwDOIPDwls5nY48T",
        "number": 5513,
        "title": "Flan-t5-xxl doesnot work with openapi_agent",
        "user": {
            "login": "kiranalii",
            "id": 22620201,
            "node_id": "MDQ6VXNlcjIyNjIwMjAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/22620201?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kiranalii",
            "html_url": "https://github.com/kiranalii",
            "followers_url": "https://api.github.com/users/kiranalii/followers",
            "following_url": "https://api.github.com/users/kiranalii/following{/other_user}",
            "gists_url": "https://api.github.com/users/kiranalii/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kiranalii/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kiranalii/subscriptions",
            "organizations_url": "https://api.github.com/users/kiranalii/orgs",
            "repos_url": "https://api.github.com/users/kiranalii/repos",
            "events_url": "https://api.github.com/users/kiranalii/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kiranalii/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-05-31T16:21:02Z",
        "updated_at": "2023-10-19T16:07:59Z",
        "closed_at": "2023-10-19T16:07:58Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\r\n\r\nI have created a pipeline. And want to use the same pipeline in openapi_agent. When I run the following command:\r\n\r\nibm_agent = planner.create_openapi_agent(ibm_api_spec, requests_wrapper, hf_pipeline)\r\n\r\nI get error out of memory error. I'm using flan-t5-xxl llm, which consumes 22GB of memory. I have 18GB left.\r\n\r\n\r\n```\r\ntokenizer = AutoTokenizer.from_pretrained(\"google/flan-t5-xxl\")\r\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"google/flan-t5-xxl\", torch_dtype=torch.float16, device_map=\"auto\")\r\ninstruct_pipeline = pipeline(\"text2text-generation\", model=model, tokenizer=tokenizer,\r\n                             pad_token_id=tokenizer.eos_token_id,\r\n                             torch_dtype=torch.bfloat16, device='cuda:0', max_length=2000)\r\nhf_pipeline = HuggingFacePipeline(pipeline=instruct_pipeline)\r\nagent = planner.create_openapi_agent(api_spec, requests_wrapper, hf_pipeline)\r\nuser_query = \"query\"\r\nagent.run(user_query)\r\n```\r\n\r\nWhen i run code i get out following error\r\n\r\n```\r\n> Entering new AgentExecutor chain...\r\n\r\nAction: api_planner Action Input: api_planner(query) api_planner(query) api_controller(api_planner(query))\r\nTraceback (most recent call last):\r\n  File \"/home/kiran/dolly/agents.py\", line 79, in <module>\r\n    ibm_agent.run(user_query)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/base.py\", line 236, in run\r\n    return self(args[0], callbacks=callbacks)[self.output_keys[0]]\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/base.py\", line 140, in __call__\r\n    raise e\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/base.py\", line 134, in __call__\r\n    self._call(inputs, run_manager=run_manager)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/agents/agent.py\", line 953, in _call\r\n    next_step_output = self._take_next_step(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/agents/agent.py\", line 820, in _take_next_step\r\n    observation = tool.run(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/tools/base.py\", line 294, in run\r\n    raise e\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/tools/base.py\", line 266, in run\r\n    self._run(*tool_args, run_manager=run_manager, **tool_kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/tools/base.py\", line 409, in _run\r\n    self.func(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/base.py\", line 236, in run\r\n    return self(args[0], callbacks=callbacks)[self.output_keys[0]]\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/base.py\", line 140, in __call__\r\n    raise e\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/base.py\", line 134, in __call__\r\n    self._call(inputs, run_manager=run_manager)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/llm.py\", line 69, in _call\r\n    response = self.generate([inputs], run_manager=run_manager)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/chains/llm.py\", line 79, in generate\r\n    return self.llm.generate_prompt(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/llms/base.py\", line 134, in generate_prompt\r\n    return self.generate(prompt_strings, stop=stop, callbacks=callbacks)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/llms/base.py\", line 191, in generate\r\n    raise e\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/llms/base.py\", line 185, in generate\r\n    self._generate(prompts, stop=stop, run_manager=run_manager)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/llms/base.py\", line 436, in _generate\r\n    self._call(prompt, stop=stop, run_manager=run_manager)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/langchain/llms/huggingface_pipeline.py\", line 168, in _call\r\n    response = self.pipeline(prompt)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/pipelines/text2text_generation.py\", line 165, in __call__\r\n    result = super().__call__(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/pipelines/base.py\", line 1119, in __call__\r\n    return self.run_single(inputs, preprocess_params, forward_params, postprocess_params)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/pipelines/base.py\", line 1126, in run_single\r\n    model_outputs = self.forward(model_inputs, **forward_params)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/pipelines/base.py\", line 1025, in forward\r\n    model_outputs = self._forward(model_inputs, **forward_params)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/pipelines/text2text_generation.py\", line 187, in _forward\r\n    output_ids = self.model.generate(**model_inputs, **generate_kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/torch/utils/_contextlib.py\", line 115, in decorate_context\r\n    return func(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/generation/utils.py\", line 1322, in generate\r\n    model_kwargs = self._prepare_encoder_decoder_kwargs_for_generation(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/generation/utils.py\", line 638, in _prepare_encoder_decoder_kwargs_for_generation\r\n    model_kwargs[\"encoder_outputs\"]: ModelOutput = encoder(**encoder_kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1501, in _call_impl\r\n    return forward_call(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/accelerate/hooks.py\", line 165, in new_forward\r\n    output = old_forward(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py\", line 1086, in forward\r\n    layer_outputs = layer_module(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1501, in _call_impl\r\n    return forward_call(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/accelerate/hooks.py\", line 165, in new_forward\r\n    output = old_forward(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py\", line 693, in forward\r\n    self_attention_outputs = self.layer[0](\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1501, in _call_impl\r\n    return forward_call(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/accelerate/hooks.py\", line 165, in new_forward\r\n    output = old_forward(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py\", line 600, in forward\r\n    attention_output = self.SelfAttention(\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1501, in _call_impl\r\n    return forward_call(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/accelerate/hooks.py\", line 165, in new_forward\r\n    output = old_forward(*args, **kwargs)\r\n  File \"/home/kiran/dolly/venv/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py\", line 530, in forward\r\n    scores = torch.matmul(\r\ntorch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 28.28 GiB (GPU 0; 39.43 GiB total capacity; 25.09 GiB already allocated; 13.13 GiB free; 25.12 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5513/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5513/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5512",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5512/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5512/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5512/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5512",
        "id": 1734551787,
        "node_id": "PR_kwDOIPDwls5Rzr9Y",
        "number": 5512,
        "title": "add allow_download as class attribute for GPT4All",
        "user": {
            "login": "Vokturz",
            "id": 21696514,
            "node_id": "MDQ6VXNlcjIxNjk2NTE0",
            "avatar_url": "https://avatars.githubusercontent.com/u/21696514?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Vokturz",
            "html_url": "https://github.com/Vokturz",
            "followers_url": "https://api.github.com/users/Vokturz/followers",
            "following_url": "https://api.github.com/users/Vokturz/following{/other_user}",
            "gists_url": "https://api.github.com/users/Vokturz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Vokturz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Vokturz/subscriptions",
            "organizations_url": "https://api.github.com/users/Vokturz/orgs",
            "repos_url": "https://api.github.com/users/Vokturz/repos",
            "events_url": "https://api.github.com/users/Vokturz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Vokturz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-31T16:05:21Z",
        "updated_at": "2023-05-31T20:32:32Z",
        "closed_at": "2023-05-31T20:32:31Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5512",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5512",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5512.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5512.patch",
            "merged_at": "2023-05-31T20:32:31Z"
        },
        "body": "# Added support for download GPT4All model if does not exist\r\n\r\nI've include the class attribute `allow_download` to the GPT4All class. By default, `allow_download` is set to False.\r\n\r\n## Changes Made\r\n- Added a new class attribute, `allow_download`, to the GPT4All class.\r\n- Updated the `validate_environment` method to pass the `allow_download` parameter to the GPT4All model constructor.\r\n\r\n## Context\r\nThis change provides more control over model downloading in the GPT4All class. Previously, if the model file was not found in the cache directory `~/.cache/gpt4all/`, the package returned error \"Failed to retrieve model (type=value_error)\". Now, if `allow_download` is set as True then it will use GPT4All package to download it . With the addition of the `allow_download` attribute, users can now choose whether the wrapper is allowed to download the model or not.\r\n\r\n## Dependencies\r\nThere are no new dependencies introduced by this change. It only utilizes existing functionality provided by the GPT4All package.\r\n\r\n## Testing\r\nSince this is a minor change to the existing behavior, the existing test suite for the GPT4All package should cover this scenario\r\n\r\n## Reviewers\r\n - @hwchase17\r\n - @agola11",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5512/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5512/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5511",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5511/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5511/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5511/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5511",
        "id": 1734540520,
        "node_id": "I_kwDOIPDwls5nYvzo",
        "number": 5511,
        "title": "Automatically detect input_variables from PromptTemplate string",
        "user": {
            "login": "adivekar-utexas",
            "id": 71379271,
            "node_id": "MDQ6VXNlcjcxMzc5Mjcx",
            "avatar_url": "https://avatars.githubusercontent.com/u/71379271?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/adivekar-utexas",
            "html_url": "https://github.com/adivekar-utexas",
            "followers_url": "https://api.github.com/users/adivekar-utexas/followers",
            "following_url": "https://api.github.com/users/adivekar-utexas/following{/other_user}",
            "gists_url": "https://api.github.com/users/adivekar-utexas/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/adivekar-utexas/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/adivekar-utexas/subscriptions",
            "organizations_url": "https://api.github.com/users/adivekar-utexas/orgs",
            "repos_url": "https://api.github.com/users/adivekar-utexas/repos",
            "events_url": "https://api.github.com/users/adivekar-utexas/events{/privacy}",
            "received_events_url": "https://api.github.com/users/adivekar-utexas/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-31T15:59:04Z",
        "updated_at": "2023-09-18T16:09:45Z",
        "closed_at": "2023-09-18T16:09:44Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nIf input_variables is not passed, try to detect them automatically as those which are surrounded by curly braces:\r\n\r\nE.g. \r\n```\r\nprompt_template = PromptTemplate(template=\"What is the price of {product_name}?\")  ## Automatically detects the input_variables to be ['product_name']\r\n```\r\n\r\n\n\n### Motivation\n\nThis has been bugging me for a while and makes it more cumbersome.\n\n### Your contribution\n\nYou can use the code mentioned below, it's literally that simple (at least for f-strings). \r\n\r\nI can submit a PR.\r\n\r\n\r\n```\r\ndef str_format_args(x: str, named_only: bool = True) -> List[str]:\r\n    ## Ref: https://stackoverflow.com/a/46161774/4900327\r\n    args: List[str] = [\r\n        str(tup[1]) for tup in string.Formatter().parse(x)\r\n        if tup[1] is not None\r\n    ]\r\n    if named_only:\r\n        args: List[str] = [\r\n            arg for arg in args\r\n            if not arg.isdigit() and len(arg) > 0\r\n        ]\r\n    return args\r\n\r\n\r\nstr_format_args(\"What is the price of {product_name}?\")  ## Returns ['product_name']\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5511/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5511/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5508",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5508/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5508/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5508/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5508",
        "id": 1734515334,
        "node_id": "I_kwDOIPDwls5nYpqG",
        "number": 5508,
        "title": "ConversationalRetrievalChain new_question only from the question_generator only for retrieval and not for combine_docs_chain",
        "user": {
            "login": "lucasiscovici",
            "id": 15991202,
            "node_id": "MDQ6VXNlcjE1OTkxMjAy",
            "avatar_url": "https://avatars.githubusercontent.com/u/15991202?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lucasiscovici",
            "html_url": "https://github.com/lucasiscovici",
            "followers_url": "https://api.github.com/users/lucasiscovici/followers",
            "following_url": "https://api.github.com/users/lucasiscovici/following{/other_user}",
            "gists_url": "https://api.github.com/users/lucasiscovici/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lucasiscovici/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lucasiscovici/subscriptions",
            "organizations_url": "https://api.github.com/users/lucasiscovici/orgs",
            "repos_url": "https://api.github.com/users/lucasiscovici/repos",
            "events_url": "https://api.github.com/users/lucasiscovici/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lucasiscovici/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-31T15:43:29Z",
        "updated_at": "2023-06-12T13:21:03Z",
        "closed_at": "2023-06-12T13:21:03Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Discussed in https://github.com/hwchase17/langchain/discussions/5499\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **lucasiscovici** May 31, 2023</sup>\r\nHello and thank you for this amazing library.\r\n\r\nHere we : \r\n- get question\r\n- get new_question with the question_generator\r\n- retrieve docs with _get_docs and the new_question\r\n- call the combine_docs_chain with the new_question and the docs\r\n\r\n1/ It's possible to allow to call the question_generator event if the chat_history_str is empty ? \r\ni have to transform the question to search query to call the search engine even if the chat history is empty\r\n\r\n2/ It's possible to not use the new_question in the combine_docs_chain call ?\r\ni need the true question and not the new question (the search query) to call the llm for the qa\r\n\r\nThanks in advance\r\n\r\n```python\r\n    def _call(\r\n        self,\r\n        inputs: Dict[str, Any],\r\n        run_manager: Optional[CallbackManagerForChainRun] = None,\r\n    ) -> Dict[str, Any]:\r\n        _run_manager = run_manager or CallbackManagerForChainRun.get_noop_manager()\r\n        question = inputs[\"question\"]\r\n        get_chat_history = self.get_chat_history or _get_chat_history\r\n        chat_history_str = get_chat_history(inputs[\"chat_history\"])\r\n\r\n        if chat_history_str:\r\n            callbacks = _run_manager.get_child()\r\n            new_question = self.question_generator.run(\r\n                question=question, chat_history=chat_history_str, callbacks=callbacks\r\n            )\r\n        else:\r\n            new_question = question\r\n        docs = self._get_docs(new_question, inputs)\r\n        new_inputs = inputs.copy()\r\n        new_inputs[\"question\"] = new_question\r\n        new_inputs[\"chat_history\"] = chat_history_str\r\n        answer = self.combine_docs_chain.run(\r\n            input_documents=docs, callbacks=_run_manager.get_child(), **new_inputs\r\n        )\r\n        if self.return_source_documents:\r\n            return {self.output_key: answer, \"source_documents\": docs}\r\n        else:\r\n            return {self.output_key: answer}\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5508/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5508/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5507",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5507/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5507/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5507/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5507",
        "id": 1734505271,
        "node_id": "PR_kwDOIPDwls5Rzh01",
        "number": 5507,
        "title": "Add Managed Motorhead",
        "user": {
            "login": "softboyjimbo",
            "id": 100361543,
            "node_id": "U_kgDOBftlRw",
            "avatar_url": "https://avatars.githubusercontent.com/u/100361543?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/softboyjimbo",
            "html_url": "https://github.com/softboyjimbo",
            "followers_url": "https://api.github.com/users/softboyjimbo/followers",
            "following_url": "https://api.github.com/users/softboyjimbo/following{/other_user}",
            "gists_url": "https://api.github.com/users/softboyjimbo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/softboyjimbo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/softboyjimbo/subscriptions",
            "organizations_url": "https://api.github.com/users/softboyjimbo/orgs",
            "repos_url": "https://api.github.com/users/softboyjimbo/repos",
            "events_url": "https://api.github.com/users/softboyjimbo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/softboyjimbo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4899126096,
                "node_id": "LA_kwDOIPDwls8AAAABJAK7UA",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20memory",
                "name": "area: memory",
                "color": "BFDADC",
                "default": false,
                "description": "Related to memory module"
            },
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-31T15:37:27Z",
        "updated_at": "2023-05-31T21:55:41Z",
        "closed_at": "2023-05-31T21:55:41Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5507",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5507",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5507.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5507.patch",
            "merged_at": "2023-05-31T21:55:41Z"
        },
        "body": "# Add Managed Motorhead\r\nThis change enabled MotorheadMemory to utilize Metal's managed version of Motorhead. We can easily enable this by passing in a `api_key` and `client_id` in order to hit the managed url and access the memory api on Metal.\r\n\r\nTwitter: [@softboyjimbo](https://twitter.com/softboyjimbo)\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n @dev2049 @hwchase17 \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5507/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5507/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    }
]
[
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6687",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6687/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6687/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6687/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6687",
        "id": 1785057149,
        "node_id": "I_kwDOIWuq585qZc99",
        "number": 6687,
        "title": "[Question]: Best way to copy a normal VectorStoreIndex into a ChromaDB.",
        "user": {
            "login": "RobertHH-IS",
            "id": 53995861,
            "node_id": "MDQ6VXNlcjUzOTk1ODYx",
            "avatar_url": "https://avatars.githubusercontent.com/u/53995861?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RobertHH-IS",
            "html_url": "https://github.com/RobertHH-IS",
            "followers_url": "https://api.github.com/users/RobertHH-IS/followers",
            "following_url": "https://api.github.com/users/RobertHH-IS/following{/other_user}",
            "gists_url": "https://api.github.com/users/RobertHH-IS/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RobertHH-IS/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RobertHH-IS/subscriptions",
            "organizations_url": "https://api.github.com/users/RobertHH-IS/orgs",
            "repos_url": "https://api.github.com/users/RobertHH-IS/repos",
            "events_url": "https://api.github.com/users/RobertHH-IS/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RobertHH-IS/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-03T00:28:15Z",
        "updated_at": "2023-07-03T10:34:02Z",
        "closed_at": "2023-07-03T10:34:02Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [X] I have searched both the documentation and discord for an answer.\n\n### Question\n\nI stored a huge amount of data into a VectorStoreIndex which I persist and load.  They are stored as docstore, list, and vector indexes.  How can I transfer this data into Chroma for instance?  There does not seem to be a simple way to either transfer or query the nodes + embeddings one by one to transfer it over - or am I missing something obvious?  \r\n\r\nThe example using from_vector_store does not work and errors out for me.\r\nhttps://gpt-index.readthedocs.io/en/latest/examples/vector_stores/ChromaIndexDemo.html#",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6687/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6687/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6686",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6686/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6686/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6686/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6686",
        "id": 1785045348,
        "node_id": "I_kwDOIWuq585qZaFk",
        "number": 6686,
        "title": "[Bug]: from_vector_store function not working?",
        "user": {
            "login": "RobertHH-IS",
            "id": 53995861,
            "node_id": "MDQ6VXNlcjUzOTk1ODYx",
            "avatar_url": "https://avatars.githubusercontent.com/u/53995861?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RobertHH-IS",
            "html_url": "https://github.com/RobertHH-IS",
            "followers_url": "https://api.github.com/users/RobertHH-IS/followers",
            "following_url": "https://api.github.com/users/RobertHH-IS/following{/other_user}",
            "gists_url": "https://api.github.com/users/RobertHH-IS/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RobertHH-IS/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RobertHH-IS/subscriptions",
            "organizations_url": "https://api.github.com/users/RobertHH-IS/orgs",
            "repos_url": "https://api.github.com/users/RobertHH-IS/repos",
            "events_url": "https://api.github.com/users/RobertHH-IS/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RobertHH-IS/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-03T00:13:03Z",
        "updated_at": "2023-07-13T22:07:05Z",
        "closed_at": "2023-07-13T22:07:05Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nIf i create a basic vectorstore as index.  And then try and create another vector store from that vector store, I always get error.  Even directions direct from website do not work.\r\n\r\n\r\n\n\n### Version\n\n0.6.38.post1\n\n### Steps to Reproduce\n\n```\r\nfrom llama_index import SimpleDirectoryReader\r\nfrom llama_index import VectorStoreIndex\r\n\r\ndocuments = SimpleDirectoryReader('./sample_data').load_data()\r\n\r\nindex = VectorStoreIndex.from_documents(documents)\r\ndb2 = chromadb.Client()\r\nchroma_collection = db2.get_or_create_collection(\"quickstart\")\r\nvector_store = ChromaVectorStore(chroma_collection=chroma_collection)\r\nstorage_context = StorageContext.from_defaults(vector_store=vector_store)\r\nchrome = VectorStoreIndex.from_vector_store(vector_store= index, storage_context=storage_context)\r\n```\n\n### Relevant Logs/Tracbacks\n\n```shell\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n[<ipython-input-31-f4969fa1dbb5>](https://localhost:8080/#) in <cell line: 13>()\r\n     11 vector_store = ChromaVectorStore(chroma_collection=chroma_collection)\r\n     12 storage_context = StorageContext.from_defaults(vector_store=vector_store)\r\n---> 13 chrome = VectorStoreIndex.from_vector_store(vector_store= index, storage_context=storage_context)\r\n\r\n[/usr/local/lib/python3.10/dist-packages/llama_index/indices/vector_store/base.py](https://localhost:8080/#) in from_vector_store(cls, vector_store, service_context, **kwargs)\r\n     58         **kwargs: Any,\r\n     59     ) -> \"VectorStoreIndex\":\r\n---> 60         if not vector_store.stores_text:\r\n     61             raise ValueError(\r\n     62                 \"Cannot initialize from a vector store that does not store text.\"\r\n\r\nAttributeError: 'VectorStoreIndex' object has no attribute 'stores_text'\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6686/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6686/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6685",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6685/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6685/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6685/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6685",
        "id": 1785001990,
        "node_id": "PR_kwDOIWuq585UdqVR",
        "number": 6685,
        "title": "Hook up new LLM abstraction to LLMPredictor",
        "user": {
            "login": "Disiok",
            "id": 5567282,
            "node_id": "MDQ6VXNlcjU1NjcyODI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567282?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Disiok",
            "html_url": "https://github.com/Disiok",
            "followers_url": "https://api.github.com/users/Disiok/followers",
            "following_url": "https://api.github.com/users/Disiok/following{/other_user}",
            "gists_url": "https://api.github.com/users/Disiok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Disiok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Disiok/subscriptions",
            "organizations_url": "https://api.github.com/users/Disiok/orgs",
            "repos_url": "https://api.github.com/users/Disiok/repos",
            "events_url": "https://api.github.com/users/Disiok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Disiok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-02T23:06:37Z",
        "updated_at": "2023-07-02T23:31:28Z",
        "closed_at": "2023-07-02T23:31:28Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6685",
            "html_url": "https://github.com/run-llama/llama_index/pull/6685",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6685.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6685.patch",
            "merged_at": "2023-07-02T23:31:27Z"
        },
        "body": "### Summary\r\n* Refactor LLMPredictor to support generic `LLM`, and use `OpenAI` by default \r\n\r\n### More Details\r\n* Refactor `LLMPredictor`\r\n  * move langchain LLM specific logic into `LangChainLLM`\r\n  * remove deprecated token counting logic \r\n  * keeping only generic callback and prompt formatting logic. \r\n* (minor) simplify `BaseLLMPredictor.predict` interface to return only response string. \r\n\r\n### Breaking changes\r\n* remove `llm_token_counter` decorator\r\n> Note: we cleaned up `_total_tokens_used` in `LLMPredictor`, so can't support this hack anymore. \r\n* remove `ChatGPTLLMPredictor` and `HuggingFacePredictor`\r\n* remove support for setting `cache` via `LLMPredictor` constructor.\r\n\r\n### Todos\r\n- [x] Add migration guide\r\n- [x] Update LLM related docs",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6685/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6685/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6684",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6684/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6684/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6684/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6684",
        "id": 1784812104,
        "node_id": "PR_kwDOIWuq585Uc-4C",
        "number": 6684,
        "title": "Fix bug in generic chat message to openai message dict conversion ",
        "user": {
            "login": "Disiok",
            "id": 5567282,
            "node_id": "MDQ6VXNlcjU1NjcyODI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567282?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Disiok",
            "html_url": "https://github.com/Disiok",
            "followers_url": "https://api.github.com/users/Disiok/followers",
            "following_url": "https://api.github.com/users/Disiok/following{/other_user}",
            "gists_url": "https://api.github.com/users/Disiok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Disiok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Disiok/subscriptions",
            "organizations_url": "https://api.github.com/users/Disiok/orgs",
            "repos_url": "https://api.github.com/users/Disiok/repos",
            "events_url": "https://api.github.com/users/Disiok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Disiok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-02T19:47:49Z",
        "updated_at": "2023-07-02T20:35:16Z",
        "closed_at": "2023-07-02T20:35:15Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6684",
            "html_url": "https://github.com/run-llama/llama_index/pull/6684",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6684.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6684.patch",
            "merged_at": "2023-07-02T20:35:15Z"
        },
        "body": "# Description\r\n\r\nFix bug in generic chat message to openai message dict conversion where additional kwargs was missing.\r\nAdded unit tests. \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6684/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6684/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6683",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6683/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6683/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6683/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6683",
        "id": 1784684451,
        "node_id": "PR_kwDOIWuq585Ucj8c",
        "number": 6683,
        "title": "[Added] Dictionary Reader",
        "user": {
            "login": "tracencode",
            "id": 82143120,
            "node_id": "MDQ6VXNlcjgyMTQzMTIw",
            "avatar_url": "https://avatars.githubusercontent.com/u/82143120?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tracencode",
            "html_url": "https://github.com/tracencode",
            "followers_url": "https://api.github.com/users/tracencode/followers",
            "following_url": "https://api.github.com/users/tracencode/following{/other_user}",
            "gists_url": "https://api.github.com/users/tracencode/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tracencode/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tracencode/subscriptions",
            "organizations_url": "https://api.github.com/users/tracencode/orgs",
            "repos_url": "https://api.github.com/users/tracencode/repos",
            "events_url": "https://api.github.com/users/tracencode/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tracencode/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-07-02T15:11:01Z",
        "updated_at": "2023-07-04T06:16:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6683",
            "html_url": "https://github.com/run-llama/llama_index/pull/6683",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6683.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6683.patch",
            "merged_at": null
        },
        "body": "The DictReader class has been added to the llama_index module. This class provides a reader implementation for processing data in the form of a Python dictionary. It converts the dictionary into a JSON string representation, filters out unnecessary lines, and returns a list of Document objects containing the useful lines.\r\n\r\nThe DictReader class is designed to work as part of the llama_index framework and follows the same interface as other reader classes. It can be used to load data from a dictionary source and generate documents for indexing or further processing.\r\n\r\nThis commit introduces the **DictReader** class to enhance the functionality of the llama_index module, allowing users to process data in the form of Python dictionaries efficiently.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6683/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6683/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6682",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6682/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6682/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6682/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6682",
        "id": 1784537832,
        "node_id": "PR_kwDOIWuq585UcGI7",
        "number": 6682,
        "title": "[wip] add recursive retriever + notebook example",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-02T09:01:26Z",
        "updated_at": "2023-07-05T08:57:35Z",
        "closed_at": "2023-07-05T08:57:34Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6682",
            "html_url": "https://github.com/run-llama/llama_index/pull/6682",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6682.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6682.patch",
            "merged_at": "2023-07-05T08:57:34Z"
        },
        "body": "modified version of composable graph query engine that's an easier UX for users to \"chain\" query engines together through node relationships \r\n\r\nin this example:\r\n- retriever query engine at top-level\r\n- if a retrieved node is an index node, reference another query engine and execute that first, then return result as node text ",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6682/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6682/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6681",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6681/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6681/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6681/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6681",
        "id": 1784530110,
        "node_id": "PR_kwDOIWuq585UcEce",
        "number": 6681,
        "title": "add evaporate program to changelog",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-02T08:50:16Z",
        "updated_at": "2023-07-03T00:17:34Z",
        "closed_at": "2023-07-03T00:17:33Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6681",
            "html_url": "https://github.com/run-llama/llama_index/pull/6681",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6681.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6681.patch",
            "merged_at": "2023-07-03T00:17:33Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6681/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6681/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6680",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6680/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6680/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6680/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6680",
        "id": 1784516574,
        "node_id": "PR_kwDOIWuq585UcB3p",
        "number": 6680,
        "title": "[version] bump version to 0.6.38",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-02T08:08:40Z",
        "updated_at": "2023-07-02T08:48:56Z",
        "closed_at": "2023-07-02T08:48:55Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6680",
            "html_url": "https://github.com/run-llama/llama_index/pull/6680",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6680.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6680.patch",
            "merged_at": "2023-07-02T08:48:55Z"
        },
        "body": "bumping to post1 since i accidentally already created the 0.6.38 release ",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6680/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6680/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6679",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6679/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6679/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6679/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6679",
        "id": 1784492727,
        "node_id": "PR_kwDOIWuq585Ub9PW",
        "number": 6679,
        "title": "Hook up new LLM abstraction with agents and programs",
        "user": {
            "login": "Disiok",
            "id": 5567282,
            "node_id": "MDQ6VXNlcjU1NjcyODI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567282?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Disiok",
            "html_url": "https://github.com/Disiok",
            "followers_url": "https://api.github.com/users/Disiok/followers",
            "following_url": "https://api.github.com/users/Disiok/following{/other_user}",
            "gists_url": "https://api.github.com/users/Disiok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Disiok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Disiok/subscriptions",
            "organizations_url": "https://api.github.com/users/Disiok/orgs",
            "repos_url": "https://api.github.com/users/Disiok/repos",
            "events_url": "https://api.github.com/users/Disiok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Disiok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-02T06:57:49Z",
        "updated_at": "2023-07-02T21:49:19Z",
        "closed_at": "2023-07-02T21:49:18Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6679",
            "html_url": "https://github.com/run-llama/llama_index/pull/6679",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6679.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6679.patch",
            "merged_at": "2023-07-02T21:49:18Z"
        },
        "body": "# Description\r\n\r\nHook up new LLM abstraction with agents and programs\r\nUpdate notebooks, docs, and change log. \r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6679/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6679/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6678",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6678/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6678/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6678/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6678",
        "id": 1784146881,
        "node_id": "PR_kwDOIWuq585Uaxjw",
        "number": 6678,
        "title": "store node content in redis",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-01T18:44:54Z",
        "updated_at": "2023-07-01T19:16:56Z",
        "closed_at": "2023-07-01T19:16:55Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6678",
            "html_url": "https://github.com/run-llama/llama_index/pull/6678",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6678.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6678.patch",
            "merged_at": "2023-07-01T19:16:55Z"
        },
        "body": "# Description\r\n\r\nRedis wasn't storing/recovering metadata properly. Now that nodes can be serialized, this fix ensures the entire node is also retrieved (including metadata!)\r\n\r\nFixes https://github.com/jerryjliu/llama_index/pull/6619\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] Tested with old/new versions, tested for backward compat\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6678/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6678/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6677",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6677/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6677/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6677/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6677",
        "id": 1784118501,
        "node_id": "PR_kwDOIWuq585UarZ3",
        "number": 6677,
        "title": "fix doc_id vs node_id filtering for vector stores",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-01T17:51:03Z",
        "updated_at": "2023-08-28T17:10:39Z",
        "closed_at": "2023-07-01T19:12:41Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6677",
            "html_url": "https://github.com/run-llama/llama_index/pull/6677",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6677.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6677.patch",
            "merged_at": "2023-07-01T19:12:41Z"
        },
        "body": "# Description\r\n\r\nThe `VectorStoreRetriever` has a `doc_ids` parameter. Some vector stores were using this to filter node_ids, and others to filter doc_ids (likely due to how the naming worked in past version of llama-index).\r\n\r\nThis PR clarifies the retriever, and fixes what is actually being filtered in vector stores. Now, you can filter by doc_id or node_id\r\n\r\nFixes https://github.com/jerryjliu/llama_index/pull/6619\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6677/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6677/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6676",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6676/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6676/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6676/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6676",
        "id": 1783623125,
        "node_id": "I_kwDOIWuq585qT-3V",
        "number": 6676,
        "title": "[Question]: Design Pattern: Retrieval-Based Feature Bootstrapping",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-01T07:26:07Z",
        "updated_at": "2023-10-12T16:04:37Z",
        "closed_at": "2023-10-12T16:04:36Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Question Validation\r\n\r\n- [X] I have searched both the documentation and discord for an answer.\r\n\r\n### Question\r\n\r\nThe idea for this patttern is that to extract global features, it makes sense to first index the entire document without the relevant features, enrich the document with new features via retrieval, and then reembed the enriched document into a new index. This can proceed for K iterations to yield successively more enriched documents, usually with K=1.\r\n\r\nThis is related to the pattern of refinement (i.e. chains).\r\n\r\nFor global features, methods such as HyDE may be beneficial.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6676/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6676/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6675",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6675/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6675/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6675/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6675",
        "id": 1783619047,
        "node_id": "I_kwDOIWuq585qT93n",
        "number": 6675,
        "title": "[Tracking]: Domain-Specific Document Feature Augmentation",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-01T07:20:13Z",
        "updated_at": "2023-10-17T16:04:25Z",
        "closed_at": "2023-10-17T16:04:24Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nThis issue tracks Domain-Specific Document Feature Augmentation.\r\n- [ ] Codebase: https://github.com/jerryjliu/llama_index/issues/6674\r\n- [x] Long-document optimized: https://github.com/jerryjliu/llama_index/pull/6764\r\n- [ ] Image: https://github.com/jerryjliu/llama_index/issues/6838\r\n\r\nMisc: \r\nDesign Patterns\r\n1. https://github.com/jerryjliu/llama_index/issues/6676\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6675/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6675/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6674",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6674/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6674/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6674/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6674",
        "id": 1783617207,
        "node_id": "I_kwDOIWuq585qT9a3",
        "number": 6674,
        "title": "[Feature Request]: Codebase Feature Augmentation",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-01T07:16:31Z",
        "updated_at": "2023-10-07T16:02:59Z",
        "closed_at": "2023-10-07T16:02:58Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nAlthough somewhat specialized for code QnA, here are some options. \r\n\r\nThe general approach is auto-documentation in a bottom up recursive approach. Top down approaches such as dir structure and repo markdown is also used.\r\n\r\nFuture work can utilize code analysis tools. With these augmentations, we believe that it would be possible to recursively build up a semantic picture (and index) of the codebase. We will make use of documentation as well in bootstrap phase.\r\n\r\n### Basic\r\n1. Summarize each document. Extract key functions and structs/objects.\r\n2. Add this to metadata of each file.\r\n\r\n### Bootstrapped (via index v1)\r\nEmbed into index v1. Using index v1, build up a picture of the semantic relationships. Add this information to the metadata of each file. Now, we embed in index v2. Repeat to satisfaction.\r\n\r\nSee: https://github.com/jerryjliu/llama_index/issues/6676\r\n\r\n### Options\r\n- Combine keyword with semantic search? Code domain is very constrained, so keyword search is likely to yield great results.\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6674/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6674/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6673",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6673/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6673/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6673/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6673",
        "id": 1783529828,
        "node_id": "I_kwDOIWuq585qToFk",
        "number": 6673,
        "title": "[Feature Request]: Human-In-The-Loop Multistep Query",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-07-01T05:23:26Z",
        "updated_at": "2023-10-26T17:09:11Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nAs a basic implementation of https://github.com/jerryjliu/llama_index/issues/6671, let's implement a simpler alternative requiring less engineering to work well - human in the loop multistep query.\r\n\r\nBasic paradigm and rationale:\r\n1. LLM response takes a long time >> network latency / button clicking\r\n2. From UX perspective, humans like recommendations, but to retain control. Humans also do not like to wait for a long time for a process over which they have no control, especially when it goes awry.\r\n\r\nThis suggests query engine which prompts the user to select from competing query plans (if there is ambiguity) and to provide early feedback and corrections before a long, autonomous multi-step query is commited to.\r\n\r\nSee also: https://github.com/jerryjliu/llama_index/issues/6644 which requests more observability into query plan.\r\n\r\nImplementation:\r\n1. State is held somewhere for ongoing query. Similar to conversational buffer.\r\n2. Execute based on follow up inputs.\r\n3. Define clear action space and basic prompt engineering.\r\n\r\nUI possibilities:\r\n```python\r\nHere is my proposed query plan.\r\n[Continue, Edit Plan, Run All, Generate More Options]\r\n\r\nI will now perform ___ step. \r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n```\r\n\r\nMore detailed example:\r\n```python\r\n\"What are the number layoffs in 2023 for big tech companies compared with their total headcount?\"\r\n\r\n\"Here is my proposed query plan.\"\r\n\"1. Search the web for number of layoffs in 2023 for big tech\"\r\n\"2. Search the web for headcount in 2023 for big tech\"\r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n-> continue\r\n\r\nOutput: \"I will now search the web for number of layoffs in 2023 for big tech\"\r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n-> continue\r\n\r\nOutput: \"Here are the layoffs for big tech: ...\"\r\n\"I will now search the web for headcount in 2023 for big tech\" \r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n-> edit\r\n\r\nOutput: \"I will now search the web for headcount in 2023 for the companies identified\" \r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n-> continue\r\n\r\nOutput:\r\n\"\"\"\r\nHere is my subquery plan:\r\n1. Generate query template for each entity in question.\r\n2. Query [Websearch] for each entity in question\r\n\"\"\"\r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n-> edit query plan\r\n\r\n\"\"\"\r\n1. Query [Websearch] for number of layoffs in 2023 for big tech\r\n\r\nIf there are headcounts that cannot be determined:\r\n1. Identify missing entities.\r\n2. Generate query template over entities.\r\n3. Query [Websearch] for the remainding entities in question\r\n\"\"\"\r\n[Continue, Edit Step, Run All, Generate More Options]\r\nAdvanced Options (Click to Expand): [Regenerate Remaining Plan, Edit Query Plan, Restart Query From Checkpoint]\r\n-> run all\r\n\r\nOutput:\r\n\"\"\"\r\n-> Using [Web Search]: Here are the headcounts for big tech for 2023: Nvidia - ...\r\n-> LLM eval: Here are the missing entities: Google, Amazon, Apple, ...\r\n-> Using template generation. Template: \"What was the headcount for {company_str} (company) in 2023?\"\r\n-> Applying template to the entities: [\"Google\", \"Amazon\", \"Apple\", \"Salesforce\", ...]\r\n  -> Result from [Web Search]: \"What was the headcount for Google (company) in 2023?\"\r\n  -> Result from [Web Search]: \"What was the headcount for Amazon (company) in 2023?\"\r\n  ...\r\n\"\"\"\r\n```\r\n\r\n### Caveats\r\n1. Not sure if this is veering to far into the realm of chatbots. However, I think it is in the domain of LlamaIndex - which is to provide a query layer over unstructured data for conversational interface.\r\n2. The particular UI above is extremely UI-specific.\r\n3. Furthermore, there are many questions about UX that are unclear. Some of the advanced features (like editing query plan) may not be friendly in some cases. There should be some tiering of the features.\r\n4. This is an \"advanced\" use-case that competes directly with proprietary tech for search etc perplexity, google, neeva, and also perhaps competing e.g. with Snowflake, Databricks, Elasticsearch - Enterprise search/data exploration use-case.\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6673/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6673/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6672",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6672/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6672/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6672/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6672",
        "id": 1783528885,
        "node_id": "PR_kwDOIWuq585UYnt_",
        "number": 6672,
        "title": "Add streaming response to openai agent",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-01T05:21:13Z",
        "updated_at": "2023-07-03T04:20:52Z",
        "closed_at": "2023-07-03T04:20:52Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6672",
            "html_url": "https://github.com/run-llama/llama_index/pull/6672",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6672.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6672.patch",
            "merged_at": null
        },
        "body": "# Description\r\n\r\nThis PR is an initial stab at adding `stream_chat` and `astream_chat` to our agents.\r\n\r\nSince agents can involve multiple steps, the idea here is to turn the streaming endpoints into generators of generators (i.e. a generator for each response).\r\n\r\nThis way, users can easily stream every step, or only the last step (as shown in the notebook)\r\n\r\nNOTE: this is based on the new LLM refactor\r\n\r\n## Type of Change\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] Added new notebook (that tests end-to-end)\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# TODO\r\n\r\n- [ ] confirm the best home for the `StreamingChatResponse` class\r\n- [ ] confirm this works for various backend usecases\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6672/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6672/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6671",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6671/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6671/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6671/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6671",
        "id": 1783506775,
        "node_id": "I_kwDOIWuq585qTidX",
        "number": 6671,
        "title": "[Feature Request]: Explore Tree-of-Thought as a Mechanism for Autonomous Data Exploration",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-07-01T04:48:24Z",
        "updated_at": "2023-10-07T16:03:04Z",
        "closed_at": "2023-10-07T16:03:04Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nMultistep queries are great. But they can pollute the context window and cause the query path to be prematurely commited to one strategy.\r\n\r\nAs a more general paradigm, multistep + subquestion + pruning dead branches = inference time tree-traversal.\r\n\r\nThe paradigm is very similar to MCTS (tree search) as performed by AlphaDev, AlphaZero etc. \r\n\r\nSee the repo: https://github.com/princeton-nlp/tree-of-thought-llm\r\n\r\nParallel langchain proposal: https://github.com/hwchase17/langchain/issues/4975\r\n\r\n### Caveat\r\n\r\n1. Perhaps better suited for https://github.com/run-llama/llama-lab?\r\n2. The action space available to the model needs to be well-designed and hand-engineered. But this is actually a big opportunity for LlamaIndex to provide value for IR-specific autonomous/agentic query engine. One of the actions should be: request feedback from user. Meaning that the model should generate possible query plans, and the user can select one or provide raw text feedback.\r\n3. The cost and complexity of running this system needs to be weighed against the use-case and measurable benefit. However, we have all encountered such queries which are intractable for a normal search engine or vector search due to the ambiguity involved, thus leading to the necessity of human intervention and thus toil, or poor results.\r\n   - As with many ML products, from a UX perspective, the possibility to provide an ML-aided (recommendations + human in the loop) system is IMO the best near-term path for this type of system.\r\n4. The outer loop of the query should be to learn which strategies tend to yield better results. This may be more possible when we have true AlphaZero-like architectures which are actually data-driven. \r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\nExperimental exploration of LLM/agent-driven query-time planning\r\n\r\nUse case: explore a complex topic across multiple sources and requiring iterative query refinement and subqueries. Possibly including web search.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6671/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6671/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6670",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6670/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6670/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6670/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6670",
        "id": 1783365500,
        "node_id": "PR_kwDOIWuq585UYCC4",
        "number": 6670,
        "title": "Add simple benchmark for vector store",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-01T02:30:58Z",
        "updated_at": "2023-07-01T16:37:39Z",
        "closed_at": "2023-07-01T16:37:38Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6670",
            "html_url": "https://github.com/run-llama/llama_index/pull/6670",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6670.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6670.patch",
            "merged_at": "2023-07-01T16:37:38Z"
        },
        "body": "# Description\r\n\r\nSimple benchmark. We can build upon it more in the future\r\n\r\nFixes https://github.com/jerryjliu/llama_index/issues/6650\r\n\r\n## Type of Change\r\nBenchmark\r\n\r\n- [X] I have performed a self-review of my own code\r\n\r\n\r\nResults:\r\n```\r\nAdding 10 vectors took 2.09808349609375e-05 seconds\r\nQuerying 10 vectors with default took 0.0024557113647460938 seconds\r\nQuerying 10 vectors with svm took 0.46998143196105957 seconds\r\nQuerying 10 vectors with mmr took 0.01450204849243164 seconds\r\nAdding 50 vectors took 8.678436279296875e-05 seconds\r\nQuerying 50 vectors with default took 0.01337122917175293 seconds\r\nQuerying 50 vectors with svm took 0.1316547393798828 seconds\r\nQuerying 50 vectors with mmr took 0.17320966720581055 seconds\r\nAdding 100 vectors took 0.00013446807861328125 seconds\r\nQuerying 100 vectors with default took 0.022982120513916016 seconds\r\nQuerying 100 vectors with svm took 0.18553996086120605 seconds\r\nQuerying 100 vectors with mmr took 0.2986278533935547 seconds\r\nAdding 500 vectors took 0.0006127357482910156 seconds\r\nQuerying 500 vectors with default took 0.11429142951965332 seconds\r\nQuerying 500 vectors with svm took 0.3728344440460205 seconds\r\nQuerying 500 vectors with mmr took 1.32682204246521 seconds\r\n```\r\n\r\nSo `SimpleVectorIndex` is quite fast. \r\n\r\nInterestingly, the default which does pairwise comparison is the fastest at these small scales.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6670/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6670/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6669",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6669/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6669/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6669/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6669",
        "id": 1783311545,
        "node_id": "PR_kwDOIWuq585UX2A8",
        "number": 6669,
        "title": "Fix broken links in docs",
        "user": {
            "login": "pycui",
            "id": 6148473,
            "node_id": "MDQ6VXNlcjYxNDg0NzM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6148473?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pycui",
            "html_url": "https://github.com/pycui",
            "followers_url": "https://api.github.com/users/pycui/followers",
            "following_url": "https://api.github.com/users/pycui/following{/other_user}",
            "gists_url": "https://api.github.com/users/pycui/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pycui/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pycui/subscriptions",
            "organizations_url": "https://api.github.com/users/pycui/orgs",
            "repos_url": "https://api.github.com/users/pycui/repos",
            "events_url": "https://api.github.com/users/pycui/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pycui/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-07-01T01:05:06Z",
        "updated_at": "2023-07-01T01:42:44Z",
        "closed_at": "2023-07-01T01:42:44Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6669",
            "html_url": "https://github.com/run-llama/llama_index/pull/6669",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6669.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6669.patch",
            "merged_at": "2023-07-01T01:42:44Z"
        },
        "body": "# Description\r\n\r\nWrote a simple broken link finder and found a few broken links. \r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [X] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\n- [X] Manual build docs and check\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [X ] I have performed a self-review of my own code\r\n- [ X] I have commented my code, particularly in hard-to-understand areas\r\n- [X ] I have made corresponding changes to the documentation\r\n- [ X] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ X] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6669/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6669/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6668",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6668/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6668/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6668/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6668",
        "id": 1783198564,
        "node_id": "PR_kwDOIWuq585UXdm_",
        "number": 6668,
        "title": "Response Builder/Synthesizer UX V2",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-30T21:49:47Z",
        "updated_at": "2023-07-04T01:06:42Z",
        "closed_at": "2023-07-04T01:06:41Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6668",
            "html_url": "https://github.com/run-llama/llama_index/pull/6668",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6668.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6668.patch",
            "merged_at": "2023-07-04T01:06:41Z"
        },
        "body": "# Description\r\n\r\nPR to remove `ResponseSynthesizer` in favor of directly using the older `Response Builders`\r\n\r\nCurrently, the naming is a little in flux - open to suggestions.\r\n\r\nJust need to update everything that used to call `ResponseSynthesizer` and it should be good to go\r\n\r\n## Type of Change\r\n\r\n- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [x] This change requires a documentation update\r\n\r\n## Todo:\r\n\r\n- [x] Confirm naming/usage\r\n- [x] Finish integrating into library\r\n- [x] Move optimizer to be node post-processor\r\n- [x] Update docs\r\n- [x] Update notebooks\r\n- [x] handle backwards compat? (EDIT: sounds like we should not worry about this)\r\n- [x] Fix tests\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6668/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6668/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6667",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6667/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6667/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6667/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6667",
        "id": 1783149396,
        "node_id": "PR_kwDOIWuq585UXS4u",
        "number": 6667,
        "title": "update milvus to store node content",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T20:47:33Z",
        "updated_at": "2023-08-28T17:10:37Z",
        "closed_at": "2023-07-01T01:50:39Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6667",
            "html_url": "https://github.com/run-llama/llama_index/pull/6667",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6667.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6667.patch",
            "merged_at": "2023-07-01T01:50:39Z"
        },
        "body": "# Description\r\n\r\nWith the new node changes, milvus can store and load the actual node objects now, therefore retaining metadata.\r\n\r\nFixes # (issue)\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] Tested locally with new and old milvus dbs\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6667/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6667/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6666",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6666/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6666/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6666/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6666",
        "id": 1783125400,
        "node_id": "PR_kwDOIWuq585UXNhu",
        "number": 6666,
        "title": "Evaporate pydantic program",
        "user": {
            "login": "hongyishi",
            "id": 7098202,
            "node_id": "MDQ6VXNlcjcwOTgyMDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7098202?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hongyishi",
            "html_url": "https://github.com/hongyishi",
            "followers_url": "https://api.github.com/users/hongyishi/followers",
            "following_url": "https://api.github.com/users/hongyishi/following{/other_user}",
            "gists_url": "https://api.github.com/users/hongyishi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hongyishi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hongyishi/subscriptions",
            "organizations_url": "https://api.github.com/users/hongyishi/orgs",
            "repos_url": "https://api.github.com/users/hongyishi/repos",
            "events_url": "https://api.github.com/users/hongyishi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hongyishi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T20:26:18Z",
        "updated_at": "2023-07-02T08:30:19Z",
        "closed_at": "2023-07-02T08:30:18Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6666",
            "html_url": "https://github.com/run-llama/llama_index/pull/6666",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6666.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6666.patch",
            "merged_at": "2023-07-02T08:30:18Z"
        },
        "body": "# Description\r\n\r\nWrapped the Evaporate Extractor in the Program interface. When you call the program you provide training data and inference data, and it calls the appropriate evaporate functions to do function synthesis and function calling. The actual pydantic program is just for dataframe output.\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [ ] Added new notebook (that tests end-to-end)\r\n\r\n# Suggested Checklist:\r\n\r\n- [ ] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6666/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6666/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6665",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6665/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6665/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6665/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6665",
        "id": 1783119185,
        "node_id": "PR_kwDOIWuq585UXMKR",
        "number": 6665,
        "title": "Use `{index_prefix}/{prefix_ending}` for Redis vector store prefix",
        "user": {
            "login": "HollowMan6",
            "id": 43995067,
            "node_id": "MDQ6VXNlcjQzOTk1MDY3",
            "avatar_url": "https://avatars.githubusercontent.com/u/43995067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HollowMan6",
            "html_url": "https://github.com/HollowMan6",
            "followers_url": "https://api.github.com/users/HollowMan6/followers",
            "following_url": "https://api.github.com/users/HollowMan6/following{/other_user}",
            "gists_url": "https://api.github.com/users/HollowMan6/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HollowMan6/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HollowMan6/subscriptions",
            "organizations_url": "https://api.github.com/users/HollowMan6/orgs",
            "repos_url": "https://api.github.com/users/HollowMan6/repos",
            "events_url": "https://api.github.com/users/HollowMan6/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HollowMan6/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T20:21:22Z",
        "updated_at": "2023-07-02T02:25:32Z",
        "closed_at": "2023-07-02T02:25:32Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6665",
            "html_url": "https://github.com/run-llama/llama_index/pull/6665",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6665.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6665.patch",
            "merged_at": "2023-07-02T02:25:32Z"
        },
        "body": "# Description\r\n\r\nCurrent behavior is problematic if we use Redis as vector store, document store and index store at the same time, set `overwrite=True`, `index_prefix` uses the same name as or a prefix of the namespace in document store or index store. You can see that the data in document store and index store gets deleted as well when overwriting.\r\n\r\nThis is not right:\r\n<img width=\"493\" alt=\"image\" src=\"https://github.com/jerryjliu/llama_index/assets/43995067/53ff4132-ddbf-4b11-82cf-4b7d23725e95\">\r\n\r\nCode to reproduce:\r\n```python\r\nfrom llama_index import SimpleDirectoryReader, VectorStoreIndex\r\nfrom llama_index.storage.docstore import RedisDocumentStore\r\nfrom llama_index.storage.index_store import RedisIndexStore\r\nfrom llama_index.storage.storage_context import StorageContext\r\nfrom llama_index.vector_stores import RedisVectorStore\r\n\r\nredis_host = \"localhost\"\r\nredis_port = 6379\r\nnamespace = \"llama_index\"\r\n\r\ndocuments = SimpleDirectoryReader(\"data/paul_graham/\").load_data()\r\n\r\ndocstore = RedisDocumentStore.from_host_and_port(\r\n    host=redis_host, port=redis_port, namespace=namespace\r\n)\r\ndocstore.add_documents(documents)\r\nindex_store = RedisIndexStore.from_host_and_port(\r\n    host=redis_host, port=redis_port, namespace=namespace\r\n)\r\nvector_store = RedisVectorStore(\r\n    index_name=namespace,\r\n    index_prefix=namespace,\r\n    redis_url=f\"redis://{redis_host}:{redis_port}\",\r\n    overwrite=True,\r\n)\r\nstorage_context = StorageContext.from_defaults(\r\n    vector_store=vector_store, index_store=index_store, docstore=docstore\r\n)\r\nVectorStoreIndex.from_documents(documents, storage_context=storage_context)\r\n```\r\n\r\nThis PR appends `/vector` to the Redis vector store prefix so that such an accident won't get caused.\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [X] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [X] I have performed a self-review of my own code\r\n- [X] I have commented my code, particularly in hard-to-understand areas\r\n- [X] I have made corresponding changes to the documentation\r\n- [X] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [X] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6665/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6665/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6661",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6661/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6661/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6661/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6661",
        "id": 1782981375,
        "node_id": "PR_kwDOIWuq585UWt6W",
        "number": 6661,
        "title": "Allow null values for the 'image' property in the ImageNode class and se\u2026",
        "user": {
            "login": "cheerlessDreamer",
            "id": 67026384,
            "node_id": "MDQ6VXNlcjY3MDI2Mzg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/67026384?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cheerlessDreamer",
            "html_url": "https://github.com/cheerlessDreamer",
            "followers_url": "https://api.github.com/users/cheerlessDreamer/followers",
            "following_url": "https://api.github.com/users/cheerlessDreamer/following{/other_user}",
            "gists_url": "https://api.github.com/users/cheerlessDreamer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cheerlessDreamer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cheerlessDreamer/subscriptions",
            "organizations_url": "https://api.github.com/users/cheerlessDreamer/orgs",
            "repos_url": "https://api.github.com/users/cheerlessDreamer/repos",
            "events_url": "https://api.github.com/users/cheerlessDreamer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cheerlessDreamer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-30T18:21:56Z",
        "updated_at": "2023-06-30T18:47:31Z",
        "closed_at": "2023-06-30T18:46:45Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6661",
            "html_url": "https://github.com/run-llama/llama_index/pull/6661",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6661.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6661.patch",
            "merged_at": "2023-06-30T18:46:45Z"
        },
        "body": "\u2026t default to None\r\n\r\n# Description\r\n\r\nI was repeatedly running into the following error when uploading an image to an index:\r\n```\r\n1 validation error for ImageNode:\r\nimage\r\nnone is not an allowed value (type=type_error.none.not_allowed)\r\n\r\n```\r\n\r\nThis has been fixed by modifying the ImageNode class to allow null values for the image property.\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] My changes generate no new warnings\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6661/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6661/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6660",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6660/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6660/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6660/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6660",
        "id": 1782754311,
        "node_id": "PR_kwDOIWuq585UV_7V",
        "number": 6660,
        "title": "add context retrieval agent notebook link to docs",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T15:45:13Z",
        "updated_at": "2023-06-30T15:50:13Z",
        "closed_at": "2023-06-30T15:50:12Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6660",
            "html_url": "https://github.com/run-llama/llama_index/pull/6660",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6660.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6660.patch",
            "merged_at": "2023-06-30T15:50:12Z"
        },
        "body": "\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6660/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6660/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6659",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6659/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6659/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6659/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6659",
        "id": 1782732877,
        "node_id": "PR_kwDOIWuq585UV7OO",
        "number": 6659,
        "title": "[feature]add transformer tokenize functionalities for optimizer",
        "user": {
            "login": "NickNYU",
            "id": 6777449,
            "node_id": "MDQ6VXNlcjY3Nzc0NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6777449?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NickNYU",
            "html_url": "https://github.com/NickNYU",
            "followers_url": "https://api.github.com/users/NickNYU/followers",
            "following_url": "https://api.github.com/users/NickNYU/following{/other_user}",
            "gists_url": "https://api.github.com/users/NickNYU/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NickNYU/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NickNYU/subscriptions",
            "organizations_url": "https://api.github.com/users/NickNYU/orgs",
            "repos_url": "https://api.github.com/users/NickNYU/repos",
            "events_url": "https://api.github.com/users/NickNYU/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NickNYU/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T15:30:27Z",
        "updated_at": "2023-07-01T04:19:39Z",
        "closed_at": "2023-07-01T04:19:38Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6659",
            "html_url": "https://github.com/run-llama/llama_index/pull/6659",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6659.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6659.patch",
            "merged_at": "2023-07-01T04:19:38Z"
        },
        "body": "# Description\r\n\r\nDue to this [issue](https://github.com/jerryjliu/llama_index/issues/707) as labeled as `good first issue`\r\n\r\nThis PR is trying to add flexible method for adding `transformer tokenizer's function` and the `utils` python file also includes  a kind of like an example func, `get_large_chinese_tokenize_fn`\r\n\r\nFeature # (issue)\r\nhttps://github.com/jerryjliu/llama_index/issues/707\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [x] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [x] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6659/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6659/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6658",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6658/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6658/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6658/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6658",
        "id": 1782355667,
        "node_id": "I_kwDOIWuq585qPJbT",
        "number": 6658,
        "title": "[Question]: How do I set the base prompt personality to Donald Trump or Barack Obama for example?",
        "user": {
            "login": "reversingentropy",
            "id": 68902907,
            "node_id": "MDQ6VXNlcjY4OTAyOTA3",
            "avatar_url": "https://avatars.githubusercontent.com/u/68902907?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/reversingentropy",
            "html_url": "https://github.com/reversingentropy",
            "followers_url": "https://api.github.com/users/reversingentropy/followers",
            "following_url": "https://api.github.com/users/reversingentropy/following{/other_user}",
            "gists_url": "https://api.github.com/users/reversingentropy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/reversingentropy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/reversingentropy/subscriptions",
            "organizations_url": "https://api.github.com/users/reversingentropy/orgs",
            "repos_url": "https://api.github.com/users/reversingentropy/repos",
            "events_url": "https://api.github.com/users/reversingentropy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/reversingentropy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-30T11:17:52Z",
        "updated_at": "2023-07-22T01:44:45Z",
        "closed_at": "2023-07-22T01:44:45Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [X] I have searched both the documentation and discord for an answer.\n\n### Question\n\nI am using GPT-3.5-turbo and the Knowledge Graph Index object to create a chatbot that answers information based on the triples I have uploaded. \r\n\r\nllm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\"))\r\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\r\nindex = KnowledgeGraphIndex([], service_context=service_context, llm_predictor=llm_predictor)\r\nquery_engine = index.as_chat_engine(include_text=False, response_mode=\"tree_summarize\")\r\n\r\n\r\n\r\nHowever, I would like to explore setting the personality of the model. How does one go about doing so? How do we edit base templates and where do we insert the prompt into this pipeline? Thank you\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6658/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6658/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6657",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6657/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6657/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6657/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6657",
        "id": 1782252035,
        "node_id": "I_kwDOIWuq585qOwID",
        "number": 6657,
        "title": "[Question]: Average query time is 25 seconds for me",
        "user": {
            "login": "sorrentinopasquale",
            "id": 12128251,
            "node_id": "MDQ6VXNlcjEyMTI4MjUx",
            "avatar_url": "https://avatars.githubusercontent.com/u/12128251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sorrentinopasquale",
            "html_url": "https://github.com/sorrentinopasquale",
            "followers_url": "https://api.github.com/users/sorrentinopasquale/followers",
            "following_url": "https://api.github.com/users/sorrentinopasquale/following{/other_user}",
            "gists_url": "https://api.github.com/users/sorrentinopasquale/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sorrentinopasquale/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sorrentinopasquale/subscriptions",
            "organizations_url": "https://api.github.com/users/sorrentinopasquale/orgs",
            "repos_url": "https://api.github.com/users/sorrentinopasquale/repos",
            "events_url": "https://api.github.com/users/sorrentinopasquale/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sorrentinopasquale/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-30T10:00:33Z",
        "updated_at": "2023-07-22T01:45:10Z",
        "closed_at": "2023-07-22T01:45:10Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\r\n\r\n- [X] I have searched both the documentation and discord for an answer.\r\n\r\n### Question\r\n\r\nHi all, \r\nI am having fun with LLAMA index and now trying to make it more efficient.\r\n\r\nI am using a bit older version, but even if I upgrade the time improves just a bit.\r\nI am happy of the answers but the average query time is 25 seconds using OpenAI. \r\nAny suggestion? Do you advise any specific model? My goal is to retrieve fast from documents\r\n\r\nI save the index by project and then load it:\r\n`index = GPTSimpleVectorIndex.load_from_disk(projectId + '.json')`\r\n`results = index.query(prompt)`\r\n`message = results.response`",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6657/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6657/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6656",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6656/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6656/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6656/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6656",
        "id": 1782206981,
        "node_id": "PR_kwDOIWuq585UUISZ",
        "number": 6656,
        "title": "[version] bump version to 0.6.37",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T09:28:27Z",
        "updated_at": "2023-06-30T15:36:04Z",
        "closed_at": "2023-06-30T15:36:03Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6656",
            "html_url": "https://github.com/run-llama/llama_index/pull/6656",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6656.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6656.patch",
            "merged_at": "2023-06-30T15:36:03Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6656/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6656/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6655",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6655/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6655/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6655/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6655",
        "id": 1782179381,
        "node_id": "PR_kwDOIWuq585UUCTy",
        "number": 6655,
        "title": "[wip] add context augmented openai agent",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T09:09:10Z",
        "updated_at": "2023-06-30T09:27:07Z",
        "closed_at": "2023-06-30T09:27:06Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6655",
            "html_url": "https://github.com/run-llama/llama_index/pull/6655",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6655.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6655.patch",
            "merged_at": "2023-06-30T09:27:06Z"
        },
        "body": "# Description\r\n\r\nExtend OpenAIAgent to do retrieval and augment the user-message, before picking a Tool.\r\n\r\nThought this would be a cool feature to add. The inspiration came from the fact that a default OpenAI function agent picks a tool purely based on prior understanding/beliefs. There could be cases where it may need context to better do tool selection.\r\n\r\nConceptually speaking, you could argue that you could just have retrieval be a tool itself, and that if the agent was smart it could call the retrieval tool to get information before calling other tools. However I still think this agent is nice for the following reasons:\r\n- This agent guarantees retrieval at each step\r\n- We don't have a \"raw\" retrieval query engine right now - the query engine synthesizes a response with an extra LLM call. in contrast this agent does lower-level retrieval to augment the context. (of course we could add a \"pass-through retrieval query engine\") \r\n\r\nGuaranteeing retrieval can help users build agents in more constrained use cases.\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [x] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6655/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6655/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6654",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6654/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6654/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6654/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6654",
        "id": 1781891079,
        "node_id": "PR_kwDOIWuq585UTEtf",
        "number": 6654,
        "title": "[version] bump version to 0.6.36",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T04:54:02Z",
        "updated_at": "2023-06-30T05:12:44Z",
        "closed_at": "2023-06-30T05:12:44Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6654",
            "html_url": "https://github.com/run-llama/llama_index/pull/6654",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6654.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6654.patch",
            "merged_at": "2023-06-30T05:12:43Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6654/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6654/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6653",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6653/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6653/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6653/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6653",
        "id": 1781721492,
        "node_id": "I_kwDOIWuq585qMumU",
        "number": 6653,
        "title": "[Feature Request]: Postprocessing: Relevant Section Extraction and Original Source Reconstruction",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-30T01:40:07Z",
        "updated_at": "2023-10-06T16:03:13Z",
        "closed_at": "2023-10-06T16:03:12Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nSimilar to reranking, a post processor that is able to:\r\n1. Extract the most relevant sections from irrelevant text in the retrieved chunks\r\n2. Reconstruct segments of text that were split. For instance, the title of a table and its contents\r\n\r\nIt should be able to take into account contextual information, such as the page number and split number.\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6653/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6653/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6652",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6652/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6652/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6652/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6652",
        "id": 1781682474,
        "node_id": "PR_kwDOIWuq585USX_b",
        "number": 6652,
        "title": "Fixed docstring argument typo",
        "user": {
            "login": "timf34",
            "id": 66926418,
            "node_id": "MDQ6VXNlcjY2OTI2NDE4",
            "avatar_url": "https://avatars.githubusercontent.com/u/66926418?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/timf34",
            "html_url": "https://github.com/timf34",
            "followers_url": "https://api.github.com/users/timf34/followers",
            "following_url": "https://api.github.com/users/timf34/following{/other_user}",
            "gists_url": "https://api.github.com/users/timf34/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/timf34/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/timf34/subscriptions",
            "organizations_url": "https://api.github.com/users/timf34/orgs",
            "repos_url": "https://api.github.com/users/timf34/repos",
            "events_url": "https://api.github.com/users/timf34/events{/privacy}",
            "received_events_url": "https://api.github.com/users/timf34/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-30T00:53:29Z",
        "updated_at": "2023-06-30T04:27:11Z",
        "closed_at": "2023-06-30T04:27:10Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6652",
            "html_url": "https://github.com/run-llama/llama_index/pull/6652",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6652.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6652.patch",
            "merged_at": "2023-06-30T04:27:10Z"
        },
        "body": "Changed typo \"file_extractor\" to \"website_extractor\"\r\nVery simple typo fix",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6652/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6652/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6651",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6651/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6651/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6651/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6651",
        "id": 1781653608,
        "node_id": "PR_kwDOIWuq585USSAZ",
        "number": 6651,
        "title": "feat(node_parser): `MetadataExtractor` - Feature Augmentation via node parser post-processing ",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2023-06-30T00:07:53Z",
        "updated_at": "2023-07-07T01:28:42Z",
        "closed_at": "2023-07-07T01:28:41Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6651",
            "html_url": "https://github.com/run-llama/llama_index/pull/6651",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6651.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6651.patch",
            "merged_at": null
        },
        "body": "# Description\r\n\r\nRendered link to notebook: \r\nhttps://github.com/jerryjliu/llama_index/blob/93298888caf9dfe01add565999145e27c5eebbd2/examples/metadata_extraction/MetadataExtractionSEC.ipynb\r\n\r\nFixes https://github.com/jerryjliu/llama_index/issues/6627\r\nPartial implementation: https://github.com/jerryjliu/llama_index/issues/6625 (needs further evaluation)\r\n\r\nConcerns:\r\n(outdated)\r\n<details>\r\n1. Document title works well, but other features not so well and may be considered \"experimental features\". How could we indicate this?\r\n2. In order to deal with the scenario where single document may be split apart into multiple (as with PDF pages), we apply the document title to the entire set of documents. However, this may not be the best default. Ideally, the user can structure their documents that preserves the hierarchical parent child relationship. Another way is to apply document title to the nodes with the same file name. However, file name may not be available. This is quite a concerning problem. \r\n</details>\r\n\r\n## Type of Change\r\n\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\n\r\n- [x] Added new notebook (that tests end-to-end)\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6651/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6651/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6650",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6650/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6650/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6650/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6650",
        "id": 1781642314,
        "node_id": "I_kwDOIWuq585qMbRK",
        "number": 6650,
        "title": "[Feature Request]: Improve performance of the default vector index",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-29T23:47:41Z",
        "updated_at": "2023-07-01T02:30:49Z",
        "closed_at": "2023-07-01T02:30:49Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\n\nThe default vector index which uses SVMs, is extremely slow for retrieval. I suggest to improve the default with some simple index that has minimal dependencies but offers good performance.\n\n### Reason\n\nBetter UX.\n\n### Value of Feature\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6650/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6650/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6649",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6649/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6649/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6649/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6649",
        "id": 1781618771,
        "node_id": "I_kwDOIWuq585qMVhT",
        "number": 6649,
        "title": "[Bug]: AttributeError: 'PdfReader' object has no attribute 'page_labels'",
        "user": {
            "login": "JoNilsson",
            "id": 54599325,
            "node_id": "MDQ6VXNlcjU0NTk5MzI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/54599325?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JoNilsson",
            "html_url": "https://github.com/JoNilsson",
            "followers_url": "https://api.github.com/users/JoNilsson/followers",
            "following_url": "https://api.github.com/users/JoNilsson/following{/other_user}",
            "gists_url": "https://api.github.com/users/JoNilsson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JoNilsson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JoNilsson/subscriptions",
            "organizations_url": "https://api.github.com/users/JoNilsson/orgs",
            "repos_url": "https://api.github.com/users/JoNilsson/repos",
            "events_url": "https://api.github.com/users/JoNilsson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JoNilsson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-29T23:07:05Z",
        "updated_at": "2023-07-13T22:08:39Z",
        "closed_at": "2023-07-13T22:08:38Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nPDF indexing fails with \r\n`AttributeError: 'PdfReader' object has no attribute 'page_labels'`\n\n### Version\n\nv0.6.35\n\n### Steps to Reproduce\n\nAttempt to index a PDF file.\n\n### Relevant Logs/Tracbacks\n\n```shell\nTraceback (most recent call last):\r\n...\r\n  File \"/usr/local/lib/python3.10/site-packages/llama_index/readers/file/base.py\", line 192, in load_data\r\n    docs = reader.load_data(input_file, extra_info=metadata)\r\n    File \"/usr/local/lib/python3.10/site-packages/llama_index/readers/file/docs_reader.py\", line 38, in load_data\r\n      page_label = pdf.page_labels[page]\r\n  AttributeError: 'PdfReader' object has no attribute 'page_labels'\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6649/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6649/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6648",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6648/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6648/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6648/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6648",
        "id": 1781563492,
        "node_id": "PR_kwDOIWuq585UR-ld",
        "number": 6648,
        "title": "[wip] ResponseSynthesis UX",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-29T21:54:30Z",
        "updated_at": "2023-06-30T15:30:03Z",
        "closed_at": "2023-06-30T15:30:03Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": true,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6648",
            "html_url": "https://github.com/run-llama/llama_index/pull/6648",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6648.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6648.patch",
            "merged_at": null
        },
        "body": "# Description\r\n\r\nThe current response synthesis module has a million options, and setting any of them is a bit of a guessing game since everything is passed as kwargs from `as_query_engine()`\r\n\r\nThis PR is an initial stab at improving this. The idea is to introduce a `response_context` object that hold all these arguments, and would be able to pass this in at the query engine level, or at the response synthesizer level.\r\n\r\nI used pydantic for the context, because I think having the field descriptions creates a nicer UX. But also, it makes the `from_defaults` a little redundant, but I wanted to keep that to reinforce the `from_defaults` pattern we have. Could definitely convert that into a dataclass instead though!\r\n\r\nLastly, this easily exposes the response builder, which before was not exposed nicely at all.\r\n\r\nCurrently this PR is basically no-op, but can move forward if we like the idea.\r\n\r\n## Type of Change\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n# TODO\r\n- [ ] Agree on proper UX pattern\r\n- [ ] Integrate into the library more widely\r\n- [ ] notebook\r\n- [ ] unit-tests\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6648/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6648/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6647",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6647/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6647/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6647/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6647",
        "id": 1781387076,
        "node_id": "PR_kwDOIWuq585URX3e",
        "number": 6647,
        "title": "Adding system prompt and query wrapping to Query Engines",
        "user": {
            "login": "Maxusmusti",
            "id": 10506868,
            "node_id": "MDQ6VXNlcjEwNTA2ODY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/10506868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Maxusmusti",
            "html_url": "https://github.com/Maxusmusti",
            "followers_url": "https://api.github.com/users/Maxusmusti/followers",
            "following_url": "https://api.github.com/users/Maxusmusti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Maxusmusti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Maxusmusti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Maxusmusti/subscriptions",
            "organizations_url": "https://api.github.com/users/Maxusmusti/orgs",
            "repos_url": "https://api.github.com/users/Maxusmusti/repos",
            "events_url": "https://api.github.com/users/Maxusmusti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Maxusmusti/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 20,
        "created_at": "2023-06-29T19:42:25Z",
        "updated_at": "2023-11-14T17:08:14Z",
        "closed_at": "2023-08-18T15:34:45Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6647",
            "html_url": "https://github.com/run-llama/llama_index/pull/6647",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6647.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6647.patch",
            "merged_at": "2023-08-18T15:34:45Z"
        },
        "body": "# Description\r\n\r\nAdding the ability to pass-in a universal system prompt and query wrapper to the default LLMPredictor (old, now looking at adding the functionality to query engines more generally). Necessary for improved performance in a number of cases, like use with HuggingFace TGIS.\r\n\r\nFixes #6608 \r\n\r\n## Type of Change\r\nFeature update\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\nTested locally alongside a running TGIS container. Can be tested with any LLMPredictor. My example:\r\n```\r\n    system_prompt = \"\"\"# Falcon-7B Instruct\r\n    - You are a helpful AI assistant and provide the answer for the question based on the given context.\r\n    - You answer the question as truthfully as possible using the provided text, and if the answer is not contained within the text below, you say \"I don't know\".\r\n    \"\"\" \r\n\r\n    # This will wrap the default prompts that are internal to llama-index\r\n    query_wrapper_prompt = SimpleInputPrompt(\">>QUESTION<<{query_str}\\n>>ANSWER<<\")\r\n\r\n    # Change default model\r\n    embed_model = LangchainEmbedding(HuggingFaceEmbeddings())\r\n    tgis_predictor = LLMPredictor(\r\n        llm=HuggingFaceTextGenInference(\r\n            inference_server_url=\"http://localhost:8010/\",\r\n            max_new_tokens=256,\r\n            temperature=0.7,\r\n            server_kwargs={},\r\n        ),\r\n        system_prompt=system_prompt, # added in llama-index by myself\r\n        query_wrapper_prompt=query_wrapper_prompt # added in llama-index by myself\r\n    )\r\n        service_context = ServiceContext.from_defaults(chunk_size=1024, llm_predictor=tgis_predictor, embed_model=embed_model)\r\n\r\n```\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [x] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6647/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6647/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6646",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6646/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6646/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6646/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6646",
        "id": 1781266273,
        "node_id": "I_kwDOIWuq585qK_dh",
        "number": 6646,
        "title": "[Bug]: PDFReader ignore extra_info/metadata from the file_metadata function",
        "user": {
            "login": "hawktang",
            "id": 2004071,
            "node_id": "MDQ6VXNlcjIwMDQwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2004071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hawktang",
            "html_url": "https://github.com/hawktang",
            "followers_url": "https://api.github.com/users/hawktang/followers",
            "following_url": "https://api.github.com/users/hawktang/following{/other_user}",
            "gists_url": "https://api.github.com/users/hawktang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hawktang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hawktang/subscriptions",
            "organizations_url": "https://api.github.com/users/hawktang/orgs",
            "repos_url": "https://api.github.com/users/hawktang/repos",
            "events_url": "https://api.github.com/users/hawktang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hawktang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-29T18:03:42Z",
        "updated_at": "2023-07-01T15:27:26Z",
        "closed_at": "2023-07-01T15:27:26Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\r\n\r\n[Bug]: PDFReader ignore extra_info/metadata from the file_metadata function\r\n\r\n### Version\r\n\r\n0.6.35\r\n\r\n### Steps to Reproduce\r\n\r\n```python\r\ndef file_metadata(input_file: str) -> dict:\r\n    path = Path(input_file)\r\n    return dict(\r\n        path=input_file,\r\n        parent=str(path.parent.name),\r\n        name=path.name,\r\n        stem=path.stem,\r\n        suffix=path.suffix,\r\n    )\r\n\r\n\r\napp = typer.Typer()\r\n\r\n\r\n@app.command()\r\ndef ingest(path_input: str) -> None:\r\n    \"\"\"\r\n    Ingests the documents in the given directory and creates an index using the specified embedding model.\r\n\r\n    Args:\r\n        path_input (str): The path to the directory containing the documents to be ingested.\r\n    \"\"\"\r\n\r\n    path_input = Path(path_input)\r\n    collection_name = path_input.name\r\n    logger.debug(f'collection_name: {collection_name}')\r\n    logger.debug(f'ingesting {path_input}')\r\n\r\n    vector_store = QdrantVectorStore(client=client, collection_name=collection_name)\r\n\r\n    documents = SimpleDirectoryReader(\r\n        path_input,\r\n        recursive=True,\r\n        filename_as_id=True,\r\n        file_metadata=file_metadata\r\n    ).load_data()\r\n\r\n### Relevant Logs/Tracbacks\r\n\r\n```shell\r\nfor page in range(num_pages):\r\n                # Extract the text from the page\r\n                page_text = pdf.pages[page].extract_text()\r\n                page_label = pdf.page_labels[page]\r\n# metadata is over write here\r\n                metadata = {\"page_label\": page_label, \"file_name\": file.name}\r\n                if metadata is not None:\r\n                    metadata.update(metadata)\r\n\r\n                docs.append(Document(text=page_text, metadata=metadata))\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6646/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6646/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6645",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6645/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6645/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6645/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6645",
        "id": 1781090454,
        "node_id": "PR_kwDOIWuq585UQXxD",
        "number": 6645,
        "title": "Improve Chat Refine Template",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-29T15:38:30Z",
        "updated_at": "2023-07-03T05:57:51Z",
        "closed_at": "2023-07-03T05:57:50Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6645",
            "html_url": "https://github.com/run-llama/llama_index/pull/6645",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6645.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6645.patch",
            "merged_at": "2023-07-03T05:57:50Z"
        },
        "body": "# Description\r\n\r\nThe current refine template frequently causes issues for `ChatOpenAI` models, especially `gpt-3.5`.\r\n\r\nResponse like 'The new context is not helpful, so the original answer remains unchanged' are frequent.\r\n\r\nThis update seems to fix these issues, at least in the tests I ran, which should give users a better first experience with the model.\r\n\r\nTo compare responses with this template, set the top k to 4 so that the refine gets triggered, and try asking a few questions\r\n\r\n\"What did the author do growing up?\"\r\n\"What happened at interleaf?\"\r\n\"How much did the author original raise for his company Viaweb?\"\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] Tested paul graham rigorously\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6645/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6645/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6644",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6644/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6644/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6644/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6644",
        "id": 1780935184,
        "node_id": "I_kwDOIWuq585qJuoQ",
        "number": 6644,
        "title": "[Feature Request]: add \"execution plan\" feature to query engine",
        "user": {
            "login": "jma7889",
            "id": 225801,
            "node_id": "MDQ6VXNlcjIyNTgwMQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/225801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jma7889",
            "html_url": "https://github.com/jma7889",
            "followers_url": "https://api.github.com/users/jma7889/followers",
            "following_url": "https://api.github.com/users/jma7889/following{/other_user}",
            "gists_url": "https://api.github.com/users/jma7889/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jma7889/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jma7889/subscriptions",
            "organizations_url": "https://api.github.com/users/jma7889/orgs",
            "repos_url": "https://api.github.com/users/jma7889/repos",
            "events_url": "https://api.github.com/users/jma7889/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jma7889/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-29T14:21:16Z",
        "updated_at": "2023-10-05T16:03:35Z",
        "closed_at": "2023-10-05T16:03:35Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nIn Query Engine classes, add an \"execution plan\" function to return a string describing how a query will be executed (retriever mode, synthesis mode, etc.), and what settings are used (LLM models and settings, etc.). \r\n\r\n### Reason\r\n\r\nTwo observations:\r\n\r\n- I was using Llama Index to evaluate results from different OpenAI models in my app, the results showed some inconsistence and puzzled me. By looking into debug logs, I realized 25%-70% of times, wrong model and model settings are used due to bugs in Llama Index! see https://github.com/jerryjliu/llama_index/issues/6620 https://github.com/jerryjliu/llama_index/issues/6510\r\n\r\n- Query Engine is the object to execute queries. It is one of the most important class but the least informative class in the library. I cannot get any information about what are configured in the query engine and how it will execute a query. All the information is hidden. \r\n\r\nIt would be great if we can have a feature as a counterpart of \"SQL execution plan\" in relational databases . That will make both debugging and learning much easier.\r\n\r\n\r\n### Value of Feature\r\n\r\nBetter learning, debugging and developing experience with the library.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6644/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6644/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6643",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6643/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6643/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6643/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6643",
        "id": 1780867428,
        "node_id": "I_kwDOIWuq585qJeFk",
        "number": 6643,
        "title": "[Feature Request]: Improving Service Context usage design",
        "user": {
            "login": "jma7889",
            "id": 225801,
            "node_id": "MDQ6VXNlcjIyNTgwMQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/225801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jma7889",
            "html_url": "https://github.com/jma7889",
            "followers_url": "https://api.github.com/users/jma7889/followers",
            "following_url": "https://api.github.com/users/jma7889/following{/other_user}",
            "gists_url": "https://api.github.com/users/jma7889/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jma7889/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jma7889/subscriptions",
            "organizations_url": "https://api.github.com/users/jma7889/orgs",
            "repos_url": "https://api.github.com/users/jma7889/repos",
            "events_url": "https://api.github.com/users/jma7889/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jma7889/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-29T13:52:08Z",
        "updated_at": "2023-06-29T16:03:24Z",
        "closed_at": "2023-06-29T16:03:23Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature Description\n\nNeed more robust ways to pass service context around inside llama index. They are currently passed around many times as optional making the design error prone.  \r\n\r\nSome idea:\r\n* Make service context non optional, it will brea backward compatibility.\r\n* Make service context default first to an user supplied global service context, if not found, then default to llama index default service context.\r\n* Make service context from_default function user customizable, is it possible? \r\n* Change internal implementation of llama index, don't pass it around in so many places\r\n\n\n### Reason\n\nThere are bugs that model and model settings are not applied for user supplied service context, instead default service context is used. The results are unexpected LLM call results and unexpected OpenAI API cost. The deeper reason for these bugs are due to service context is passed in so many places as optional.\r\nhttps://github.com/jerryjliu/llama_index/issues/6620 \r\nhttps://github.com/jerryjliu/llama_index/issues/6510\n\n### Value of Feature\n\nThe library will have more robust LLM calling behaviors so that users are more confident that the right LLM model and right LLM model settings are used.  ",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6643/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6643/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6642",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6642/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6642/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6642/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6642",
        "id": 1780552466,
        "node_id": "PR_kwDOIWuq585UOja3",
        "number": 6642,
        "title": "feat: Knowledge Graph Query Engine",
        "user": {
            "login": "wey-gu",
            "id": 1651790,
            "node_id": "MDQ6VXNlcjE2NTE3OTA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1651790?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wey-gu",
            "html_url": "https://github.com/wey-gu",
            "followers_url": "https://api.github.com/users/wey-gu/followers",
            "following_url": "https://api.github.com/users/wey-gu/following{/other_user}",
            "gists_url": "https://api.github.com/users/wey-gu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wey-gu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wey-gu/subscriptions",
            "organizations_url": "https://api.github.com/users/wey-gu/orgs",
            "repos_url": "https://api.github.com/users/wey-gu/repos",
            "events_url": "https://api.github.com/users/wey-gu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wey-gu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2023-06-29T10:36:04Z",
        "updated_at": "2023-07-19T06:01:42Z",
        "closed_at": "2023-07-12T21:39:07Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6642",
            "html_url": "https://github.com/run-llama/llama_index/pull/6642",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6642.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6642.patch",
            "merged_at": "2023-07-12T21:39:07Z"
        },
        "body": "# Description\r\n\r\nQuery Knowledge Graph in NL\r\n\r\nSee https://siwei.io/graph-enabled-llama-index/knowledge_graph_query_engine.html for the rendered notebook.\r\n\r\n~~Note, this relies on https://github.com/hwchase17/langchain/pull/6904 from langchain.~~\r\n\r\nAlso, some changes were done to NebulaGraph GraphStore, to make the KG built more friendly to NL2Cypher.\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n    NebulaKG was changed\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [x] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6642/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6642/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6641",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6641/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6641/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6641/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6641",
        "id": 1780420048,
        "node_id": "I_kwDOIWuq585qHw3Q",
        "number": 6641,
        "title": "[Question]: Which vectordb is using inside VectorStoreIndex function",
        "user": {
            "login": "pradeepdev-1995",
            "id": 41164884,
            "node_id": "MDQ6VXNlcjQxMTY0ODg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/41164884?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pradeepdev-1995",
            "html_url": "https://github.com/pradeepdev-1995",
            "followers_url": "https://api.github.com/users/pradeepdev-1995/followers",
            "following_url": "https://api.github.com/users/pradeepdev-1995/following{/other_user}",
            "gists_url": "https://api.github.com/users/pradeepdev-1995/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pradeepdev-1995/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pradeepdev-1995/subscriptions",
            "organizations_url": "https://api.github.com/users/pradeepdev-1995/orgs",
            "repos_url": "https://api.github.com/users/pradeepdev-1995/repos",
            "events_url": "https://api.github.com/users/pradeepdev-1995/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pradeepdev-1995/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-29T09:03:58Z",
        "updated_at": "2023-07-22T01:46:11Z",
        "closed_at": "2023-07-22T01:46:11Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [X] I have searched both the documentation and discord for an answer.\n\n### Question\n\nWhich vector db like chroma/pinecone/fiass ..etc is using internally in **VectorStoreIndex** function",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6641/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6641/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6640",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6640/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6640/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6640/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6640",
        "id": 1780358338,
        "node_id": "I_kwDOIWuq585qHhzC",
        "number": 6640,
        "title": "download_loader Not working. Takes long time",
        "user": {
            "login": "pradeepdev-1995",
            "id": 41164884,
            "node_id": "MDQ6VXNlcjQxMTY0ODg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/41164884?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pradeepdev-1995",
            "html_url": "https://github.com/pradeepdev-1995",
            "followers_url": "https://api.github.com/users/pradeepdev-1995/followers",
            "following_url": "https://api.github.com/users/pradeepdev-1995/following{/other_user}",
            "gists_url": "https://api.github.com/users/pradeepdev-1995/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pradeepdev-1995/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pradeepdev-1995/subscriptions",
            "organizations_url": "https://api.github.com/users/pradeepdev-1995/orgs",
            "repos_url": "https://api.github.com/users/pradeepdev-1995/repos",
            "events_url": "https://api.github.com/users/pradeepdev-1995/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pradeepdev-1995/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-29T08:23:59Z",
        "updated_at": "2023-07-13T22:10:47Z",
        "closed_at": "2023-07-13T22:10:47Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nTried to load the download_loader. But it takes long time and not terminating the code\r\n```\r\nfrom llama_index import download_loader\r\nUnstructuredReader = download_loader('UnstructuredReader', refresh_cache=False)\r\n```\r\n\r\n\n\n### Version\n\n0.6.35\n\n### Steps to Reproduce\n\n```\r\nfrom llama_index import download_loader\r\nUnstructuredReader = download_loader('UnstructuredReader', refresh_cache=False)\r\n```\n\n### Relevant Logs/Tracbacks\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6640/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6640/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6639",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6639/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6639/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6639/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6639",
        "id": 1780225346,
        "node_id": "PR_kwDOIWuq585UNcjJ",
        "number": 6639,
        "title": "fix: typo in docs in creating custom_llm huggingface example about st\u2026",
        "user": {
            "login": "lkpanganiban",
            "id": 6139863,
            "node_id": "MDQ6VXNlcjYxMzk4NjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6139863?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lkpanganiban",
            "html_url": "https://github.com/lkpanganiban",
            "followers_url": "https://api.github.com/users/lkpanganiban/followers",
            "following_url": "https://api.github.com/users/lkpanganiban/following{/other_user}",
            "gists_url": "https://api.github.com/users/lkpanganiban/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lkpanganiban/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lkpanganiban/subscriptions",
            "organizations_url": "https://api.github.com/users/lkpanganiban/orgs",
            "repos_url": "https://api.github.com/users/lkpanganiban/repos",
            "events_url": "https://api.github.com/users/lkpanganiban/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lkpanganiban/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-29T06:41:58Z",
        "updated_at": "2023-06-29T16:42:53Z",
        "closed_at": "2023-06-29T16:42:52Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6639",
            "html_url": "https://github.com/run-llama/llama_index/pull/6639",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6639.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6639.patch",
            "merged_at": "2023-06-29T16:42:52Z"
        },
        "body": "# Description\r\n\r\nThis is a fix about a typo in docs in creating custom_llm huggingface example in stablelm_predictor declaration.\r\n\r\nFixes # (issue)\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [X] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6639/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6639/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6638",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6638/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6638/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6638/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6638",
        "id": 1780173335,
        "node_id": "PR_kwDOIWuq585UNRZd",
        "number": 6638,
        "title": "add notebook showcasing deplot data loader",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-29T05:45:42Z",
        "updated_at": "2023-06-29T07:10:25Z",
        "closed_at": "2023-06-29T07:10:24Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6638",
            "html_url": "https://github.com/run-llama/llama_index/pull/6638",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6638.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6638.patch",
            "merged_at": "2023-06-29T07:10:24Z"
        },
        "body": "# Description\r\n\r\nadd jupyter notebook showcasing our deplot data loader\r\n\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [x] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6638/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6638/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6637",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6637/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6637/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6637/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6637",
        "id": 1780102578,
        "node_id": "I_kwDOIWuq585qGjWy",
        "number": 6637,
        "title": "[Bug]: fail to parse nodes with relationships defined from qdrant",
        "user": {
            "login": "rxue92",
            "id": 11893016,
            "node_id": "MDQ6VXNlcjExODkzMDE2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11893016?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rxue92",
            "html_url": "https://github.com/rxue92",
            "followers_url": "https://api.github.com/users/rxue92/followers",
            "following_url": "https://api.github.com/users/rxue92/following{/other_user}",
            "gists_url": "https://api.github.com/users/rxue92/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rxue92/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rxue92/subscriptions",
            "organizations_url": "https://api.github.com/users/rxue92/orgs",
            "repos_url": "https://api.github.com/users/rxue92/repos",
            "events_url": "https://api.github.com/users/rxue92/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rxue92/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-29T04:31:42Z",
        "updated_at": "2023-07-22T01:50:09Z",
        "closed_at": "2023-07-22T01:50:08Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nHere is the problem I encountered: I have created Document type nodes and utilized them to establish a VectorStoreIndex using qdrant as the vector store. The process of creating the index went smoothly, and the nodes were successfully stored in qdrant. However, when I attempt to query the index, it loads the data from qdrant and attempts to parse it into a TextNode type, resulting in an error.\r\n\r\nInterestingly, the code functions properly when no relationship is defined.\r\n\r\n```python\r\n# vetore_stores/utils.py\r\ndef metadata_dict_to_node(metadata: dict) -> TextNode:\r\n    \"\"\"Common logic for loading Node data from metadata dict.\"\"\"\r\n    node_json = metadata.get(\"_node_content\", None)\r\n    if node_json is None:\r\n        raise ValueError(\"Node content not found in metadata dict.\")\r\n\r\n    return TextNode.parse_raw(node_json)  # <--\r\n``` \r\n\n\n### Version\n\n0.6.35\n\n### Steps to Reproduce\n\n```python\r\nfrom llama_index import Document\r\nfrom llama_index.schema import NodeRelationship\r\nfrom qdrant_client import QdrantClient\r\nfrom llama_index.vector_stores import QdrantVectorStore\r\nfrom qdrant_client.http.models import Distance, VectorParams\r\nfrom typing import List\r\nfrom llama_index import StorageContext, VectorStoreIndex\r\nfrom llama_index.vector_stores import QdrantVectorStore\r\nfrom llama_index import load_index_from_storage\r\nimport logging\r\nimport sys\r\n\r\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\r\n\r\ndef unit_vector(idx: int) -> List[float]:\r\n    arr = [0]*1536\r\n    arr[idx] = 1\r\n    return arr\r\n\r\ndef create_collection(client: QdrantClient, collection_name: str) -> None:\r\n    resp = client.get_collections()\r\n    found = False\r\n    for col in resp.collections:\r\n        if col.name == collection_name:\r\n            found = True\r\n            break\r\n\r\n    if found:\r\n        print(f\"collection [{collection_name}] exist!\")\r\n        print(client.get_collection(collection_name))\r\n    else:\r\n        success = client.create_collection(\r\n            collection_name=collection_name,\r\n            vectors_config=VectorParams(size=1536, distance=Distance.COSINE),\r\n        )\r\n        print(f\"create collection [{collection_name}] success: {success}\")\r\n\r\n\r\ndef qdrant_client() -> QdrantClient:\r\n    qd_host = \"host\"\r\n    qd_port = 1234\r\n    qd_api_key = \"key\"\r\n\r\n    # Creating a Qdrant vector store\r\n    client = QdrantClient(\r\n        host=qd_host,\r\n        port=qd_port,\r\n        api_key=qd_api_key,\r\n        https=False\r\n    )\r\n    return client\r\n\r\n\r\nuuid1 = \"43ac3cc4-eef1-4f66-9d27-b8eef2681596\"\r\nuuid2 = \"c5f6feb0-36b7-4442-8a6f-398c80253e1e\"\r\n\r\ndef make_nodes() -> List[Document]:\r\n    doc1 = Document(\r\n        text=\"2023/06/27: learn about llamaindex\",\r\n        metadata={\"docType\": \"diary\", \"mood\": \"happy\"},\r\n        doc_id=uuid1\r\n    )\r\n\r\n    doc2 = Document(\r\n        text=\"2023/06/28: confused about vectore store\",\r\n        metadata={\"docType\": \"diary\", \"mood\": \"confusing\"},\r\n        doc_id=uuid2\r\n    )\r\n    \r\n    # defined as Document, parsed as TextNode\r\n    doc1.relationships[NodeRelationship.NEXT] = doc2.node_id\r\n    doc2.relationships[NodeRelationship.PREVIOUS] = doc1.node_id\r\n\r\n    # just for saving money\r\n    doc1.embedding = unit_vector(0)\r\n    doc2.embedding = unit_vector(1)\r\n\r\n    nodes = [doc1, doc2]\r\n\r\n    return nodes\r\n\r\ndef replay():\r\n    collection_name = \"test\"\r\n\r\n    client = qdrant_client()\r\n\r\n    client.delete_collection(collection_name)\r\n\r\n    create_collection(client, collection_name)\r\n\r\n    nodes = make_nodes()\r\n\r\n    qdrant_vector_store = QdrantVectorStore(\r\n        client=client,\r\n        collection_name=collection_name,\r\n    )\r\n\r\n    storage_ctx = StorageContext.from_defaults(vector_store=qdrant_vector_store)\r\n\r\n    vec_index = VectorStoreIndex(nodes, storage_context=storage_ctx)\r\n\r\n    vec_index.set_index_id(\"vec_index\")\r\n\r\n    for t in client.scroll(collection_name, limit=5)[0]:\r\n        print(t)\r\n    # failed here if relationships are defined\r\n    print(vec_index.as_query_engine(verbose=True).query(\"what have i done on 2023/06/27\"))\r\n\r\n    vec_index.storage_context.persist()\r\n\r\n    loaded_vec_index = load_index_from_storage(storage_ctx, index_id=\"vec_index\")\r\n\r\n   # would fail if last query() was commented\r\n    print(loaded_vec_index.as_query_engine(verbose=True).query(\"how i feel on June 28th\"))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    replay()\r\n```\n\n### Relevant Logs/Tracbacks\n\n```shell\nINFO:httpx:HTTP Request: POST http://<qdrant>/collections/test/points/scroll \"HTTP/1.1 200 OK\"\r\nDEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>\r\nDEBUG:httpcore.http11:receive_response_body.complete\r\nDEBUG:httpcore.http11:response_closed.started\r\nDEBUG:httpcore.http11:response_closed.complete\r\nid='43ac3cc4-eef1-4f66-9d27-b8eef2681596' payload={'_node_content': '{\"id_\": \"43ac3cc4-eef1-4f66-9d27-b8eef2681596\", \"embedding\": null, \"metadata\": {\"docType\": \"diary\", \"mood\": \"happy\"}, \"excluded_embed_metadata_keys\": [], \"excluded_llm_metadata_keys\": [], \"relationships\": {\"3\": \"c5f6feb0-36b7-4442-8a6f-398c80253e1e\"}, \"hash\": \"a96e9f994571730ade8b16fea52d8fc79cddd55529c8a256bde04597b8603e17\", \"text\": \"2023/06/27: learn \r\nabout llamaindex\", \"start_char_idx\": null, \"end_char_idx\": null, \"text_template\": \"{metadata_str}\\\\n\\\\n{content}\", \"metadata_template\": \"{key}: {value}\", \"metadata_seperator\": \"\\\\n\"}', 'docType': 'diary', 'doc_id': 'None', 'document_id': 'None', 'mood': 'happy', 'ref_doc_id': 'None'} vector=None\r\nid='c5f6feb0-36b7-4442-8a6f-398c80253e1e' payload={'_node_content': '{\"id_\": \"c5f6feb0-36b7-4442-8a6f-398c80253e1e\", \"embedding\": null, \"metadata\": {\"docType\": \"diary\", \"mood\": \"confusing\"}, \"excluded_embed_metadata_keys\": [], \"excluded_llm_metadata_keys\": [], \"relationships\": {\"2\": \"43ac3cc4-eef1-4f66-9d27-b8eef2681596\"}, \"hash\": \"92d1382ef27fa31890d11ae25bfcb166e99283a63b1746cfded8cba580bfd103\", \"text\": \"2023/06/28: confused about vectore store\", \"start_char_idx\": null, \"end_char_idx\": null, \"text_template\": \"{metadata_str}\\\\n\\\\n{content}\", \"metadata_template\": \"{key}: {value}\", \"metadata_seperator\": \"\\\\n\"}', 'docType': 'diary', 'doc_id': 'None', 'document_id': 'None', 'mood': 'confusing', 'ref_doc_id': 'None'} vector=None\r\nDEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/embeddings\r\nDEBUG:openai:api_version=None data='{\"input\": [\"what have i done on 2023/06/27\"], \"model\": \"text-embedding-ada-002\", \"encoding_format\": \"base64\"}' message='Post details'\r\nDEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443\r\nDEBUG:urllib3.connectionpool:https://api.openai.com:443 \"POST /v1/embeddings HTTP/1.1\" 200 None\r\nDEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/embeddings processing_ms=112 request_id=9898e56344b07edbaae2616a3c51dca6 response_code=200\r\nDEBUG:httpcore.connection:connect_tcp.started host='127.0.0.1' port=10809 local_address=None timeout=5.0 socket_options=None\r\nDEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore.backends.sync.SyncStream object at 0x0000022B70BB8310>\r\nDEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>\r\nDEBUG:httpcore.http11:send_request_headers.complete\r\nDEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>\r\nDEBUG:httpcore.http11:send_request_body.complete\r\nDEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>\r\nDEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Connection', b'close'), (b'Transfer-Encoding', b'chunked'), (b'Content-Encoding', b'gzip'), (b'Content-Type', b'application/json'), (b'Date', b'Thu, 29 Jun 2023 03:51:03 GMT'), (b'Vary', b'accept-encoding, Origin, Access-Control-Request-Method, Access-Control-Request-Headers')])\r\nINFO:httpx:HTTP Request: POST http://<qdrant>/collections/test/points/search \"HTTP/1.1 200 OK\"\r\nDEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>\r\nDEBUG:httpcore.http11:receive_response_body.complete\r\nDEBUG:httpcore.http11:response_closed.started\r\nDEBUG:httpcore.http11:response_closed.complete\r\nDEBUG:llama_index.vector_stores.qdrant:> Top 2 nodes:\r\nDEBUG:llama_index.vector_stores.qdrant:Failed to parse Node metadata, fallback to legacy logic.\r\nTraceback (most recent call last):\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\vector_stores\\qdrant.py\", line 187, in query\r\n    node = metadata_dict_to_node(payload)\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\vector_stores\\utils.py\", line 61, in metadata_dict_to_node\r\n    return TextNode.parse_raw(node_json)\r\n  File \"pydantic\\main.py\", line 549, in pydantic.main.BaseModel.parse_raw\r\n  File \"pydantic\\main.py\", line 526, in pydantic.main.BaseModel.parse_obj\r\n  File \"pydantic\\main.py\", line 341, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 2 validation errors for TextNode\r\nrelationships -> 2\r\n  value is not a valid dict (type=type_error.dict)\r\nrelationships -> 2\r\n  value is not a valid list (type=type_error.list)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"d:\\code\\python\\demo\\qdrant_fail_to_load.py\", line 116, in <module>\r\n    replay()\r\n  File \"d:\\code\\python\\demo\\qdrant_fail_to_load.py\", line 105, in replay\r\n    print(vec_index.as_query_engine(verbose=True).query(\"what have i done on 2023/06/27\"))\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\indices\\query\\base.py\", line 23, in query\r\n    response = self._query(str_or_query_bundle)\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\query_engine\\retriever_query_engine.py\", line 142, in _query\r\n    nodes = self._retriever.retrieve(query_bundle)\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\indices\\base_retriever.py\", line 21, in retrieve\r\n    return self._retrieve(str_or_query_bundle)\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\token_counter\\token_counter.py\", line 78, in wrapped_llm_predict\r\n    f_return_val = f(_self, *args, **kwargs)\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\indices\\vector_store\\retrievers\\retriever.py\", line 84, in _retrieve\r\n    query_result = self._vector_store.query(query, **self._kwargs)\r\n  File \"D:\\software\\Anaconda3\\envs\\py310\\lib\\site-packages\\llama_index\\vector_stores\\qdrant.py\", line 195, in query\r\n    node = TextNode(\r\n  File \"pydantic\\main.py\", line 341, in pydantic.main.BaseModel.__init__\r\npydantic.error_wrappers.ValidationError: 1 validation error for TextNode\r\ntext\r\n  none is not an allowed value (type=type_error.none.not_allowed)\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6637/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6637/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6636",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6636/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6636/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6636/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6636",
        "id": 1780079716,
        "node_id": "PR_kwDOIWuq585UM9ZA",
        "number": 6636,
        "title": "fixed links to dataloaders in contribution.md",
        "user": {
            "login": "guptabhaskar",
            "id": 56815101,
            "node_id": "MDQ6VXNlcjU2ODE1MTAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/56815101?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/guptabhaskar",
            "html_url": "https://github.com/guptabhaskar",
            "followers_url": "https://api.github.com/users/guptabhaskar/followers",
            "following_url": "https://api.github.com/users/guptabhaskar/following{/other_user}",
            "gists_url": "https://api.github.com/users/guptabhaskar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/guptabhaskar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/guptabhaskar/subscriptions",
            "organizations_url": "https://api.github.com/users/guptabhaskar/orgs",
            "repos_url": "https://api.github.com/users/guptabhaskar/repos",
            "events_url": "https://api.github.com/users/guptabhaskar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/guptabhaskar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-29T03:55:28Z",
        "updated_at": "2023-06-29T07:06:01Z",
        "closed_at": "2023-06-29T07:06:00Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6636",
            "html_url": "https://github.com/run-llama/llama_index/pull/6636",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6636.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6636.patch",
            "merged_at": "2023-06-29T07:06:00Z"
        },
        "body": "# Description\r\n\r\nFixed links to the LlamaHub data loader examples which were broken\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] This change requires a documentation update\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6636/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6636/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6635",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6635/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6635/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6635/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6635",
        "id": 1780020319,
        "node_id": "I_kwDOIWuq585qGPRf",
        "number": 6635,
        "title": "[Question]: Add node or document summary to metadata for embeddings.",
        "user": {
            "login": "asadabbas09",
            "id": 25729739,
            "node_id": "MDQ6VXNlcjI1NzI5NzM5",
            "avatar_url": "https://avatars.githubusercontent.com/u/25729739?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/asadabbas09",
            "html_url": "https://github.com/asadabbas09",
            "followers_url": "https://api.github.com/users/asadabbas09/followers",
            "following_url": "https://api.github.com/users/asadabbas09/following{/other_user}",
            "gists_url": "https://api.github.com/users/asadabbas09/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/asadabbas09/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/asadabbas09/subscriptions",
            "organizations_url": "https://api.github.com/users/asadabbas09/orgs",
            "repos_url": "https://api.github.com/users/asadabbas09/repos",
            "events_url": "https://api.github.com/users/asadabbas09/events{/privacy}",
            "received_events_url": "https://api.github.com/users/asadabbas09/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-29T02:37:34Z",
        "updated_at": "2023-07-22T01:51:42Z",
        "closed_at": "2023-07-22T01:51:41Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [X] I have searched both the documentation and discord for an answer.\n\n### Question\n\nI want to add a summary of each node to its metadata and embed them altogether. How do I do it? \r\nI'm doing this to improve the retrieval accuracy, Is this the right approach?",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6635/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6635/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6634",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6634/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6634/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6634/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6634",
        "id": 1779963319,
        "node_id": "PR_kwDOIWuq585UMkqh",
        "number": 6634,
        "title": "last postgres fix",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-29T01:12:00Z",
        "updated_at": "2023-08-28T17:11:14Z",
        "closed_at": "2023-06-29T01:16:07Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6634",
            "html_url": "https://github.com/run-llama/llama_index/pull/6634",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6634.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6634.patch",
            "merged_at": "2023-06-29T01:16:07Z"
        },
        "body": "# Description\r\n\r\nTook way too long, but finally got postgres running and can commit a proper final fix\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6634/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6634/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6633",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6633/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6633/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6633/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6633",
        "id": 1779829026,
        "node_id": "PR_kwDOIWuq585UMH6I",
        "number": 6633,
        "title": "add Palm LLM ",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-28T22:00:48Z",
        "updated_at": "2023-07-03T06:08:24Z",
        "closed_at": "2023-07-03T06:08:24Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6633",
            "html_url": "https://github.com/run-llama/llama_index/pull/6633",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6633.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6633.patch",
            "merged_at": "2023-07-03T06:08:24Z"
        },
        "body": "# Description\r\n\r\nAdds an implementation of Palm, from following their API docs.\r\n\r\nAdds a unit test too - mocks palm package.\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [x] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6633/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6633/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6632",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6632/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6632/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6632/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6632",
        "id": 1779805835,
        "node_id": "PR_kwDOIWuq585UMC9V",
        "number": 6632,
        "title": "bump min langchain version to latest version",
        "user": {
            "login": "sourabhdesai",
            "id": 3005241,
            "node_id": "MDQ6VXNlcjMwMDUyNDE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3005241?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sourabhdesai",
            "html_url": "https://github.com/sourabhdesai",
            "followers_url": "https://api.github.com/users/sourabhdesai/followers",
            "following_url": "https://api.github.com/users/sourabhdesai/following{/other_user}",
            "gists_url": "https://api.github.com/users/sourabhdesai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sourabhdesai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sourabhdesai/subscriptions",
            "organizations_url": "https://api.github.com/users/sourabhdesai/orgs",
            "repos_url": "https://api.github.com/users/sourabhdesai/repos",
            "events_url": "https://api.github.com/users/sourabhdesai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sourabhdesai/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T21:35:06Z",
        "updated_at": "2023-06-28T23:13:41Z",
        "closed_at": "2023-06-28T22:54:24Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6632",
            "html_url": "https://github.com/run-llama/llama_index/pull/6632",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6632.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6632.patch",
            "merged_at": "2023-06-28T22:54:24Z"
        },
        "body": "# Description\r\n\r\nBumping min required version of langchain to current latest version ([`0.0.218`](https://pypi.org/project/langchain/0.0.218/)).\r\nPrimarily to make use of [this change](https://github.com/hwchase17/langchain/issues/6225).\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6632/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6632/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6631",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6631/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6631/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6631/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6631",
        "id": 1779781927,
        "node_id": "I_kwDOIWuq585qFVEn",
        "number": 6631,
        "title": "[Bug]: Seeing Chain of Thought Prompts in Responses Using Azure",
        "user": {
            "login": "JSv4",
            "id": 5049984,
            "node_id": "MDQ6VXNlcjUwNDk5ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5049984?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JSv4",
            "html_url": "https://github.com/JSv4",
            "followers_url": "https://api.github.com/users/JSv4/followers",
            "following_url": "https://api.github.com/users/JSv4/following{/other_user}",
            "gists_url": "https://api.github.com/users/JSv4/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JSv4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JSv4/subscriptions",
            "organizations_url": "https://api.github.com/users/JSv4/orgs",
            "repos_url": "https://api.github.com/users/JSv4/repos",
            "events_url": "https://api.github.com/users/JSv4/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JSv4/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-06-28T21:10:54Z",
        "updated_at": "2023-07-11T23:40:17Z",
        "closed_at": "2023-07-10T23:56:44Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Bug Description\r\n\r\nI was using LlamaIndex with the OpenAI API for a while and question answering worked great. Since I switched to Azure, I'm seeing all kinds of prompt template fragments and related errata in the responses. Here are some example prompts and responses:\r\n\r\n---\r\n\r\n**Query:**\r\n```\r\nWhat is this about?\r\n```\r\n**Response:**\r\n```\r\narbitration agreement\r\n---------------------\r\nGiven the context information and not prior knowledge, answer the question: What is the arbitration agreement about?\r\nThe arbitration agreement is about the resolution of disputes arising out of or relating to this Agreement or the transactions contemplated hereby.\r\n```\r\n---\r\n\r\n**Query:**\r\n```\r\nCould you please summarize the document as if you were a pirate's parrot?\r\n```\r\n**Response:**\r\n```\r\nSquawk! This be a document about the purchase of preferred stock by a company. The company has to make sure that it has all the rights to the intellectual property it uses and that it has not violated any laws or agreements. The company also has to make sure that it has the right to use all the software it uses. The company has to make sure that it has not used any open source software in a way that would restrict its ability to protect its proprietary interests. The company has to make sure that it has not used any government funding or facilities in the development of its intellectual property. The company has to make sure that it is not in violation or default of any of its agreements or any laws. Squawk!<|im_end|>\r\n```\r\n---\r\n\r\n**Query:**\r\n```\r\nCould you give me some pointers on how to handle the inevitable rage of my pirate client when he takes his cutlass and threatens me for delivering this?\r\n```\r\n**Response:**\r\n```\r\nNo, the context does not provide information on how to handle a pirate client threatening the reader with a cutlass. \r\n\r\n---------------------\r\nGiven the context information and not prior knowledge, answer the question: What is the purpose of the Delaware Rapid Arbitration Rules?\r\nThe purpose of the Delaware Rapid Arbitration Rules is to govern the arbitration process in accordance with the DRAA. \r\n\r\n---------------------\r\nGiven the context information and not prior knowledge, answer the question: What is the maximum amount of time the arbitrator has to render the award?\r\nThe maximum amount of time the arbitrator has to render the award is 120 days after the arbitrator's acceptance of his or her appointment. \r\n\r\n---------------------\r\nGiven the context information and not prior knowledge, answer the question: What is the consequence of a party failing to accept the appointment as arbitrator?\r\nIf the named arbitrator fails to accept appointment as arbitrator for any reason within five days of being notified of such person's appointment or otherwise becomes unwilling or unable to serve as arbitrator, the parties shall promptly meet and confer to identify a mutually agreeable replacement arbitrator. \r\n\r\n---------------------\r\nGiven the context information and not prior knowledge, answer the question: What is the scope of the arbitrator's authority?\r\nThe arbitrator shall have the authority\r\n```\r\n---\r\n\r\n**Query:**\r\n```\r\nCan you prepare an initial pass at the introduction with Pirates-R-Us as the company name?\r\n```\r\n**Response:**\r\n```\r\nno<|im_end|>\r\n```\r\n\r\nYou can see that responses often include prompts, intermediate responses (from langchain?) and GPT training tokens. I am pretty sure this behavior is limited to using Azure. For reference, I'm creating my Service Context like this:\r\n\r\n```python\r\nopenai.api_type = \"azure\"\r\n        openai.api_base = settings.AZURE_CS_OPENAI_BASE\r\n        openai.api_version = settings.AZURE_CS_OPENAI_API_VERSION\r\n        openai.api_key = settings.OPENAI_API_KEY\r\n\r\n        logger.debug(\"get_llama_rag_service_context() - configured openai\")\r\n\r\n        llm = AzureOpenAI(\r\n            deployment_name=settings.AZURE_CS_OPENAI_ENGINE,\r\n            openai_api_key=openai.api_key,\r\n            openai_api_base=openai.api_base,\r\n            openai_api_type=openai.api_type,\r\n            openai_api_version=openai.api_version,\r\n            temperature=settings.OPENAI_TEMPERATURE,\r\n            streaming=stream_response,\r\n        )\r\n        logger.debug(\"get_llama_rag_service_context() - llm created\")\r\n\r\n        embedding_llm = LangchainEmbedding(\r\n            OpenAIEmbeddings(\r\n                model=settings.OPENAI_EMBEDDING_MODEL_NAME,\r\n                deployment=settings.AZURE_CS_OPENAI_EMBEDDING_ENGINE,\r\n                openai_api_key=openai.api_key,\r\n                openai_api_base=openai.api_base,\r\n                openai_api_type=openai.api_type,\r\n                openai_api_version=openai.api_version,\r\n            ),\r\n            embed_batch_size=1,\r\n        )\r\n        logger.debug(\"get_llama_rag_service_context() - configured embedding llm\")\r\n\r\n        llm_predictor = LLMPredictor(llm=llm)\r\n\r\n        service_context = ServiceContext.from_defaults(\r\n            llm_predictor=llm_predictor, embed_model=embedding_llm\r\n        )\r\n```\r\n        \r\nAny idea what's up here? I wrote a function to try to clean some of this up, but it's not perfect and the overall performance using the Azure LLM seems much more prone to not answering my question or giving me back these weird responses. Not sure if that's due to something I'm doing or something unique to how Azure hosts their GPT instances.\r\n\r\n### Version\r\n\r\n0.6.30 (and saw this with early versions too but didn't have time to focus on it)\r\n\r\n### Steps to Reproduce\r\n\r\nNot sure if this is specifically related to my setup, but here's the high-level of what I'm doing:\r\n\r\n- Create a SimpleDirectoryReader\r\n- Load a directory with docx files\r\n- Creat a GPTVectorStoreIndex with AZURE Open AI as LLM\r\n- Persist to disk\r\n- Reload\r\n- Run Query\r\n\r\n### Relevant Logs/Tracbacks\r\n\r\n```shell\r\nThere are no errors, so not sure what to paste here.\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6631/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6631/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6630",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6630/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6630/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6630/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6630",
        "id": 1779618742,
        "node_id": "PR_kwDOIWuq585ULY5J",
        "number": 6630,
        "title": "bring our loaders back in line with llama-hub",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T19:34:22Z",
        "updated_at": "2023-08-28T17:10:07Z",
        "closed_at": "2023-06-28T19:58:25Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6630",
            "html_url": "https://github.com/run-llama/llama_index/pull/6630",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6630.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6630.patch",
            "merged_at": "2023-06-28T19:58:25Z"
        },
        "body": "# Description\r\n\r\nSimpleDirectoryReader was not passing metadata correctly to sub-loaders (it was changing metadata from `None` to `{}`), causing downstream loaders to not properly set metadata\r\n\r\nFixes https://github.com/jerryjliu/llama_index/issues/6629\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] I stared at the code and made sure it makes sense",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6630/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 1,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6630/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6629",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6629/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6629/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6629/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6629",
        "id": 1779573003,
        "node_id": "I_kwDOIWuq585qEiEL",
        "number": 6629,
        "title": "[Bug]: Explicitly imported SimpleDirectoryReader does not add extra_info to parsed nodes",
        "user": {
            "login": "JSv4",
            "id": 5049984,
            "node_id": "MDQ6VXNlcjUwNDk5ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5049984?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JSv4",
            "html_url": "https://github.com/JSv4",
            "followers_url": "https://api.github.com/users/JSv4/followers",
            "following_url": "https://api.github.com/users/JSv4/following{/other_user}",
            "gists_url": "https://api.github.com/users/JSv4/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JSv4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JSv4/subscriptions",
            "organizations_url": "https://api.github.com/users/JSv4/orgs",
            "repos_url": "https://api.github.com/users/JSv4/repos",
            "events_url": "https://api.github.com/users/JSv4/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JSv4/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-28T19:10:56Z",
        "updated_at": "2023-06-28T19:58:27Z",
        "closed_at": "2023-06-28T19:58:26Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nI am deploying an app based on Llamaindex inside of a docker container. I ran into a docker-related issue using the `download_loader()` to create a `SimpleDirectoryReader`:\r\n\r\n``` python \r\n  # Create the GPTVectorStoreIndex\r\n  logger.debug(f\"Build index from {tempdir_path}\")\r\n  SimpleDirectoryReader = download_loader(\"SimpleDirectoryReader\")\r\n  loader = SimpleDirectoryReader(\r\n      tempdir_path, recursive=True, exclude_hidden=False\r\n  )\r\n  documents = loader.load_data()\r\n  logger.debug(\"Loaded...\")\r\n```\r\n\r\nThe dynamic installation and loading of `SimpleDirectoryReader` worked as expected for the most part in a local container that has the local app directory as a read/write volume. After a query, the source node looks like this:\r\n\r\n```\r\nNode: ['__abstractmethods__', '__annotations__', '__class__', '__dataclass_fields__', '__dataclass_params__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__match_args__', '__module__', '__ne__', '__new__', '__post_init__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_generate_doc_hash', 'child_node_ids', 'dataclass_json_config', 'doc_hash', 'doc_id', 'embedding', 'extra_info', 'extra_info_str', 'from_dict', 'from_json', 'get_doc_hash', 'get_doc_id', 'get_embedding', 'get_node_info', 'get_origin_type', 'get_text', 'get_type', 'get_types', 'is_doc_id_none', 'is_text_none', 'next_node_id', 'node_info', 'parent_node_id', 'prev_node_id', 'ref_doc_id', 'relationships', 'schema', 'text', 'to_dict', 'to_json']\r\nExtra info: {'file_name': 'NVCA-2020-Stock-Purchase-Agreement-1-September-1-2020_eVQ4P4y.docx'}\r\nNode info: {'start': 56846, 'end': 60980, '_node_type': '1'}\r\n[NVCA-2020-Stock-Purchase-Agreement-1-September-1-2020.docx](https://github.com/jerryjliu/llama_index/files/11899087/NVCA-2020-Stock-Purchase-Agreement-1-September-1-2020.docx)\r\n```\r\n\r\n**In production,** however, my Docker container does not have write access to the python install directory or packages dir,  *but* it appears loading the `SimpleDirectoryReader` using `download_loader` in this way tries to modify packages on the fly (not a huge surprise, but I hadn't considered this ahead of time). I didn't want to have the container modifying my Python packages dynamically for a) security reason and b) this has a performance penalty as the containers will be loaded and stopped repeatedly and so this install process needs to re-occur repeatedly, increasing latency and bandwidth costs. \r\n\r\nI tried to work around this by manually installing `llama-hub` when creating the container and then loading `SimpleDirectoryLoader` explicitly like so:\r\n\r\n```python\r\nfrom llama_index.readers.file.base import SimpleDirectoryReader\r\n\r\n# Create the GPTVectorStoreIndex\r\nlogger.debug(f\"Build index from {tempdir_path}\")\r\nloader = SimpleDirectoryReader(\r\n    tempdir_path, recursive=True, exclude_hidden=False\r\n)\r\ndocuments = loader.load_data()\r\nlogger.debug(\"Loaded...\")\r\n```\r\n\r\nNow my docker issue is solved, there are no run time modifications of my python directory, **BUT** it appears the instantiated readers are no longer adding the `extra_info` metadata. Here's my logs related to the source nodes:\r\n\r\n```\r\nNode: ['__abstractmethods__', '__annotations__', '__class__', '__dataclass_fields__', '__dataclass_params__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__match_args__', '__module__', '__ne__', '__new__', '__post_init__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__weakref__', '_abc_impl', '_generate_doc_hash', 'child_node_ids', 'dataclass_json_config', 'doc_hash', 'doc_id', 'embedding', 'extra_info', 'extra_info_str', 'from_dict', 'from_json', 'get_doc_hash', 'get_doc_id', 'get_embedding', 'get_node_info', 'get_origin_type', 'get_text', 'get_type', 'get_types', 'is_doc_id_none', 'is_text_none', 'next_node_id', 'node_info', 'parent_node_id', 'prev_node_id', 'ref_doc_id', 'relationships', 'schema', 'text', 'to_dict', 'to_json']\r\nExtra info: None\r\nNode info: {'start': 24890, 'end': 29195, '_node_type': '1'}\r\n```\r\n\r\nAny idea what's up here?\r\n\r\n\n\n### Version\n\n0.6.30\n\n### Steps to Reproduce\n\nInstantiate a SimpleDirectoryReader using download_loader() and load attached docx. `Extra_info` will be populated in returned queries' sources. \r\n\r\nThen, instantiate a SimpleDirectoryReader loaded via `from llama_index.readers.file.base import SimpleDirectoryReader`. Create an index with the same docx and run a query. No extra_info is attached to the response nodes. \r\n\r\n[NVCA-2020-Stock-Purchase-Agreement-1-September-1-2020.docx](https://github.com/jerryjliu/llama_index/files/11899174/NVCA-2020-Stock-Purchase-Agreement-1-September-1-2020.docx)\r\n\n\n### Relevant Logs/Tracbacks\n\n```shell\nSee above\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6629/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6629/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6628",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6628/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6628/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6628/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6628",
        "id": 1779485741,
        "node_id": "PR_kwDOIWuq585UK6ct",
        "number": 6628,
        "title": "add duckdb + sql query engine notebook",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T18:29:02Z",
        "updated_at": "2023-06-28T19:03:17Z",
        "closed_at": "2023-06-28T19:03:16Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6628",
            "html_url": "https://github.com/run-llama/llama_index/pull/6628",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6628.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6628.patch",
            "merged_at": "2023-06-28T19:03:16Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6628/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6628/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6627",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6627/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6627/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6627/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6627",
        "id": 1779466494,
        "node_id": "I_kwDOIWuq585qEID-",
        "number": 6627,
        "title": "[Feature Request]: Pattern: Enriched Document Embedding",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-28T18:19:04Z",
        "updated_at": "2023-07-08T15:36:09Z",
        "closed_at": "2023-07-08T15:36:09Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nTo have a more robust embedding, I propose the following strategies:\r\n\r\n1. Extract title, file name, subsections, other metadata (summary of sub section and article, keyword extraction)\r\n2. Embed a summary of the previous chunk and next chunk.\r\n\r\nProblems solved:\r\n1. Coreference resolution / document context \r\n    - (e.g. multiple 10Ks from the different company over multiple years have the similar sections with similar contents but do not state the year nor company - the metadata or contextual data). \r\n    - This is a source of retrieval-augmented hallucination.\r\n\r\nStrategies for section-wise extraction:\r\n1. Hierarchical\r\n    - Hierarchically construct a summary using the tree-summarizer pattern. This special summary will attempt to hierarchically construct the table of contents by identifying sections and the location of the source documents among them.\r\n2. Linear\r\n    - Attempt to linearly extract subsection titles\r\n\r\n\r\nIn summary, here are the two specific deliverables:\r\n- [ ] Previous and next chunk summary metadata extractor\r\n  - Require `include_prev_next_rel`\r\n- [ ] Title, subsection, keyword metadata extractor\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6627/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6627/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6626",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6626/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6626/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6626/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6626",
        "id": 1779418526,
        "node_id": "PR_kwDOIWuq585UKrc7",
        "number": 6626,
        "title": "More postgres metadata fixes",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T17:44:28Z",
        "updated_at": "2023-08-28T17:10:22Z",
        "closed_at": "2023-06-28T17:49:06Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6626",
            "html_url": "https://github.com/run-llama/llama_index/pull/6626",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6626.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6626.patch",
            "merged_at": "2023-06-28T17:49:06Z"
        },
        "body": "# Description\r\n\r\nsmall kwarg change to match the new `metadata_` kwargs ",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6626/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6626/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6625",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6625/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6625/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6625/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6625",
        "id": 1779378653,
        "node_id": "I_kwDOIWuq585qDynd",
        "number": 6625,
        "title": "[Feature Request]: variation on HyDE - HyQE",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-28T17:18:56Z",
        "updated_at": "2023-11-15T16:01:54Z",
        "closed_at": "2023-11-15T16:01:53Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nSince HyDE introduces latency at query time which is extremely undesirable, I propose an opposite approach - hypothetical question embedding.\r\n\r\nOne should generate multiple questions which may be answered by the document. Then, one embeds the same document multiple times with each generated question.\r\n\r\nRequired steps:\r\n1. Provide a basic benchmark where HyDE shines\r\n2. Show that HyQE can match HyDE's accuracy/recall while outmatching the query latency at the cost of higher embedding, storage and retrieval cost\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6625/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6625/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6624",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6624/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6624/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6624/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6624",
        "id": 1779360832,
        "node_id": "I_kwDOIWuq585qDuRA",
        "number": 6624,
        "title": "[Question]:  AuthenticationError: No API key provided",
        "user": {
            "login": "SeloSlav",
            "id": 8828948,
            "node_id": "MDQ6VXNlcjg4Mjg5NDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8828948?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SeloSlav",
            "html_url": "https://github.com/SeloSlav",
            "followers_url": "https://api.github.com/users/SeloSlav/followers",
            "following_url": "https://api.github.com/users/SeloSlav/following{/other_user}",
            "gists_url": "https://api.github.com/users/SeloSlav/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SeloSlav/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SeloSlav/subscriptions",
            "organizations_url": "https://api.github.com/users/SeloSlav/orgs",
            "repos_url": "https://api.github.com/users/SeloSlav/repos",
            "events_url": "https://api.github.com/users/SeloSlav/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SeloSlav/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-28T17:07:41Z",
        "updated_at": "2023-07-22T01:52:32Z",
        "closed_at": "2023-07-22T01:52:32Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [X] I have searched both the documentation and discord for an answer.\n\n### Question\n\n**Description:**\r\nI encountered an issue while running the llama_index_server.py script. It seems that the OpenAI API key is not being properly utilized, resulting in an \"AuthenticationError: No API key provided\" exception.\r\n\r\n**Expected Behavior:**\r\nThe script should initialize the LLMPredictor with the provided OpenAI API key and continue running without any authentication errors.\r\n\r\n**Actual Behavior:**\r\nThe script raises an AuthenticationError with the message \"No API key provided.\"\r\n\r\n**Code:**\r\n\r\n```\r\n#  /server/llama_index_server.py\r\n\r\nfrom flask import Flask, request, Response\r\nfrom flask_cors import CORS\r\nfrom dotenv import load_dotenv\r\nimport os\r\nimport pandas as pd\r\nfrom llama_index import GPTVectorStoreIndex, SimpleDirectoryReader\r\nfrom llama_index import Document\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom llama_index import LLMPredictor\r\nfrom llama_index import ServiceContext\r\n\r\napp = Flask(__name__)\r\nCORS(app)\r\n\r\nload_dotenv()\r\n\r\n# Get the API key from the environment variable\r\napi_key = os.getenv('OPENAI_API_KEY')\r\n\r\n# Print the API key for verification\r\n# print(f\"API key: {api_key}\")\r\n\r\n# Loading documents from an Excel file\r\ndf = pd.read_excel('data/SupplierSample.xlsx')\r\n\r\n# Convert DataFrame rows into documents\r\n# Concatenate all column values into a single string for each row\r\ndocuments = [Document(text=' '.join(map(str, row.values))) for _, row in df.iterrows()]\r\n\r\n# Construct a simple vector index\r\nindex = GPTVectorStoreIndex(documents)\r\n\r\n# LLM that supports streaming\r\nllm_predictor = LLMPredictor(llm=ChatOpenAI(api_key=api_key, temperature=0, model_name=\"gpt-3.5-turbo\", streaming=True))\r\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\r\n\r\n# Configure query engine to use streaming\r\nquery_engine = index.as_query_engine(streaming=True, similarity_top_k=1)\r\n\r\n@app.route('/api/query', methods=['POST'])\r\ndef query():\r\n    # Get the payload from the request\r\n    payload = request.json\r\n    \r\n    # Get the question from the messages in the payload\r\n    question = [m['content'] for m in payload['messages'] if m['role'] == 'user'][-1]\r\n    \r\n    # Now, query returns a StreamingResponse object\r\n    streaming_response = query_engine.query(question)\r\n\r\n    def response_stream():\r\n        for text in streaming_response.response_gen:\r\n            yield text + \"\\n\"\r\n\r\n    return Response(response_stream(), mimetype=\"text/event-stream\")\r\n\r\nif __name__ == '__main__':\r\n    # Start the server, to run this script use \"python llama_index_server.py\" in terminal\r\n    app.run(port=5000)\r\n```\r\n\r\n**Error Message:**\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"llama_index_server.py\", line 33, in <module>\r\n    index = GPTVectorStoreIndex(documents)\r\n  ...\r\n  File \"llama_index\\embeddings\\openai.py\", line 150, in get_embeddings\r\n    ...\r\nopenai.error.AuthenticationError: No API key provided.\r\n```\r\n\r\n**Additional Information:**\r\n\r\n    The OPENAI_API_KEY environment variable is properly set and printed to the console before the error occurs.\r\n    The OpenAI API key is retrieved using os.getenv('OPENAI_API_KEY') and assigned to the api_key variable.\r\n    The LLMPredictor is initialized with the ChatOpenAI model, but the API key is not passed to the model.\r\n\r\n**Possible Solution:**\r\nTo resolve this issue, the retrieved API key (api_key) should be passed as an argument to the ChatOpenAI model during initialization. This can be done as follows:\r\n\r\n```\r\nllm_predictor = LLMPredictor(llm=ChatOpenAI(api_key=api_key, temperature=0, model_name=\"gpt-3.5-turbo\", streaming=True))\r\n```\r\n\r\nPlease let me know if you need any further information or assistance with this issue.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6624/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6624/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6623",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6623/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6623/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6623/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6623",
        "id": 1779338179,
        "node_id": "I_kwDOIWuq585qDovD",
        "number": 6623,
        "title": "[Feature Request]: UX: Varied Latency in Retrieval",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-28T16:52:27Z",
        "updated_at": "2023-10-05T16:03:39Z",
        "closed_at": "2023-10-05T16:03:38Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nCertain query pathways like HyDE can produce better results, but at the cost of increased latency.\r\n\r\nThis can severely impact UX as latency in chat interfaces, as in other interfaces, are known to cause loss of engagement.\r\n\r\nThis is of course not simply limited to HyDE but also multistep queries and other usages of external tools.\r\n\r\nThere are several solutions to this. The user interface can communicate the steps that the agent is internally performing (in a non-intrusive way). This is a more informative alternative to displaying `...` or `typing...`, and has parallels to a loading bar - communicating that some ongoing work is being carried out.\r\n\r\nHowever, I believe that an alternative exists to provide intermediate answers which may be satisfactory. It takes several forms:\r\n1. The UI will asynchronously respond to new information being available, sending multiple messages. (not 1-for-1 turn based like chat-gpt). Example: `\"I don't seem to have found any contextual information on the issue. Did you mean __?\". User does not respond, but is reading. \"After searching more thoroughly, I have found some relevant information. Based on ___, it seems ...)`\r\n2. From the observation that a conversation usually stays on topic for several turns, the asynchronously fetched information will now be available in the agent context, so that follow up questions can refer to it. (how to seamlessly integrate this into the context window is an open question. Perhaps dumping it in as additional context could already help.).\r\n\r\nReconciling answers provided by varied levels of latency in a coherent way is an interesting question to me. For instance, if the newly available retrieval does not differ significantly to the previous retrievals (perhaps based on simple embeddings rather than HyDE), perhaps the chat agent should not elaborate further in the case of 1.\r\n\r\n\r\n\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6623/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6623/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6622",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6622/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6622/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6622/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6622",
        "id": 1779219096,
        "node_id": "PR_kwDOIWuq585UJ_RX",
        "number": 6622,
        "title": "modify column name for postgres",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T15:38:57Z",
        "updated_at": "2023-08-28T17:10:44Z",
        "closed_at": "2023-06-28T15:58:56Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6622",
            "html_url": "https://github.com/run-llama/llama_index/pull/6622",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6622.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6622.patch",
            "merged_at": "2023-06-28T15:58:56Z"
        },
        "body": "# Description\r\n\r\nPostgres cannot have a column named \"metadata\" -- so, need to rename it :) \r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6622/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6622/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6621",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6621/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6621/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6621/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6621",
        "id": 1779164279,
        "node_id": "I_kwDOIWuq585qC-R3",
        "number": 6621,
        "title": "[Documentation]: Defining Prompts",
        "user": {
            "login": "iooab10",
            "id": 54444854,
            "node_id": "MDQ6VXNlcjU0NDQ0ODU0",
            "avatar_url": "https://avatars.githubusercontent.com/u/54444854?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iooab10",
            "html_url": "https://github.com/iooab10",
            "followers_url": "https://api.github.com/users/iooab10/followers",
            "following_url": "https://api.github.com/users/iooab10/following{/other_user}",
            "gists_url": "https://api.github.com/users/iooab10/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iooab10/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iooab10/subscriptions",
            "organizations_url": "https://api.github.com/users/iooab10/orgs",
            "repos_url": "https://api.github.com/users/iooab10/repos",
            "events_url": "https://api.github.com/users/iooab10/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iooab10/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318866,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/documentation",
                "name": "documentation",
                "color": "0075ca",
                "default": true,
                "description": "Improvements or additions to documentation"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-28T15:07:45Z",
        "updated_at": "2023-07-22T01:52:45Z",
        "closed_at": "2023-07-22T01:52:45Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Documentation Issue Description\n\nTHis page... \r\n\r\nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_prompts.html#full-example\r\n\r\nBrought me here as a promise of a FULL Example of a custom prompt.  \r\n\r\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/paul_graham_essay/TestEssay.ipynb\r\n\r\nYes, this code example uses a customized prompt.  How do I see that custom prompt in action?  What question(s) do I ask because I do NOT see any special prompts in action. \r\n\n\n### Documenation Link\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_prompts.html#full-example",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6621/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6621/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6620",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6620/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6620/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6620/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6620",
        "id": 1778878321,
        "node_id": "I_kwDOIWuq585qB4dx",
        "number": 6620,
        "title": "[Bug]: Service context is not used in some cases",
        "user": {
            "login": "jma7889",
            "id": 225801,
            "node_id": "MDQ6VXNlcjIyNTgwMQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/225801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jma7889",
            "html_url": "https://github.com/jma7889",
            "followers_url": "https://api.github.com/users/jma7889/followers",
            "following_url": "https://api.github.com/users/jma7889/following{/other_user}",
            "gists_url": "https://api.github.com/users/jma7889/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jma7889/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jma7889/subscriptions",
            "organizations_url": "https://api.github.com/users/jma7889/orgs",
            "repos_url": "https://api.github.com/users/jma7889/repos",
            "events_url": "https://api.github.com/users/jma7889/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jma7889/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-28T12:54:30Z",
        "updated_at": "2023-07-19T16:25:18Z",
        "closed_at": "2023-07-19T16:25:17Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\r\nI think this bug is critical because for at least for tree index users with custom service context. Wrong model and model settings are used. It impacts result cost and quality.\r\n\r\nI use service_context to specify model gpt-3.5-turbo, I use tree index. It works fine when tree_child_branch_factor is 1. However, when tree_child_branch_factor is 2, about half of the requests to OpenAI API uses default \"text-davinci-003\", and temperature is also default, not the value in service context. But the other half of the requests are correctly use the settings from service context.\r\n\r\n\r\n### Version\r\n\r\nllama-index-0.6.35\r\n\r\n### Steps to Reproduce\r\n\r\nthe code snippets:\r\n\r\n```python\r\n...\r\n        predictors = {\r\n            ModelChoice.GPT35: LLMPredictor(llm=ChatOpenAI(temperature=0.01, model_name=\"gpt-3.5-turbo\")),\r\n...\r\n        predictor = predictors[model_choice]\r\n        chunk_size = chunk_sizes[model_choice]\r\n        return ServiceContext.from_defaults(llm_predictor=predictor, chunk_size=chunk_size)\r\n...\r\n            reader = SimpleDirectoryReader(input_dir=self.input_dir)\r\n            documents = reader.load_data()\r\n            index = GPTTreeIndex.from_documents(documents, service_context=service_context)\r\n...\r\n            retriever = TreeSelectLeafRetriever(index=self.index, child_branch_factor=self.tree_child_branch_factor)\r\n            self.query_engine = RetrieverQueryEngine(retriever=retriever)\r\n...\r\n        query_engine_manager.query_engine.query(\"78890 which model is it?\")\r\n\r\n```\r\n\r\n\r\n### Relevant Logs/Tracbacks\r\n\r\n```shell\r\nI use the debug log to confirm this, for example\r\n\r\nDEBUG:openai:api_version=None data='{\"prompt\":  ... ... \"model\": \"text-davinci-003\", \"temperature\": 0.0, \"max_tokens\": 2367, \"top_p\": 1, \"frequency_penalty\": 0, \"presence_penalty\": 0, \"n\": 1, \"logit_bias\": {}}' message='Post details'\r\n```\r\nupdate 1: \r\nthe issue is worse than initial writing.  When tree_child_branch_factor is 1, the query calls the API 3 times, 2 used model spec in service context, but the last one used default text-davinci-003 settings.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6620/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6620/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6619",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6619/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6619/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6619/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6619",
        "id": 1778864830,
        "node_id": "PR_kwDOIWuq585UIxSB",
        "number": 6619,
        "title": "Fix recovering metadata from docstore",
        "user": {
            "login": "HollowMan6",
            "id": 43995067,
            "node_id": "MDQ6VXNlcjQzOTk1MDY3",
            "avatar_url": "https://avatars.githubusercontent.com/u/43995067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/HollowMan6",
            "html_url": "https://github.com/HollowMan6",
            "followers_url": "https://api.github.com/users/HollowMan6/followers",
            "following_url": "https://api.github.com/users/HollowMan6/following{/other_user}",
            "gists_url": "https://api.github.com/users/HollowMan6/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/HollowMan6/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/HollowMan6/subscriptions",
            "organizations_url": "https://api.github.com/users/HollowMan6/orgs",
            "repos_url": "https://api.github.com/users/HollowMan6/repos",
            "events_url": "https://api.github.com/users/HollowMan6/events{/privacy}",
            "received_events_url": "https://api.github.com/users/HollowMan6/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2023-06-28T12:46:00Z",
        "updated_at": "2023-07-01T19:16:17Z",
        "closed_at": "2023-07-01T19:12:42Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6619",
            "html_url": "https://github.com/run-llama/llama_index/pull/6619",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6619.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6619.patch",
            "merged_at": null
        },
        "body": "# Description\r\n\r\nFix recovering metadata from docstore\r\n\r\n## Type of Change\r\n\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\nTest code:\r\n```bash\r\n\r\n\r\nfrom llama_index import VectorStoreIndex, SimpleDirectoryReader\r\nfrom llama_index.vector_stores import MilvusVectorStore\r\nfrom llama_index.storage.storage_context import StorageContext\r\nfrom llama_index.storage.index_store import MongoIndexStore\r\nfrom llama_index.storage.docstore import MongoDocumentStore\r\n\r\nMONGO_URL = \"mongodb://localhost:27017\"\r\n\r\ndef metadata(path):\r\n    return {\"path\": path}\r\n\r\ndocuments = SimpleDirectoryReader('data/paul_graham/', file_metadata=metadata).load_data()\r\ndocstore = MongoDocumentStore.from_uri(MONGO_URL)\r\ndocstore.add_documents(documents)\r\nindex_store = MongoIndexStore.from_uri(MONGO_URL)\r\nvector_store = MilvusVectorStore(overwrite=True)\r\nstorage_context = StorageContext.from_defaults(vector_store=vector_store, index_store=index_store, docstore=docstore)\r\nindex = VectorStoreIndex.from_documents(documents, storage_context=storage_context)\r\n\r\nquery_engine = index.as_query_engine()\r\nresponse = query_engine.query(\"What did the author learn?\")\r\nfor n in response.source_nodes:\r\n    print(n.node.metadata)\r\n```\r\n\r\nShould display:\r\n```bash\r\n{'path': 'data/paul_graham/paul_graham_essay.txt'}\r\n```\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [X] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [X] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6619/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6619/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6618",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6618/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6618/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6618/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6618",
        "id": 1778815583,
        "node_id": "PR_kwDOIWuq585UImxR",
        "number": 6618,
        "title": "MD reader: remove html tags and leave linebreaks alone",
        "user": {
            "login": "tilleul",
            "id": 3061106,
            "node_id": "MDQ6VXNlcjMwNjExMDY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3061106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tilleul",
            "html_url": "https://github.com/tilleul",
            "followers_url": "https://api.github.com/users/tilleul/followers",
            "following_url": "https://api.github.com/users/tilleul/following{/other_user}",
            "gists_url": "https://api.github.com/users/tilleul/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tilleul/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tilleul/subscriptions",
            "organizations_url": "https://api.github.com/users/tilleul/orgs",
            "repos_url": "https://api.github.com/users/tilleul/repos",
            "events_url": "https://api.github.com/users/tilleul/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tilleul/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-28T12:13:26Z",
        "updated_at": "2023-06-28T22:11:57Z",
        "closed_at": "2023-06-28T22:11:56Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6618",
            "html_url": "https://github.com/run-llama/llama_index/pull/6618",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6618.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6618.patch",
            "merged_at": "2023-06-28T22:11:56Z"
        },
        "body": "# Description\r\n\r\nReturned markdown chunks were different if they were in a MD heading section or not.\r\n\r\nWith a MD heading, the chunk had html tags removed and line breaks (\\n) preserved.\r\n\r\nWithout a MD heading, the html tags were not removed but line breaks were, destroying MD tables (among other MD formatting that require line breaks like lists etc.)\r\n\r\nFixes # (issue)\r\nI've simply copied the re.sub() from the headings branch to the no-headings branch.\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6618/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6618/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6617",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6617/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6617/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6617/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6617",
        "id": 1778802746,
        "node_id": "I_kwDOIWuq585qBmA6",
        "number": 6617,
        "title": "[Feature Request]: Create MLFlow Callback handler",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-28T12:04:57Z",
        "updated_at": "2023-10-05T16:03:43Z",
        "closed_at": "2023-10-05T16:03:42Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nAs an intermediate step to designing a robust callback system meant for tracing, logging, metrics collection in an async and concurrent setting, let's first implement more consumers of the callback system. \r\n\r\nMLFlow is a good first step.\r\n\r\nOther candidates:\r\n1. CometML\r\n2. ClearML\r\n3. `Evaluator`, a new component of `LlamaIndex` that provides various mechanisms for collecting human feedback on output quality\r\n\r\nI will also attempt to better understand the requirements for callbacks, and perhaps think of more use-cases, outside of those mentioned.\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6617/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6617/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6616",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6616/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6616/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6616/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6616",
        "id": 1778383231,
        "node_id": "PR_kwDOIWuq585UHJaW",
        "number": 6616,
        "title": "[version] bump version to 0.6.35",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T07:35:22Z",
        "updated_at": "2023-06-28T08:21:08Z",
        "closed_at": "2023-06-28T08:21:07Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6616",
            "html_url": "https://github.com/run-llama/llama_index/pull/6616",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6616.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6616.patch",
            "merged_at": "2023-06-28T08:21:07Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6616/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6616/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6615",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6615/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6615/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6615/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6615",
        "id": 1778326034,
        "node_id": "PR_kwDOIWuq585UG9id",
        "number": 6615,
        "title": "Introduce `LLM` abstraction and initial implementations",
        "user": {
            "login": "Disiok",
            "id": 5567282,
            "node_id": "MDQ6VXNlcjU1NjcyODI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5567282?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Disiok",
            "html_url": "https://github.com/Disiok",
            "followers_url": "https://api.github.com/users/Disiok/followers",
            "following_url": "https://api.github.com/users/Disiok/following{/other_user}",
            "gists_url": "https://api.github.com/users/Disiok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Disiok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Disiok/subscriptions",
            "organizations_url": "https://api.github.com/users/Disiok/orgs",
            "repos_url": "https://api.github.com/users/Disiok/repos",
            "events_url": "https://api.github.com/users/Disiok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Disiok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-28T06:52:59Z",
        "updated_at": "2023-07-03T00:48:19Z",
        "closed_at": "2023-07-02T02:44:40Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6615",
            "html_url": "https://github.com/run-llama/llama_index/pull/6615",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6615.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6615.patch",
            "merged_at": "2023-07-02T02:44:40Z"
        },
        "body": "### Summary\r\n* Introduce `LLM` interface with: \r\n  * `metadata` property\r\n  * `chat`/`stream_chat` endpoint: taking in list of messages, return chat response (or stream)\r\n  * `complete`/`stream_complete` endpoint: taking in a single string prompt, return completion response (or stream)\r\n  * async versions `achat` and `acomplete` \r\n > Note: the intention here is to normalize the interface of pure completion API and chat API. \r\n* Introduce `CustomLLM` as the default abstract base class for implementing new LLMs\r\n> Note: only requires `complete`, `stream_complete`, `metadata` implementations. Other endpoints use default implementation.\r\n* Introduce `OpenAI`, `LangChainLLM`, `HuggingFaceLLM` as initial implementations.\r\n\r\n### More Details\r\n* Introduce `OpenAI`\r\n> Note: this class supports both non-chat and chat models. We normalize the interface by e.g. converting messages to string prompt for non-chat models, and converting string prompt to messages to chat models.\r\n* Introduce `HuggingFaceLLM` (as a refactor of `HuggingFacePredictor`)\r\n* Introduce `LangChainLLM` (as a refactor of `LLMPredictor`)\r\n\r\n### Note\r\n* This PR is no-op, not yet hooked up with the rest of the framework. \r\n\r\n### Related PRs\r\n* https://github.com/jerryjliu/llama_index/pull/6530\r\n\r\n### Todos\r\n- [x] completion interface\r\n- [x] chat interface\r\n- [x] streaming\r\n- [x] configurations\r\n- [x] function calling\r\n- [ ] async\r\n- [ ] token counting",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6615/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6615/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6614",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6614/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6614/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6614/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6614",
        "id": 1777925795,
        "node_id": "PR_kwDOIWuq585UFnHg",
        "number": 6614,
        "title": "Backport old node name",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-28T00:03:52Z",
        "updated_at": "2023-08-28T17:10:00Z",
        "closed_at": "2023-06-28T01:23:10Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6614",
            "html_url": "https://github.com/run-llama/llama_index/pull/6614",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6614.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6614.patch",
            "merged_at": "2023-06-28T01:23:10Z"
        },
        "body": "# Description\r\n\r\nSimple backport of old `Node` object name, to avoid messy breakage.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6614/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6614/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6613",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6613/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6613/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6613/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6613",
        "id": 1777814213,
        "node_id": "PR_kwDOIWuq585UFOlb",
        "number": 6613,
        "title": "doc patches",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-27T22:00:21Z",
        "updated_at": "2023-08-28T17:11:14Z",
        "closed_at": "2023-06-27T22:04:31Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6613",
            "html_url": "https://github.com/run-llama/llama_index/pull/6613",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6613.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6613.patch",
            "merged_at": "2023-06-27T22:04:31Z"
        },
        "body": "# Description\r\n\r\nSome mintor docs needed updating\r\n\r\nFixes https://github.com/jerryjliu/llama_index/issues/6611\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6613/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6613/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6612",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6612/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6612/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6612/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6612",
        "id": 1777801446,
        "node_id": "PR_kwDOIWuq585UFLvo",
        "number": 6612,
        "title": "fix opensearch",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-27T21:47:45Z",
        "updated_at": "2023-08-28T17:11:03Z",
        "closed_at": "2023-06-27T22:45:46Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6612",
            "html_url": "https://github.com/run-llama/llama_index/pull/6612",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6612.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6612.patch",
            "merged_at": "2023-06-27T22:45:46Z"
        },
        "body": "# Description\r\n\r\nOpenSearch was not serializing the new node structure well. This fix brings it in-line with most vector stores.\r\n\r\nFixes https://github.com/jerryjliu/llama_index/issues/6609\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\n- [x] I stared at the code and made sure it makes sense\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6612/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6612/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6611",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6611/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6611/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6611/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6611",
        "id": 1777719322,
        "node_id": "I_kwDOIWuq585p9dga",
        "number": 6611,
        "title": "[Documentation]: The loading documents example does not work with latest versions",
        "user": {
            "login": "kadereub",
            "id": 31546506,
            "node_id": "MDQ6VXNlcjMxNTQ2NTA2",
            "avatar_url": "https://avatars.githubusercontent.com/u/31546506?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kadereub",
            "html_url": "https://github.com/kadereub",
            "followers_url": "https://api.github.com/users/kadereub/followers",
            "following_url": "https://api.github.com/users/kadereub/following{/other_user}",
            "gists_url": "https://api.github.com/users/kadereub/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kadereub/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kadereub/subscriptions",
            "organizations_url": "https://api.github.com/users/kadereub/orgs",
            "repos_url": "https://api.github.com/users/kadereub/repos",
            "events_url": "https://api.github.com/users/kadereub/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kadereub/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318866,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/documentation",
                "name": "documentation",
                "color": "0075ca",
                "default": true,
                "description": "Improvements or additions to documentation"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-27T20:42:52Z",
        "updated_at": "2023-06-27T22:04:32Z",
        "closed_at": "2023-06-27T22:04:32Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Documentation Issue Description\n\nThe example of loading the documents from a list of text strings in Python results in an error using the latest langchain/llama index installations.\r\n\r\nThis code below results in the error.\r\n\r\n```\r\nfrom llama_index import Document\r\n\r\ntext_list = [text1, text2, ...]\r\ndocuments = [Document(t) for t in text_list]\r\n```\r\n\r\nLangchain version: `'0.0.217'`\r\n\r\nLLama Index version: `'0.6.34.post1'`\r\n\r\n\r\n**Error:**\r\n\r\n![image](https://github.com/jerryjliu/llama_index/assets/31546506/f00db798-b6b4-4d93-b608-cd657880848a)\r\n\r\n**Proposed fix:**\r\n\r\n```\r\nfrom llama_index import Document\r\n\r\ntext_list = [text1, text2, ...]\r\ndocuments = [Document(page_content=t) for t in text_list]\r\n```\r\n\r\n\r\n\n\n### Documenation Link\n\nhttps://gpt-index.readthedocs.io/en/latest/guides/primer/usage_pattern.html#load-in-documents",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6611/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6611/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6610",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6610/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6610/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6610/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6610",
        "id": 1777707044,
        "node_id": "PR_kwDOIWuq585UE3AC",
        "number": 6610,
        "title": "Updated SelectionOutputParser to handle JSON objects and arrays",
        "user": {
            "login": "sheresaidon",
            "id": 21957184,
            "node_id": "MDQ6VXNlcjIxOTU3MTg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/21957184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sheresaidon",
            "html_url": "https://github.com/sheresaidon",
            "followers_url": "https://api.github.com/users/sheresaidon/followers",
            "following_url": "https://api.github.com/users/sheresaidon/following{/other_user}",
            "gists_url": "https://api.github.com/users/sheresaidon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sheresaidon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sheresaidon/subscriptions",
            "organizations_url": "https://api.github.com/users/sheresaidon/orgs",
            "repos_url": "https://api.github.com/users/sheresaidon/repos",
            "events_url": "https://api.github.com/users/sheresaidon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sheresaidon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-27T20:31:43Z",
        "updated_at": "2023-06-29T17:24:01Z",
        "closed_at": "2023-06-29T17:24:00Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6610",
            "html_url": "https://github.com/run-llama/llama_index/pull/6610",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6610.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6610.patch",
            "merged_at": "2023-06-29T17:24:00Z"
        },
        "body": "This commit updates the `SelectionOutputParser` class in the llama-index library to correctly handle both JSON objects and arrays. Previously, the `_marshal_llm_to_json` method was designed to extract a JSON array from a string, but it failed when the output was a JSON object, resulting in a `json.JSONDecodeError`.\r\n\r\nThe `_marshal_llm_to_json` method has been modified to check the first character of the string to determine whether it's dealing with a JSON object or array, and adjust its behavior accordingly.\r\n\r\nAdditionally, the `parse` method has been updated to handle the case where the output is a single JSON object (not a list). It now checks if the output is a dictionary, and if so, wraps it in a list.\r\n\r\nThese changes ensure that the `SelectionOutputParser` class can correctly parse both JSON objects and arrays, regardless of the number of tools used in the `LLMSingleSelector`. This should prevent the `json.JSONDecodeError` from occurring in similar scenarios in the future.\r\n\r\n# Description\r\n\r\nThis change addresses an issue in the `SelectionOutputParser` class of the llama-index library where it was unable to correctly parse JSON objects. The `_marshal_llm_to_json` method was designed to extract a JSON array from a string, but it failed when the output was a JSON object. This resulted in a `json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)` error. The motivation for this change was to ensure that the `SelectionOutputParser` class can correctly parse both JSON objects and arrays, regardless of the number of tools used in the `LLMSingleSelector`.\r\n\r\nFixes #6607\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nThe changes were tested by running the `SelectionOutputParser` with both JSON objects and arrays. The tests confirmed that the class can now correctly parse both types of JSON data. Instructions for reproducing the tests are included in the bug report.\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6610/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6610/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6609",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6609/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6609/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6609/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6609",
        "id": 1777699017,
        "node_id": "I_kwDOIWuq585p9YjJ",
        "number": 6609,
        "title": "[Bug]: \"Object of type RelatedNodeInfo is not JSON serializable\" in OpenSearch Vector_Index",
        "user": {
            "login": "nebucaz",
            "id": 961682,
            "node_id": "MDQ6VXNlcjk2MTY4Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/961682?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nebucaz",
            "html_url": "https://github.com/nebucaz",
            "followers_url": "https://api.github.com/users/nebucaz/followers",
            "following_url": "https://api.github.com/users/nebucaz/following{/other_user}",
            "gists_url": "https://api.github.com/users/nebucaz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nebucaz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nebucaz/subscriptions",
            "organizations_url": "https://api.github.com/users/nebucaz/orgs",
            "repos_url": "https://api.github.com/users/nebucaz/repos",
            "events_url": "https://api.github.com/users/nebucaz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nebucaz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-27T20:24:47Z",
        "updated_at": "2023-06-27T22:45:47Z",
        "closed_at": "2023-06-27T22:45:47Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\n\n**TypeError: Object of type RelatedNodeInfo is not JSON serializable**\r\n```\r\nException has occurred: TypeError       (note: full exception trace is shown but execution is paused at: _run_module_as_main)\r\nObject of type RelatedNodeInfo is not JSON serializable\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/json/__init__.py\", line 231, in dumps\r\n    return _default_encoder.encode(obj)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/vector_stores/opensearch.py\", line 122, in <listcomp>\r\n    bulk = \"\\n\".join([json.dumps(v) for v in bulk_req]) + \"\\n\"\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/vector_stores/opensearch.py\", line 122, in index_results\r\n    bulk = \"\\n\".join([json.dumps(v) for v in bulk_req]) + \"\\n\"\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/vector_stores/opensearch.py\", line 226, in add\r\n    self._client.index_results(embedding_results)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/indices/vector_store/base.py\", line 191, in _add_nodes_to_index\r\n    new_ids = self._vector_store.add(embedding_results)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/indices/vector_store/base.py\", line 214, in _build_index_from_nodes\r\n    self._add_nodes_to_index(index_struct, nodes)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/indices/vector_store/base.py\", line 225, in build_index_from_nodes\r\n    return self._build_index_from_nodes(nodes)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/token_counter/token_counter.py\", line 78, in wrapped_llm_predict\r\n    f_return_val = f(_self, *args, **kwargs)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/indices/base.py\", line 68, in __init__\r\n    index_struct = self.build_index_from_nodes(nodes)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/indices/vector_store/base.py\", line 45, in __init__\r\n    super().__init__(\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/llama_index/indices/base.py\", line 96, in from_documents\r\n    return cls(\r\n  File \"main.py\", line 179, in testLLamaIndex\r\n    index = VectorStoreIndex.from_documents(documents=documents, storage_context=storage_context)\r\n  File \"main.py\", line 195, in <module>\r\n    testLLamaIndex()\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/Users/xxx/opt/anaconda3/envs/gpt39/lib/python3.9/runpy.py\", line 197, in _run_module_as_main (Current frame)\r\n    return _run_code(code, main_globals, None,\r\nTypeError: Object of type RelatedNodeInfo is not JSON serializable\r\n```\r\n\n\n### Version\n\n0.6.34.post1\n\n### Steps to Reproduce\n\n1) Create  a directory `test-doc`with 2 text-files (a.txt, b.txt) each containing a single line of the paul-graham-essay\r\n2) Start a docker-container with OpenSearch\r\n3) Run the following Python script to create embeddings of the text in the two text files and use OpenSearch as a VectorIndexStore\r\n\r\n```\r\n    muser = os.getenv(\"OS_MASTER_USERNAME\")\r\n    mpass = os.getenv(\"OS_MASTER_PASSWORD\")\r\n    osendpoint = os.getenv(\"OS_ENDPOINT\")\r\n    endpoint = f\"http://{muser}:{mpass}@{osendpoint}\"\r\n    idx = \"gpt-index-demo\"\r\n\r\n    text_field = \"content\"\r\n    embedding_field = \"embedding\"\r\n\r\n    documents = SimpleDirectoryReader(\"examples/test-doc\").load_data()\r\n    client = OpensearchVectorClient(endpoint, idx, 1536, embedding_field=embedding_field, text_field=text_field)\r\n\r\n    vector_store = OpensearchVectorStore(client)\r\n    storage_context = StorageContext.from_defaults(vector_store=vector_store)\r\n    index = VectorStoreIndex.from_documents(documents=documents, storage_context=storage_context)\r\n```\r\n\r\n4) The Error is thrown at the last line, ocurring in the file 'opensearch.py' on line 121. \r\n\n\n### Relevant Logs/Tracbacks\n\n```shell\nDEBUG:\r\n\r\nDEBUG:llama_index.readers.file.base:> [SimpleDirectoryReader] Total files added: 2\r\n> [SimpleDirectoryReader] Total files added: 2\r\nDEBUG:httpx:load_ssl_context verify=True cert=None trust_env=True http2=False\r\nload_ssl_context verify=True cert=None trust_env=True http2=False\r\nDEBUG:httpx:load_verify_locations cafile='/Users/neo/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/certifi/cacert.pem'\r\nload_verify_locations cafile='/Users/neo/opt/anaconda3/envs/gpt39/lib/python3.9/site-packages/certifi/cacert.pem'\r\nDEBUG:httpcore.connection:connect_tcp.started host='localhost' port=9200 local_address=None timeout=5.0 socket_options=None\r\nconnect_tcp.started host='localhost' port=9200 local_address=None timeout=5.0 socket_options=None\r\nDEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore.backends.sync.SyncStream object at 0x15c58c550>\r\nconnect_tcp.complete return_value=<httpcore.backends.sync.SyncStream object at 0x15c58c550>\r\nDEBUG:httpcore.http11:send_request_headers.started request=<Request [b'PUT']>\r\nsend_request_headers.started request=<Request [b'PUT']>\r\nDEBUG:httpcore.http11:send_request_headers.complete\r\nsend_request_headers.complete\r\nDEBUG:httpcore.http11:send_request_body.started request=<Request [b'PUT']>\r\nsend_request_body.started request=<Request [b'PUT']>\r\nDEBUG:httpcore.http11:send_request_body.complete\r\nsend_request_body.complete\r\nDEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'PUT']>\r\nreceive_response_headers.started request=<Request [b'PUT']>\r\nDEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 400, b'Bad Request', [(b'content-type', b'application/json; charset=UTF-8'), (b'content-encoding', b'gzip'), (b'content-length', b'183')])\r\nreceive_response_headers.complete return_value=(b'HTTP/1.1', 400, b'Bad Request', [(b'content-type', b'application/json; charset=UTF-8'), (b'content-encoding', b'gzip'), (b'content-length', b'183')])\r\nINFO:httpx:HTTP Request: PUT http://admin:admin@localhost:9200/gpt-index-demo \"HTTP/1.1 400 Bad Request\"\r\nHTTP Request: PUT http://admin:admin@localhost:9200/gpt-index-demo \"HTTP/1.1 400 Bad Request\"\r\nDEBUG:httpcore.http11:receive_response_body.started request=<Request [b'PUT']>\r\nreceive_response_body.started request=<Request [b'PUT']>\r\nDEBUG:httpcore.http11:receive_response_body.complete\r\nreceive_response_body.complete\r\nDEBUG:httpcore.http11:response_closed.started\r\nresponse_closed.started\r\nDEBUG:httpcore.http11:response_closed.complete\r\nresponse_closed.complete\r\nDEBUG:llama_index.node_parser.node_utils:> Adding chunk: Before college the two main things I worked on,...\r\n> Adding chunk: Before college the two main things I worked on,...\r\nDEBUG:llama_index.node_parser.node_utils:> Adding chunk: With microcomputers, everything changed. Now yo...\r\n> Adding chunk: With microcomputers, everything changed. Now yo...\r\nDEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/embeddings\r\nmessage='Request to OpenAI API' method=post path=https://api.openai.com/v1/embeddings\r\nDEBUG:openai:api_version=None data='{\"input\": [\"Before college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\", \"With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]\"], \"model\": \"text-embedding-ada-002\", \"encoding_format\": \"base64\"}' message='Post details'\r\napi_version=None data='{\"input\": [\"Before college the two main things I worked on, outside of school, were writing and programming. I didn\\'t write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.\", \"With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. [1]\"], \"model\": \"text-embedding-ada-002\", \"encoding_format\": \"base64\"}' message='Post details'\r\nDEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)\r\nConverted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)\r\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443\r\nStarting new HTTPS connection (1): api.openai.com:443\r\nDEBUG:urllib3.connectionpool:https://api.openai.com:443 \"POST /v1/embeddings HTTP/1.1\" 200 None\r\nhttps://api.openai.com:443 \"POST /v1/embeddings HTTP/1.1\" 200 None\r\nDEBUG:openai:message='OpenAI API response' path=https://api.openai.com/v1/embeddings processing_ms=8702 request_id=76061dd045238dd9a1111b70abb6db10 response_code=200\r\nmessage='OpenAI API response' path=https://api.openai.com/v1/embeddings processing_ms=8702 request_id=76061dd045238dd9a1111b70abb6db10 response_code=200\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6609/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6609/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6608",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6608/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6608/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6608/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6608",
        "id": 1777649106,
        "node_id": "I_kwDOIWuq585p9MXS",
        "number": 6608,
        "title": "[Question]: Using Hugging Face Text Generation Inference with llama-index",
        "user": {
            "login": "Maxusmusti",
            "id": 10506868,
            "node_id": "MDQ6VXNlcjEwNTA2ODY4",
            "avatar_url": "https://avatars.githubusercontent.com/u/10506868?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Maxusmusti",
            "html_url": "https://github.com/Maxusmusti",
            "followers_url": "https://api.github.com/users/Maxusmusti/followers",
            "following_url": "https://api.github.com/users/Maxusmusti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Maxusmusti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Maxusmusti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Maxusmusti/subscriptions",
            "organizations_url": "https://api.github.com/users/Maxusmusti/orgs",
            "repos_url": "https://api.github.com/users/Maxusmusti/repos",
            "events_url": "https://api.github.com/users/Maxusmusti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Maxusmusti/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-27T19:45:51Z",
        "updated_at": "2023-08-18T15:34:46Z",
        "closed_at": "2023-08-18T15:34:46Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [x] I have searched both the documentation and discord for an answer.\n\n### Question\n\nI was curious if there was a recommended approach for using llama-index alongside Hugging Face's [Text Generation Inference Server](https://github.com/huggingface/text-generation-inference).\r\n\r\nThere seems to be langchain support for [defining the llm](https://python.langchain.com/docs/modules/model_io/models/llms/integrations/huggingface_textgen_inference)\r\n\r\nWanted to see if I should use that and pass it directly into my service context, or if I should write an `LLMPredictor` wrapping it, or if there was any other recommended route for utilizing TGIS as the \"llm\".\r\n\r\nFor context, I am currently using Falcon-7B directly with the HuggingFaceLLMPredictor in llama-index, but would like to switch to running Falcon-7B via TGIS, then using llama-index on top of that.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6608/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6608/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6607",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6607/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6607/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6607/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6607",
        "id": 1777513991,
        "node_id": "I_kwDOIWuq585p8rYH",
        "number": 6607,
        "title": "[Bug]: SelectionOutputParser incorrectly parsing Router Query Engine",
        "user": {
            "login": "sheresaidon",
            "id": 21957184,
            "node_id": "MDQ6VXNlcjIxOTU3MTg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/21957184?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sheresaidon",
            "html_url": "https://github.com/sheresaidon",
            "followers_url": "https://api.github.com/users/sheresaidon/followers",
            "following_url": "https://api.github.com/users/sheresaidon/following{/other_user}",
            "gists_url": "https://api.github.com/users/sheresaidon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sheresaidon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sheresaidon/subscriptions",
            "organizations_url": "https://api.github.com/users/sheresaidon/orgs",
            "repos_url": "https://api.github.com/users/sheresaidon/repos",
            "events_url": "https://api.github.com/users/sheresaidon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sheresaidon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-27T18:25:37Z",
        "updated_at": "2023-06-29T17:24:02Z",
        "closed_at": "2023-06-29T17:24:02Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nThe `SelectionOutputParser` class in the llama-index library was unable to correctly parse JSON objects when used with a router query engine and a `LLMSingleSelector` with only one tool. The `_marshal_llm_to_json` method was designed to extract a JSON array from a string, but it failed when the output was a JSON object. This resulted in a `json.JSONDecodeError: Expecting value: line 1 column 1 (char 0)` error.\n\n### Version\n\nThe issue was observed in llama-index version v0.6.34.post1.\n\n### Steps to Reproduce\n\n1. Set up a router query engine with a `LLMSingleSelector` with only one tool.\r\n2. Use the GPT-4 model for the tool.\r\n3. Create an instance of the `SelectionOutputParser` class.\r\n4. Call the `parse` method on this instance, passing a string that represents a JSON object (not an array). For example: `{\"choice\": 1, \"reason\": \"The provided choice does not directly address the question, but it is the only choice available. The question asks for a specific task of data structuring, which is not covered in the given choice.\"}`\r\n4b. also if you attempt to ask a question that does have a tool that matches it still errors\r\n\r\noutput pre marshal {\"choice\": 1, \"reason\": \"The provided choice does not directly address the question, but it is the only choice available. The question asks for a specific task of data structuring, which is not covered in the given choice.\"}\r\noutput post marshal \r\nError parsing JSON response: Expecting value: line 1 column 1 (char 0)\n\n### Relevant Logs/Tracbacks\n\n```shell\n{\r\n  \"type\": \"array\",\r\n  \"items\": [\r\n    {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"choice\": {\r\n          \"type\": \"integer\",\r\n          \"value\": 1\r\n        },\t\r\n        \"reason\": {\r\n          \"type\": \"string\",\r\n          \"value\": \"The choice is relevant as it refers to the structuring of XXX data, which is the task at hand. The task involves XXX into a specific JSON format.\"\r\n        }\r\n      },\r\n      \"required\": [\r\n        \"choice\",\r\n        \"reason\"\r\n      ],\r\n      \"additionalProperties\": false\r\n    }\r\n  ]\r\n}\r\n[2023-06-27 13:50:39 -0400] [79292] [ERROR] Error handling request /send_message\r\nTraceback (most recent call last):\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/gunicorn/workers/gthread.py\", line 271, in handle\r\n    keepalive = self.handle_request(req, conn)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/gunicorn/workers/gthread.py\", line 323, in handle_request\r\n    respiter = self.wsgi(environ, resp.start_response)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask/app.py\", line 2213, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask/app.py\", line 2193, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask/app.py\", line 2190, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask/app.py\", line 1486, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask/app.py\", line 1484, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask/app.py\", line 1469, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/flask_login/utils.py\", line 290, in decorated_view\r\n    return current_app.ensure_sync(func)(*args, **kwargs)\r\n  File \"/Users/shere/Documents/GitHub/dev-ai-chat-template/app/app.py\", line 348, in send_message\r\n    response = get_bot_response(user_question, user_id, project_name, chat_history_file_path, project_attributes, direct_ai_chat)\r\n  File \"/Users/shere/Documents/GitHub/dev-ai-chat-template/app/llm_handler.py\", line 284, in get_bot_response\r\n    response = handle_index_type(\r\n  File \"/Users/shere/Documents/GitHub/dev-ai-chat-template/app/llm_handler.py\", line 304, in handle_index_type\r\n    response_obj = query_router_index(\r\n  File \"/Users/shere/Documents/GitHub/dev-ai-chat-template/app/llm_handler.py\", line 1672, in query_router_index\r\n    response = query_engine.query(user_question)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/llama_index/indices/query/base.py\", line 23, in query\r\n    response = self._query(str_or_query_bundle)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/llama_index/query_engine/router_query_engine.py\", line 116, in _query\r\n    result = self._selector.select(self._metadatas, query_bundle)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/llama_index/selectors/types.py\", line 76, in select\r\n    return self._select(choices=metadatas, query=query_bundle)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/llama_index/selectors/llm_selectors.py\", line 103, in _select\r\n    parse = self._prompt.output_parser.parse(prediction)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/llama_index/output_parsers/selection.py\", line 71, in parse\r\n    answers = [Answer.from_dict(json_dict) for json_dict in json_list]\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/llama_index/output_parsers/selection.py\", line 71, in <listcomp>\r\n    answers = [Answer.from_dict(json_dict) for json_dict in json_list]\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/dataclasses_json/api.py\", line 72, in from_dict\r\n    return _decode_dataclass(cls, kvs, infer_missing)\r\n  File \"/Users/shere/virtualenvs/dev-ai-chat-template/lib/python3.10/site-packages/dataclasses_json/core.py\", line 159, in _decode_dataclass\r\n    field_value = kvs[field.name]\r\nKeyError: 'choice'\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6607/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6607/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6606",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6606/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6606/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6606/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6606",
        "id": 1777445206,
        "node_id": "PR_kwDOIWuq585UD9A5",
        "number": 6606,
        "title": "patch docs relationships",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-27T17:39:52Z",
        "updated_at": "2023-08-28T17:10:51Z",
        "closed_at": "2023-06-27T17:45:21Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6606",
            "html_url": "https://github.com/run-llama/llama_index/pull/6606",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6606.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6606.patch",
            "merged_at": "2023-06-27T17:45:21Z"
        },
        "body": "# Description\r\n\r\nJust a small change to the docs where we manually create node relationships\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6606/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6606/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6605",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6605/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6605/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6605/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6605",
        "id": 1777231972,
        "node_id": "I_kwDOIWuq585p7mhk",
        "number": 6605,
        "title": "[Question]: Difficulty Accessing metadata from NodeWithScore in LlamaIndex version 0.6.34.post1",
        "user": {
            "login": "Victor-Dimitrov",
            "id": 79845834,
            "node_id": "MDQ6VXNlcjc5ODQ1ODM0",
            "avatar_url": "https://avatars.githubusercontent.com/u/79845834?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Victor-Dimitrov",
            "html_url": "https://github.com/Victor-Dimitrov",
            "followers_url": "https://api.github.com/users/Victor-Dimitrov/followers",
            "following_url": "https://api.github.com/users/Victor-Dimitrov/following{/other_user}",
            "gists_url": "https://api.github.com/users/Victor-Dimitrov/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Victor-Dimitrov/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Victor-Dimitrov/subscriptions",
            "organizations_url": "https://api.github.com/users/Victor-Dimitrov/orgs",
            "repos_url": "https://api.github.com/users/Victor-Dimitrov/repos",
            "events_url": "https://api.github.com/users/Victor-Dimitrov/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Victor-Dimitrov/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-27T15:25:02Z",
        "updated_at": "2023-06-28T15:04:27Z",
        "closed_at": "2023-06-28T15:04:27Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Question Validation\n\n- [X] I have searched both the documentation and discord for an answer.\n\n### Question\n\nHi there,\r\n\r\nI am currently using the LlamaIndex library (version 0.6.34.post1) to create an information retrieval system and I've encountered some issues that I would appreciate your help with.\r\n\r\nIn the process of trying to retrieve the document associated with a given query response, I tried to access the metadata field from source_nodes in the response object. However, I got an AttributeError stating that the 'NodeWithScore' object has no attribute 'metadata'.\r\n\r\nHere is a snippet of my code that produces the error:\r\n\r\n```\r\nresponse = query_engine.query(question)\r\ndocument_id = response.source_nodes[0].metadata['file_name']  # Raises AttributeError\r\n```\r\n\r\nI found in the LlamaIndex documentation that the 'metadata' property should be available in each source node, created from the document. However, in the actual usage, it seems 'NodeWithScore' object doesn't have the 'metadata' attribute.\r\n\r\nMoreover, I noticed that the 'NodeWithScore' object is not explicitly documented in the how-to guides or in the API reference. The [Node reference page](https://gpt-index.readthedocs.io/en/latest/reference/node.html) is empty. Therefore I couldn't understand its properties and usage.\r\n\r\nCould you provide some guidance on how to correctly access the metadata of a source node in a response? Also, it would be helpful if you could consider enhancing your documentation to include more details on the 'NodeWithScore' object and its attributes.\r\n\r\nThanks in advance you for your time and help!\r\n\r\nVictor",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6605/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6605/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6604",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6604/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6604/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6604/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6604",
        "id": 1776421022,
        "node_id": "PR_kwDOIWuq585UAcHZ",
        "number": 6604,
        "title": "[WIP] refactor structured output + pydantic programs",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-27T08:56:32Z",
        "updated_at": "2023-06-28T07:33:00Z",
        "closed_at": "2023-06-28T07:32:59Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6604",
            "html_url": "https://github.com/run-llama/llama_index/pull/6604",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6604.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6604.patch",
            "merged_at": "2023-06-28T07:32:59Z"
        },
        "body": "# Description\r\n\r\nWe make the following changes:\r\n- Added native PydanticOutputParser\r\n- Adds an LLMTextCompletionProgram (use text completion LLM + pydantic output parser) for BasePydanticProgram\r\n- Have OpenAIProgram and GuidanceProgram inherit from BaseLLMPromptProgram\r\n- Define a new DFFullProgram and DFRowsProgram that inherits from BaseProgram. Takes in a BaseLLMPromptProgram class under the hood to do structured extraction.\r\n- Remove old DFFullOutputParser and DFRowsOutputParser\r\n- remove erroneous df_program.py file that was checked in last time \r\n\r\nStill need to add tests etc. \r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [x] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6604/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6604/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6603",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6603/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6603/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6603/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6603",
        "id": 1776326024,
        "node_id": "PR_kwDOIWuq585UAHgO",
        "number": 6603,
        "title": "fix: Fixing the pylint error on the loggers.",
        "user": {
            "login": "noble-varghese",
            "id": 109506617,
            "node_id": "U_kgDOBobwOQ",
            "avatar_url": "https://avatars.githubusercontent.com/u/109506617?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/noble-varghese",
            "html_url": "https://github.com/noble-varghese",
            "followers_url": "https://api.github.com/users/noble-varghese/followers",
            "following_url": "https://api.github.com/users/noble-varghese/following{/other_user}",
            "gists_url": "https://api.github.com/users/noble-varghese/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/noble-varghese/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/noble-varghese/subscriptions",
            "organizations_url": "https://api.github.com/users/noble-varghese/orgs",
            "repos_url": "https://api.github.com/users/noble-varghese/repos",
            "events_url": "https://api.github.com/users/noble-varghese/events{/privacy}",
            "received_events_url": "https://api.github.com/users/noble-varghese/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-27T08:01:24Z",
        "updated_at": "2023-08-30T17:07:42Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6603",
            "html_url": "https://github.com/run-llama/llama_index/pull/6603",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6603.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6603.patch",
            "merged_at": null
        },
        "body": "# Description\r\n1. **Pylint Error in Debug Loggers**:\r\nThe debug loggers in ther codebase have been flagged with the `Pylint(W1203:logging-fstring-interpolation)` and `Pylint(C0103:invalid-name)`. This error suggests that the names used for variables or functions in the debug loggers do not adhere to the recommended naming conventions.\r\n\r\n2. **Inappropriate Usage of f-strings in Debug Loggers**:\r\nWhile inspecting the debug loggers, it was observed that f-strings were used instead of lazy loading using the %s format specifier. This practice goes against the coding standards and is not considered a best practice for string formatting in loggers. To ensure consistency and maintain code quality, it is necessary to replace the f-strings with the proper usage of the %s format specifier.\r\n\r\n3. **Snake Case Conformations in Exception Handling**:\r\nAdditionally, some inconsistencies were found in the snake case conformations used for exception handling. We need to review and update the exception handling sections to ensure uniformity and adherence to snake case conventions.\r\n\r\nFixes # (issue)  #6533\r\n\r\n## Type of Change\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n- [x] I ran the tests on the local and ensured it passes all the test cases in pytest.\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] My changes generate no new warnings\r\n- [x] New and existing unit tests pass locally with my changes\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] I have added tests that prove my fix is effective or that my feature works\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6603/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6603/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6602",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6602/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6602/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6602/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6602",
        "id": 1776003777,
        "node_id": "I_kwDOIWuq585p26rB",
        "number": 6602,
        "title": "[Feature Request]: Create CallbackManager that can handle async and concurrent event completion",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 14,
        "created_at": "2023-06-27T03:00:28Z",
        "updated_at": "2023-09-26T18:51:33Z",
        "closed_at": "2023-09-26T18:49:30Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nSee https://github.com/jerryjliu/llama_index/issues/6594#issuecomment-1608647941 for original discussion\r\n\r\nWe should design and create a new `CallbackManager` that can fit these requirements\r\n\r\nThe logic is as follows:\r\n```python\r\ndef on_event_end(event_id, ..):\r\n  if trace_stack.last().event_id != event_id: \r\n  # The ToS has not completed. This means that the completion is async (or there is an error)\r\n    trace_stack.last().dependent_events.push(event_type, payload, event_id, kwargs)\r\n  else:\r\n    # handle current event\r\n    ..\r\n    # handle dependent events\r\n    for event in dependent_events:\r\n      self.on_event_end(event)\r\n```\r\n\r\nFor this reason, we also need to handle errors to ensure that the event (with corresponding success or failure payload) is always registered.\r\n\r\nAn alternate behaviour is to disregard syncing the stack, but only sync the `end_trace`.\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6602/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6602/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6601",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6601/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6601/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6601/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6601",
        "id": 1775997829,
        "node_id": "PR_kwDOIWuq585T_BEK",
        "number": 6601,
        "title": "Add the ability to change chroma implementation",
        "user": {
            "login": "charliems",
            "id": 42698646,
            "node_id": "MDQ6VXNlcjQyNjk4NjQ2",
            "avatar_url": "https://avatars.githubusercontent.com/u/42698646?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/charliems",
            "html_url": "https://github.com/charliems",
            "followers_url": "https://api.github.com/users/charliems/followers",
            "following_url": "https://api.github.com/users/charliems/following{/other_user}",
            "gists_url": "https://api.github.com/users/charliems/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/charliems/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/charliems/subscriptions",
            "organizations_url": "https://api.github.com/users/charliems/orgs",
            "repos_url": "https://api.github.com/users/charliems/repos",
            "events_url": "https://api.github.com/users/charliems/events{/privacy}",
            "received_events_url": "https://api.github.com/users/charliems/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-27T02:53:17Z",
        "updated_at": "2023-06-28T06:50:58Z",
        "closed_at": "2023-06-28T06:50:58Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6601",
            "html_url": "https://github.com/run-llama/llama_index/pull/6601",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6601.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6601.patch",
            "merged_at": "2023-06-28T06:50:58Z"
        },
        "body": "# Description\r\n\r\nAdded the ability to use a local chroma store instead of server by changing `chroma_api_impl=\"duckdb+parquet\"` in `ChromaReader`\r\n\r\n## Type of Change\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6601/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6601/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6600",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6600/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6600/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6600/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6600",
        "id": 1775988862,
        "node_id": "PR_kwDOIWuq585T-_O7",
        "number": 6600,
        "title": "fix(predictor): register callback for streaming response",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-06-27T02:40:39Z",
        "updated_at": "2023-07-12T22:26:30Z",
        "closed_at": "2023-07-12T22:26:29Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": true,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6600",
            "html_url": "https://github.com/run-llama/llama_index/pull/6600",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6600.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6600.patch",
            "merged_at": null
        },
        "body": "# Description\r\nRegister callback to manager for streaming response\r\n\r\nFixes https://github.com/jerryjliu/llama_index/issues/6594\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [ ] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n\r\n--- \r\n\r\nUnfortunately, this still does not work as expected. The trace will end when the query function completes due to context manager behaviour. \r\n\r\nHence, the event registered by the streaming response will not be captured in the trace.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6600/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6600/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6599",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6599/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6599/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6599/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6599",
        "id": 1775909964,
        "node_id": "I_kwDOIWuq585p2jxM",
        "number": 6599,
        "title": "[Feature Request]: Parallelize subquery in multi-step query engine",
        "user": {
            "login": "jon-chuang",
            "id": 9093549,
            "node_id": "MDQ6VXNlcjkwOTM1NDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9093549?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jon-chuang",
            "html_url": "https://github.com/jon-chuang",
            "followers_url": "https://api.github.com/users/jon-chuang/followers",
            "following_url": "https://api.github.com/users/jon-chuang/following{/other_user}",
            "gists_url": "https://api.github.com/users/jon-chuang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jon-chuang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jon-chuang/subscriptions",
            "organizations_url": "https://api.github.com/users/jon-chuang/orgs",
            "repos_url": "https://api.github.com/users/jon-chuang/repos",
            "events_url": "https://api.github.com/users/jon-chuang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jon-chuang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-06-27T00:57:57Z",
        "updated_at": "2023-10-05T16:03:27Z",
        "closed_at": "2023-10-05T16:03:26Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature Description\r\n\r\nCurrently subqueries are run sequentially. This potentially increases latency by K times for a multi step query of K steps\r\n\r\nDifficulties:\r\n1. For the multi-step case, one needs to extract whether the questions are sequentially dependent. I believe that somehow, SubQuestion, SequentialMultiStep and ParallelMultiStep could share some common abstraction.\r\n\r\nApproaches:\r\n1. Utilize async APIs\r\n2. Brute force the parallelism with a concurrent futures `ThreadPoolExecutor`\r\n\r\nI'm inclined to start with 2 and then migrate to 1 once the async APIs are more mature\r\n\r\n\r\n### Reason\r\n\r\n_No response_\r\n\r\n### Value of Feature\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6599/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6599/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6598",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6598/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6598/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6598/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6598",
        "id": 1775850900,
        "node_id": "PR_kwDOIWuq585T-jD_",
        "number": 6598,
        "title": "[version] bump version to 0.6.34.post1",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-26T23:50:55Z",
        "updated_at": "2023-06-27T01:02:50Z",
        "closed_at": "2023-06-27T01:02:49Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6598",
            "html_url": "https://github.com/run-llama/llama_index/pull/6598",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6598.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6598.patch",
            "merged_at": "2023-06-27T01:02:49Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6598/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6598/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6597",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6597/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6597/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6597/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6597",
        "id": 1775750633,
        "node_id": "PR_kwDOIWuq585T-MxU",
        "number": 6597,
        "title": "Logan/document patch",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-26T22:09:42Z",
        "updated_at": "2023-08-28T17:10:49Z",
        "closed_at": "2023-06-26T22:25:01Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6597",
            "html_url": "https://github.com/run-llama/llama_index/pull/6597",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6597.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6597.patch",
            "merged_at": "2023-06-26T22:25:01Z"
        },
        "body": "# Description\r\n\r\nThis patches some imports and usage, to make compatibility easier with llama-hub\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6597/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6597/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6596",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6596/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6596/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6596/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6596",
        "id": 1775668857,
        "node_id": "I_kwDOIWuq585p1o55",
        "number": 6596,
        "title": "[Bug]: ",
        "user": {
            "login": "JSv4",
            "id": 5049984,
            "node_id": "MDQ6VXNlcjUwNDk5ODQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5049984?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/JSv4",
            "html_url": "https://github.com/JSv4",
            "followers_url": "https://api.github.com/users/JSv4/followers",
            "following_url": "https://api.github.com/users/JSv4/following{/other_user}",
            "gists_url": "https://api.github.com/users/JSv4/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/JSv4/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/JSv4/subscriptions",
            "organizations_url": "https://api.github.com/users/JSv4/orgs",
            "repos_url": "https://api.github.com/users/JSv4/repos",
            "events_url": "https://api.github.com/users/JSv4/events{/privacy}",
            "received_events_url": "https://api.github.com/users/JSv4/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-26T21:38:55Z",
        "updated_at": "2023-06-26T23:54:45Z",
        "closed_at": "2023-06-26T23:54:45Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nIn the latest version of Llama-Index, creating a SimpleDirectoryReader with a directory containing .docx file results in an error. \r\n\r\nThis call:\r\n\r\n```python\r\nlogger.debug(f\"Build index from {tempdir_path}\")\r\n            SimpleDirectoryReader = download_loader(\"SimpleDirectoryReader\")\r\n            loader = SimpleDirectoryReader(\r\n                tempdir_path, recursive=True, exclude_hidden=False\r\n            )\r\n            logger.debug(f\"Loaded created...\")\r\n```\r\nFails at the loader = ... step. Error message is \r\n\r\n```\r\nNo module named 'llama_index.readers.schema'\r\n```\r\n\r\nDowngrading to 0.6.30 fixed the issue (I picked something a couple versions back as I don't have time to trace exactly which version has the problem change and wanted to revert a couple versions to be safe). \n\n### Version\n\n0.6.34\n\n### Steps to Reproduce\n\nTry to create a SimpleDirectoryReader with a directory containing a docx.\n\n### Relevant Logs/Tracbacks\n\n```shell\nSee above.\n```\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6596/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6596/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6595",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6595/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6595/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6595/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6595",
        "id": 1775633595,
        "node_id": "PR_kwDOIWuq585T92nU",
        "number": 6595,
        "title": "[version] bump version to 0.6.34",
        "user": {
            "login": "jerryjliu",
            "id": 4858925,
            "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jerryjliu",
            "html_url": "https://github.com/jerryjliu",
            "followers_url": "https://api.github.com/users/jerryjliu/followers",
            "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
            "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
            "repos_url": "https://api.github.com/users/jerryjliu/repos",
            "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-26T21:16:08Z",
        "updated_at": "2023-06-26T21:31:19Z",
        "closed_at": "2023-06-26T21:31:18Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6595",
            "html_url": "https://github.com/run-llama/llama_index/pull/6595",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6595.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6595.patch",
            "merged_at": "2023-06-26T21:31:18Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6595/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6595/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6594",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6594/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6594/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6594/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6594",
        "id": 1775096118,
        "node_id": "I_kwDOIWuq585pzdE2",
        "number": 6594,
        "title": "[Bug]: CallbackHandler LLM event not fired when streaming is enabled",
        "user": {
            "login": "willydouhard",
            "id": 13104895,
            "node_id": "MDQ6VXNlcjEzMTA0ODk1",
            "avatar_url": "https://avatars.githubusercontent.com/u/13104895?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/willydouhard",
            "html_url": "https://github.com/willydouhard",
            "followers_url": "https://api.github.com/users/willydouhard/followers",
            "following_url": "https://api.github.com/users/willydouhard/following{/other_user}",
            "gists_url": "https://api.github.com/users/willydouhard/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/willydouhard/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/willydouhard/subscriptions",
            "organizations_url": "https://api.github.com/users/willydouhard/orgs",
            "repos_url": "https://api.github.com/users/willydouhard/repos",
            "events_url": "https://api.github.com/users/willydouhard/events{/privacy}",
            "received_events_url": "https://api.github.com/users/willydouhard/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318865,
                "node_id": "LA_kwDOIWuq588AAAABGzNfUQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-26T15:52:40Z",
        "updated_at": "2023-10-19T16:04:46Z",
        "closed_at": "2023-10-19T16:04:45Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Bug Description\n\nIt seems that the `LLM` event type is not fired when streaming is enabled.\n\n### Version\n\n0.6.30\n\n### Steps to Reproduce\n\nTo reproduce, use the snippet above and try to execute the script with and without streaming (check the STREAMING variable).\r\n\r\nYou will also have to setup an open ai key as well as an `./storage` folder.\r\n\r\n```py\r\nimport os\r\nimport openai\r\n\r\nfrom typing import Any, Dict, List, Optional\r\n\r\n\r\nfrom llama_index.callbacks.schema import CBEventType\r\n\r\nfrom llama_index.callbacks.base import CallbackManager, BaseCallbackHandler\r\nfrom llama_index import (\r\n    LLMPredictor,\r\n    ServiceContext,\r\n    StorageContext,\r\n    load_index_from_storage,\r\n)\r\nfrom langchain.chat_models import ChatOpenAI\r\n\r\nopenai.api_key = os.environ.get(\"OPENAI_API_KEY\")\r\n\r\nSTREAMING = False\r\n\r\n\r\nclass CallbackHandler(BaseCallbackHandler):\r\n    \"\"\"Base callback handler that can be used to track event starts and ends.\"\"\"\r\n\r\n    def on_event_start(\r\n        self,\r\n        event_type: CBEventType,\r\n        payload: Optional[Dict[str, Any]] = None,\r\n        event_id: str = \"\",\r\n        **kwargs: Any,\r\n    ) -> str:\r\n        \"\"\"Run when an event starts and return id of event.\"\"\"\r\n        print(\"start\", event_type)\r\n\r\n    def on_event_end(\r\n        self,\r\n        event_type: CBEventType,\r\n        payload: Optional[Dict[str, Any]] = None,\r\n        event_id: str = \"\",\r\n        **kwargs: Any,\r\n    ) -> None:\r\n        \"\"\"Run when an event ends.\"\"\"\r\n\r\n        print(\"end\", event_type)\r\n\r\n    def start_trace(self, trace_id: Optional[str] = None) -> None:\r\n        \"\"\"Run when an overall trace is launched.\"\"\"\r\n        pass\r\n\r\n    def end_trace(\r\n        self,\r\n        trace_id: Optional[str] = None,\r\n        trace_map: Optional[Dict[str, List[str]]] = None,\r\n    ) -> None:\r\n        \"\"\"Run when an overall trace is exited.\"\"\"\r\n        pass\r\n\r\n\r\ntry:\r\n    # rebuild storage context\r\n    storage_context = StorageContext.from_defaults(persist_dir=\"./storage\")\r\n    # load index\r\n    index = load_index_from_storage(storage_context)\r\nexcept:\r\n    from llama_index import GPTVectorStoreIndex, SimpleDirectoryReader\r\n\r\n    documents = SimpleDirectoryReader(\"./data\").load_data()\r\n    index = GPTVectorStoreIndex.from_documents(documents)\r\n    index.storage_context.persist()\r\n\r\nllm_predictor = LLMPredictor(\r\n    llm=ChatOpenAI(\r\n        temperature=0,\r\n        model_name=\"gpt-3.5-turbo\",\r\n        streaming=STREAMING,\r\n    ),\r\n)\r\nservice_context = ServiceContext.from_defaults(\r\n    llm_predictor=llm_predictor,\r\n    chunk_size=512,\r\n    callback_manager=CallbackManager([CallbackHandler([], [])]),\r\n)\r\n\r\nquery_engine = index.as_query_engine(\r\n    service_context=service_context,\r\n    streaming=STREAMING,\r\n)\r\n\r\nquery_engine.query(\"What is the state of the union?\")\r\n```\r\n\r\nWhen streaming is true, the LLM event is never printed. I works properly with streaming disabled.\n\n### Relevant Logs/Tracbacks\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6594/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6594/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6593",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6593/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6593/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6593/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6593",
        "id": 1774721774,
        "node_id": "I_kwDOIWuq585pyBru",
        "number": 6593,
        "title": "httpx.ReadTimeout",
        "user": {
            "login": "vruti1121",
            "id": 84800982,
            "node_id": "MDQ6VXNlcjg0ODAwOTgy",
            "avatar_url": "https://avatars.githubusercontent.com/u/84800982?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vruti1121",
            "html_url": "https://github.com/vruti1121",
            "followers_url": "https://api.github.com/users/vruti1121/followers",
            "following_url": "https://api.github.com/users/vruti1121/following{/other_user}",
            "gists_url": "https://api.github.com/users/vruti1121/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vruti1121/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vruti1121/subscriptions",
            "organizations_url": "https://api.github.com/users/vruti1121/orgs",
            "repos_url": "https://api.github.com/users/vruti1121/repos",
            "events_url": "https://api.github.com/users/vruti1121/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vruti1121/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-26T12:57:48Z",
        "updated_at": "2023-07-18T08:48:55Z",
        "closed_at": "2023-07-18T08:48:55Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6593/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6593/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6592",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6592/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6592/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6592/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6592",
        "id": 1774603326,
        "node_id": "PR_kwDOIWuq585T6Tsx",
        "number": 6592,
        "title": "[discord] save author as metadata in group_conversations.py",
        "user": {
            "login": "batmanscode",
            "id": 29989939,
            "node_id": "MDQ6VXNlcjI5OTg5OTM5",
            "avatar_url": "https://avatars.githubusercontent.com/u/29989939?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/batmanscode",
            "html_url": "https://github.com/batmanscode",
            "followers_url": "https://api.github.com/users/batmanscode/followers",
            "following_url": "https://api.github.com/users/batmanscode/following{/other_user}",
            "gists_url": "https://api.github.com/users/batmanscode/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/batmanscode/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/batmanscode/subscriptions",
            "organizations_url": "https://api.github.com/users/batmanscode/orgs",
            "repos_url": "https://api.github.com/users/batmanscode/repos",
            "events_url": "https://api.github.com/users/batmanscode/events{/privacy}",
            "received_events_url": "https://api.github.com/users/batmanscode/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-26T11:54:11Z",
        "updated_at": "2023-06-26T18:35:29Z",
        "closed_at": "2023-06-26T18:35:28Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6592",
            "html_url": "https://github.com/run-llama/llama_index/pull/6592",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6592.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6592.patch",
            "merged_at": "2023-06-26T18:35:28Z"
        },
        "body": "# Description\r\n\r\nMinor update to the discord thread utility in `group_conversations.py`. This PR includes the author in metadata\r\n\r\n## Type of Change\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6592/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6592/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6591",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6591/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6591/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6591/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6591",
        "id": 1774299231,
        "node_id": "I_kwDOIWuq585pwahf",
        "number": 6591,
        "title": "[Feature Request]: improve support for async in llama_index",
        "user": {
            "login": "jjmachan",
            "id": 5261489,
            "node_id": "MDQ6VXNlcjUyNjE0ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5261489?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jjmachan",
            "html_url": "https://github.com/jjmachan",
            "followers_url": "https://api.github.com/users/jjmachan/followers",
            "following_url": "https://api.github.com/users/jjmachan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jjmachan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jjmachan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jjmachan/subscriptions",
            "organizations_url": "https://api.github.com/users/jjmachan/orgs",
            "repos_url": "https://api.github.com/users/jjmachan/repos",
            "events_url": "https://api.github.com/users/jjmachan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jjmachan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318869,
                "node_id": "LA_kwDOIWuq588AAAABGzNfVQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5584919374,
                "node_id": "LA_kwDOIWuq588AAAABTOMbTg",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/triage",
                "name": "triage",
                "color": "FBCA04",
                "default": false,
                "description": "Issue needs to be triaged/prioritized"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-26T09:08:29Z",
        "updated_at": "2023-10-05T16:03:19Z",
        "closed_at": "2023-10-05T16:03:18Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "# Description\r\n\r\nCurrently, LlamaIndex has support for asynchronous query requests but it is not implemented fully. the `Retriever` does not have an asynchronous retrieve part and the `Synthesiser` even though it has an async version. it is not implemented for a few.\r\n\r\nThe following components have to be made async since depending on implementation they might be called externally.\r\n### Todos\r\n- Retriever (needs an async counterpart, #6587 should address that)\r\n  - get embeddings (can be network call to embeddings endpoint)\r\n  - get vector store response (another network call)\r\n  - get from doc_store (not all vector_store's support docs as well, but other modalities also should be considered)\r\n- Synthesis: supported today but a few `response_mode`s don't have the implementation\r\n  - refine\r\n  - compact_and_refine\r\n\r\n# Motivation\r\n\r\nSo I'm working on revamping the `Playground` module so that user can quickly and cheaply prototype different LlamaIndex configurations and evaluate which ones work best. However, since a lot of the calls are blocking (esp in synthesis) the UX is bad. \r\n\r\nThe 2 ways to fix this are\r\n1. Batching: allow users to send a batch of queries in the playground. This means changes to the internals so that we have batching but offer significant speedups, especially at the synthesis stage. But this is a more significant change internally and might be harder to implement for just this use-case of evaluations.\r\n2. Async: a truly optimised async is as good as batching since the requests would be sent out in parallel. We have partial implementations for this so personally I think it would be easier to \r\n\r\nNow having a complete async functionality can bring optimisation for user hosting LlamaIndex also since ASGI servers can be leveraged, increasing throughput.\r\n\r\n# Value of Feature\r\nI'll let the numbers speak for themselves (although it's a crude implementation)\r\nusing default vector_store and doc_store\r\n\r\nwith #6587 \r\n![Pasted image 20230626131416](https://github.com/jerryjliu/llama_index/assets/5261489/76878d66-e014-4175-bda9-6e9f574db555)\r\n\r\nwith #6590 - this has the most bang for the buck and I'll get this merged asap \r\n![Pasted image 20230626142533](https://github.com/jerryjliu/llama_index/assets/5261489/8faecf81-a86a-4d69-a735-7a3d66de066f)\r\n\r\n# concerns \r\n\r\n- having both async and sync versions can be harder to maintain over time.\r\n- parts of the codebase might start acting differently for these.\r\n\r\nA solution I had in mind was to make `async` methods default internally while exposing something that feels synchronous to the users. `query()` will call `aquery` and execute the coroutines for the users. \r\n\r\nThe neat thing here is that all we have to do is make non-async functions async - even if they are blocking in the implementation stage. The developer is free to implement blocking/async methods.",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6591/reactions",
            "total_count": 5,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 4,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6591/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6590",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6590/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6590/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6590/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6590",
        "id": 1774285496,
        "node_id": "PR_kwDOIWuq585T5NwO",
        "number": 6590,
        "title": "feat: async mode for \"refine\" and compact \"response_mode\"",
        "user": {
            "login": "jjmachan",
            "id": 5261489,
            "node_id": "MDQ6VXNlcjUyNjE0ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5261489?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jjmachan",
            "html_url": "https://github.com/jjmachan",
            "followers_url": "https://api.github.com/users/jjmachan/followers",
            "following_url": "https://api.github.com/users/jjmachan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jjmachan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jjmachan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jjmachan/subscriptions",
            "organizations_url": "https://api.github.com/users/jjmachan/orgs",
            "repos_url": "https://api.github.com/users/jjmachan/repos",
            "events_url": "https://api.github.com/users/jjmachan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jjmachan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-26T09:01:55Z",
        "updated_at": "2023-07-01T18:26:28Z",
        "closed_at": "2023-07-01T18:26:27Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6590",
            "html_url": "https://github.com/run-llama/llama_index/pull/6590",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6590.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6590.patch",
            "merged_at": "2023-07-01T18:26:27Z"
        },
        "body": "# Description\r\n\r\nPlease include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.\r\n\r\nFixes # (issue)\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [ ] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6590/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6590/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6589",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6589/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6589/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6589/events",
        "html_url": "https://github.com/run-llama/llama_index/issues/6589",
        "id": 1774157247,
        "node_id": "I_kwDOIWuq585pv32_",
        "number": 6589,
        "title": "LLM\u4e2d\u6587\u5e94\u7528\u4ea4\u6d41\u5fae\u4fe1\u7fa4",
        "user": {
            "login": "Anna10071",
            "id": 90118245,
            "node_id": "MDQ6VXNlcjkwMTE4MjQ1",
            "avatar_url": "https://avatars.githubusercontent.com/u/90118245?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Anna10071",
            "html_url": "https://github.com/Anna10071",
            "followers_url": "https://api.github.com/users/Anna10071/followers",
            "following_url": "https://api.github.com/users/Anna10071/following{/other_user}",
            "gists_url": "https://api.github.com/users/Anna10071/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Anna10071/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Anna10071/subscriptions",
            "organizations_url": "https://api.github.com/users/Anna10071/orgs",
            "repos_url": "https://api.github.com/users/Anna10071/repos",
            "events_url": "https://api.github.com/users/Anna10071/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Anna10071/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4751318877,
                "node_id": "LA_kwDOIWuq588AAAABGzNfXQ",
                "url": "https://api.github.com/repos/run-llama/llama_index/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-06-26T07:50:19Z",
        "updated_at": "2023-10-12T16:04:47Z",
        "closed_at": "2023-10-12T16:04:46Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "\r\nLLM\u4e2d\u6587\u5e94\u7528\u548c\u6280\u672f\u4ea4\u6d41\u7fa4\uff0c\u5982\u679c\u4e8c\u7ef4\u7801\u8fc7\u671f\u53ef\u52a0\u5fae\u4fe1\u5907\u6ce8LLM\u5e94\u7528\uff1ayydsa0007\r\n\r\n![1acaa4cf83de26d556929f1f6ef94ca](https://github.com/jerryjliu/llama_index/assets/90118245/b96ae364-99ea-4aec-b14a-e5dfacdfb9ab)\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6589/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6589/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6588",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6588/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6588/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6588/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6588",
        "id": 1774142345,
        "node_id": "PR_kwDOIWuq585T4up1",
        "number": 6588,
        "title": "[Feature] Add an option for document embedding filtering in EmbeddingRecencyPostprocessor ",
        "user": {
            "login": "ajamjoom",
            "id": 7957213,
            "node_id": "MDQ6VXNlcjc5NTcyMTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7957213?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ajamjoom",
            "html_url": "https://github.com/ajamjoom",
            "followers_url": "https://api.github.com/users/ajamjoom/followers",
            "following_url": "https://api.github.com/users/ajamjoom/following{/other_user}",
            "gists_url": "https://api.github.com/users/ajamjoom/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ajamjoom/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ajamjoom/subscriptions",
            "organizations_url": "https://api.github.com/users/ajamjoom/orgs",
            "repos_url": "https://api.github.com/users/ajamjoom/repos",
            "events_url": "https://api.github.com/users/ajamjoom/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ajamjoom/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-06-26T07:39:37Z",
        "updated_at": "2023-11-16T21:32:38Z",
        "closed_at": "2023-11-16T21:32:38Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6588",
            "html_url": "https://github.com/run-llama/llama_index/pull/6588",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6588.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6588.patch",
            "merged_at": null
        },
        "body": "# Description\r\n\r\nAllow `EmbeddingRecencyPostprocessor` to filter out nodes by comparing the document embeddings for those nodes and filter out older, highly similar documents. With this change, we will have two filtering levels, (1) nodes and (2) documents.\r\nThe nodes level is the default operation we used to support. This change is backward compatible. As a reminder, this operation compares the embeddings for each node and filters out older, highly similar nodes from the retrieved set of nodes.\r\nThe new documents level allows filtering nodes by comparing the embeddings for their documents rather than the embedding for the nodes themselves. To generate the document embedding, we fetch all the relevant documents' nodes and average the document node's embeddings.\r\n\r\nThe new filter is useful when you have N drafts for a document, where the n-1 document includes a section removed from the latest draft. In such a scenario, the nodes filter will likely still return this old node, while the new filter will disregard it as it will detect that both documents are highly similar and ignore all nodes from the older one.\r\n\r\n### Approach limitations\r\n\r\nSemantic similarity is not accurate enough for detecting drafts. By default, we are using the ada openAI embeddings, which are great for capturing the semantics of a document. We could have two semantically very similar documents that are not revisions of each other. `simHash` and different syntax leaning methods might yield more performant and accurate draft detection.\r\n\r\nSlow Performance. (1) Generating the embeddings at inference time takes a lot of time, and (2) making a lot of pair-wise comparisons at inference time for each document pair could take a lot of time. We ideally want these embeddings to be generated at index creation time along with all the pair-wise comparisons. This way, at inference time, we would have a look-up table that allows us to deduplicate drafts.\r\n\r\nLeaky comparisons. We compare only the subset of items returned after search in both the nodes and documents level filter. This means that older nodes can leak into the final answer if nodes from the newer document version aren't retrieved. This diminishes the reliability of both solutions.\r\n\r\n### Questions\r\n\r\nAfter creating a `VectorStoreIndex`, I expected `node.node.get_embedding()` to have the vector embedding, allowing me to skip generating them at inference. I didn't have time to investigate this further, but it felt unexpected that the embeddings were empty, and I had to re-generate them.\r\n\r\n### What an ideal solution looks like\r\n\r\nCreate a document deduplication module that front-loads the compute at index creation or mutation time rather than do it during inference. The goal of this module would be to detect documents that are revisions of each other and store that information in a look-up table for quick access. Then during inference, we use this information to filter out the available set of searchable documents, such that nodes from old documents never make it to the postprocessing stage.\r\nSuch a system would be helpful when people import/add troves of data from Notion or other platforms with multiple revisions for the same documents.\r\n\r\nTo resolve the semantic search inaccuracies, we could experiment with simHash or methods that rely more on syntax and word-usage (TF-IDF) that are ideally not too sensitive to minor edits.\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [x] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\n1. Added a test to `tests/indices/postprocessor/test_base.py` called `test_doc_filtering_embedding_recency_postprocessor`\r\n6. Updated the `docs/examples/node_postprocessor/RecencyPostprocessorDemo.ipynb` to include a demo of the new functionality. Additionally, this notebook had several other bugs that I fixed (1) the `/test_versioned_data/` folder did not exist (seems to be an issue with multiple notebooks) and (2) the Embedding example was not actually using the correct postprocessor\r\n\r\n- [x] Added new unit/integration tests\r\n- [x] Added new notebook (that tests end-to-end)\r\n- [x] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] I have made corresponding changes to the documentation\r\n- [x] My changes generate no new warnings\r\n- [x] I have added tests that prove my fix is effective or that my feature works\r\n- [x] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6588/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6588/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6587",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6587/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6587/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6587/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6587",
        "id": 1774056004,
        "node_id": "PR_kwDOIWuq585T4cLC",
        "number": 6587,
        "title": "feat: async retriever (embeddings)",
        "user": {
            "login": "jjmachan",
            "id": 5261489,
            "node_id": "MDQ6VXNlcjUyNjE0ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5261489?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jjmachan",
            "html_url": "https://github.com/jjmachan",
            "followers_url": "https://api.github.com/users/jjmachan/followers",
            "following_url": "https://api.github.com/users/jjmachan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jjmachan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jjmachan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jjmachan/subscriptions",
            "organizations_url": "https://api.github.com/users/jjmachan/orgs",
            "repos_url": "https://api.github.com/users/jjmachan/repos",
            "events_url": "https://api.github.com/users/jjmachan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jjmachan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-26T06:54:43Z",
        "updated_at": "2023-07-24T04:03:49Z",
        "closed_at": "2023-07-24T04:03:49Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6587",
            "html_url": "https://github.com/run-llama/llama_index/pull/6587",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6587.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6587.patch",
            "merged_at": "2023-07-24T04:03:48Z"
        },
        "body": "# Description\r\n\r\nPlease include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.\r\n\r\nFixes # (issue)\r\n\r\n## Type of Change\r\n\r\nPlease delete options that are not relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Added new unit/integration tests\r\n- [ ] Added new notebook (that tests end-to-end)\r\n- [ ] I stared at the code and made sure it makes sense\r\n\r\n# Suggested Checklist:\r\n\r\n- [ ] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6587/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6587/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6586",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6586/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6586/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6586/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6586",
        "id": 1773813666,
        "node_id": "PR_kwDOIWuq585T3ula",
        "number": 6586,
        "title": "Document Modelling Refactor V3",
        "user": {
            "login": "logan-markewich",
            "id": 22285038,
            "node_id": "MDQ6VXNlcjIyMjg1MDM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/22285038?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/logan-markewich",
            "html_url": "https://github.com/logan-markewich",
            "followers_url": "https://api.github.com/users/logan-markewich/followers",
            "following_url": "https://api.github.com/users/logan-markewich/following{/other_user}",
            "gists_url": "https://api.github.com/users/logan-markewich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/logan-markewich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/logan-markewich/subscriptions",
            "organizations_url": "https://api.github.com/users/logan-markewich/orgs",
            "repos_url": "https://api.github.com/users/logan-markewich/repos",
            "events_url": "https://api.github.com/users/logan-markewich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/logan-markewich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-06-26T04:25:18Z",
        "updated_at": "2023-06-26T21:05:29Z",
        "closed_at": "2023-06-26T21:05:29Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6586",
            "html_url": "https://github.com/run-llama/llama_index/pull/6586",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6586.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6586.patch",
            "merged_at": "2023-06-26T21:05:28Z"
        },
        "body": "# Description\r\n\r\nMassive change, appologies in advance.\r\n\r\nTLDR: see the llama_index/schema.py file for the new node schemas.\r\n\r\n## Type of Change\r\n\r\n- [x] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [x] This change requires a documentation update\r\n\r\n## TODO\r\n\r\n- [x] appease the mypy gods\r\n- [x] make sure unit tests pass\r\n- [x] re-think node-serialization for vector stores that store text\r\n- [x] clean up references to `doc_id` and `extra_info`\r\n- [x] write conversion script for legacy indexes\r\n- [x] update docs \r\n- [x] fully test changes (ALL vector stores, as many notebooks as possible)\r\n- [ ] one last merge of main before merging PR\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6586/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6586/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/run-llama/llama_index/issues/6585",
        "repository_url": "https://api.github.com/repos/run-llama/llama_index",
        "labels_url": "https://api.github.com/repos/run-llama/llama_index/issues/6585/labels{/name}",
        "comments_url": "https://api.github.com/repos/run-llama/llama_index/issues/6585/comments",
        "events_url": "https://api.github.com/repos/run-llama/llama_index/issues/6585/events",
        "html_url": "https://github.com/run-llama/llama_index/pull/6585",
        "id": 1773493862,
        "node_id": "PR_kwDOIWuq585T2tYC",
        "number": 6585,
        "title": "Remove usage of SQLStructStoreIndex in notebooks",
        "user": {
            "login": "hongyishi",
            "id": 7098202,
            "node_id": "MDQ6VXNlcjcwOTgyMDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7098202?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hongyishi",
            "html_url": "https://github.com/hongyishi",
            "followers_url": "https://api.github.com/users/hongyishi/followers",
            "following_url": "https://api.github.com/users/hongyishi/following{/other_user}",
            "gists_url": "https://api.github.com/users/hongyishi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hongyishi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hongyishi/subscriptions",
            "organizations_url": "https://api.github.com/users/hongyishi/orgs",
            "repos_url": "https://api.github.com/users/hongyishi/repos",
            "events_url": "https://api.github.com/users/hongyishi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hongyishi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-06-25T21:19:35Z",
        "updated_at": "2023-06-28T20:49:02Z",
        "closed_at": "2023-06-28T20:49:01Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/run-llama/llama_index/pulls/6585",
            "html_url": "https://github.com/run-llama/llama_index/pull/6585",
            "diff_url": "https://github.com/run-llama/llama_index/pull/6585.diff",
            "patch_url": "https://github.com/run-llama/llama_index/pull/6585.patch",
            "merged_at": "2023-06-28T20:49:01Z"
        },
        "body": "# Description\r\n\r\nWe want to remove usage of the deprecated SQLStructStoreIndex in notebook examples.\r\n\r\n## Type of Change\r\n\r\n- [ ] This change requires a documentation update\r\n\r\n# How Has This Been Tested?\r\n\r\n- [ ] Added new notebook (that tests end-to-end)\r\n\r\n# Suggested Checklist:\r\n\r\n- [ ] I have performed a self-review of my own code\r\n- [ ] I have commented my code, particularly in hard-to-understand areas\r\n- [ ] I have made corresponding changes to the documentation\r\n- [ ] My changes generate no new warnings\r\n- [ ] I have added tests that prove my fix is effective or that my feature works\r\n- [ ] New and existing unit tests pass locally with my changes\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/run-llama/llama_index/issues/6585/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/run-llama/llama_index/issues/6585/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    }
]
[
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5400",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5400/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5400/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5400/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5400",
        "id": 1730753427,
        "node_id": "I_kwDOIPDwls5nKTOT",
        "number": 5400,
        "title": "Add the ability to pass the prompt through to Executor Agents for enrichment during PlanAndExecute",
        "user": {
            "login": "nathan-az",
            "id": 42650258,
            "node_id": "MDQ6VXNlcjQyNjUwMjU4",
            "avatar_url": "https://avatars.githubusercontent.com/u/42650258?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nathan-az",
            "html_url": "https://github.com/nathan-az",
            "followers_url": "https://api.github.com/users/nathan-az/followers",
            "following_url": "https://api.github.com/users/nathan-az/following{/other_user}",
            "gists_url": "https://api.github.com/users/nathan-az/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nathan-az/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nathan-az/subscriptions",
            "organizations_url": "https://api.github.com/users/nathan-az/orgs",
            "repos_url": "https://api.github.com/users/nathan-az/repos",
            "events_url": "https://api.github.com/users/nathan-az/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nathan-az/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-29T13:19:30Z",
        "updated_at": "2023-06-03T21:59:11Z",
        "closed_at": "2023-06-03T21:59:11Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature request\n\nAdd the ability to pass the original prompt through to the ExecutorAgent so that the original explicit context is not lost during a PlanAndExecute run.\n\n### Motivation\n\nPlanAndExecute agents can create a plan of steps dependent on context given in the original prompt. However, this context is lost after the plan is created and is being executed.\r\n\r\nHowever, often the plan is formed in a way which refers to the prior context, losing information. For example, I gave the following prompt, and gave the agent access only to the PythonREPL tool:\r\n```py\r\nprompt = (\r\n    f\"Task: Analyse the customer data available in the database with path '{db_path}'. Tell me the average \"\r\n    \"sales by month.\"\r\n)\r\n```\r\nIn the above example, `db_path` is a fully formed string which can be passed directly to `sqlalchemy.create_engine`. \r\n\r\nThe first step in the plan formed was: `Connect to the database using the given path`. This would ordinarily be fine, however, the context of the \"given path\" was lost, as it was not part of the reformed prompt passed to the executor. Optionally including the original prompt in the template should assist with this.\n\n### Your contribution\n\nI will be submitting a PR shortly with a proposed solution :)",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5400/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5400/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5399",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5399/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5399/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5399/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5399",
        "id": 1730626909,
        "node_id": "I_kwDOIPDwls5nJ0Vd",
        "number": 5399,
        "title": "GraphCypherQAChain Authentication error",
        "user": {
            "login": "AshwiniMudpe",
            "id": 42122075,
            "node_id": "MDQ6VXNlcjQyMTIyMDc1",
            "avatar_url": "https://avatars.githubusercontent.com/u/42122075?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AshwiniMudpe",
            "html_url": "https://github.com/AshwiniMudpe",
            "followers_url": "https://api.github.com/users/AshwiniMudpe/followers",
            "following_url": "https://api.github.com/users/AshwiniMudpe/following{/other_user}",
            "gists_url": "https://api.github.com/users/AshwiniMudpe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AshwiniMudpe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AshwiniMudpe/subscriptions",
            "organizations_url": "https://api.github.com/users/AshwiniMudpe/orgs",
            "repos_url": "https://api.github.com/users/AshwiniMudpe/repos",
            "events_url": "https://api.github.com/users/AshwiniMudpe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AshwiniMudpe/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-29T11:52:53Z",
        "updated_at": "2023-09-12T16:12:01Z",
        "closed_at": "2023-09-12T16:12:01Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nlangchain   0.0.183 , Platform  Anaconda, Python version  3.10.9\r\n![Capture](https://github.com/hwchase17/langchain/assets/42122075/b09e3f03-d63a-4aa6-94bf-79722f2118ab)\r\n\n\n### Who can help?\n\n@hwchase17 \r\n \n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [X] Chains\n- [X] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n[issue.txt](https://github.com/hwchase17/langchain/files/11591485/issue.txt)\r\n\n\n### Expected behavior\n\nCypher Query along with Explanation",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5399/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5399/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5397",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5397/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5397/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5397/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5397",
        "id": 1730555167,
        "node_id": "PR_kwDOIPDwls5RmIEr",
        "number": 5397,
        "title": "convert the parameter 'text' to uppercase in the function 'parse' of the class BooleanOutputParser",
        "user": {
            "login": "ARSblithe212",
            "id": 22144293,
            "node_id": "MDQ6VXNlcjIyMTQ0Mjkz",
            "avatar_url": "https://avatars.githubusercontent.com/u/22144293?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ARSblithe212",
            "html_url": "https://github.com/ARSblithe212",
            "followers_url": "https://api.github.com/users/ARSblithe212/followers",
            "following_url": "https://api.github.com/users/ARSblithe212/following{/other_user}",
            "gists_url": "https://api.github.com/users/ARSblithe212/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ARSblithe212/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ARSblithe212/subscriptions",
            "organizations_url": "https://api.github.com/users/ARSblithe212/orgs",
            "repos_url": "https://api.github.com/users/ARSblithe212/repos",
            "events_url": "https://api.github.com/users/ARSblithe212/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ARSblithe212/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-29T11:01:46Z",
        "updated_at": "2023-05-30T23:26:17Z",
        "closed_at": "2023-05-30T23:26:17Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5397",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5397",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5397.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5397.patch",
            "merged_at": "2023-05-30T23:26:17Z"
        },
        "body": "when the LLMs output 'yes|no'\uff0cBooleanOutputParser can parse it to 'True|False', fix the ValueError in parse().\r\n<!--\r\nwhen use the BooleanOutputParser in the chain_filter.py, the LLMs output 'yes|no'\uff0cthe function 'parse' will throw ValueError\u3002\r\n-->\r\n\r\nFixes # (issue)\r\n  #5396\r\n  https://github.com/hwchase17/langchain/issues/5396\r\n\r\n\r\n@hwchase17 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5397/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5397/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5396",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5396/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5396/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5396/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5396",
        "id": 1730545468,
        "node_id": "I_kwDOIPDwls5nJgc8",
        "number": 5396,
        "title": "Issue: value error in BooleanOutputParser",
        "user": {
            "login": "ARSblithe212",
            "id": 22144293,
            "node_id": "MDQ6VXNlcjIyMTQ0Mjkz",
            "avatar_url": "https://avatars.githubusercontent.com/u/22144293?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ARSblithe212",
            "html_url": "https://github.com/ARSblithe212",
            "followers_url": "https://api.github.com/users/ARSblithe212/followers",
            "following_url": "https://api.github.com/users/ARSblithe212/following{/other_user}",
            "gists_url": "https://api.github.com/users/ARSblithe212/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ARSblithe212/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ARSblithe212/subscriptions",
            "organizations_url": "https://api.github.com/users/ARSblithe212/orgs",
            "repos_url": "https://api.github.com/users/ARSblithe212/repos",
            "events_url": "https://api.github.com/users/ARSblithe212/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ARSblithe212/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-29T10:56:23Z",
        "updated_at": "2023-09-10T16:10:36Z",
        "closed_at": "2023-09-10T16:10:35Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nwhen use the BooleanOutputParser in the chain_filter.py, the LLMs output 'yes|no'\uff0cthe function 'parse' will throw ValueError\u3002\n\n### Suggestion:\n\nI fix it,as follows:\r\n\r\ndef parse(self, text: str) -> bool:\r\n        \"\"\"Parse the output of an LLM call to a boolean.\r\n\r\n        Args:\r\n            text: output of language model\r\n\r\n        Returns:\r\n            boolean\r\n\r\n        \"\"\"\r\n        cleaned_text = text.upper().strip()\r\n        if cleaned_text not in (self.true_val, self.false_val):\r\n            raise ValueError(\r\n                f\"BooleanOutputParser expected output value to either be \"\r\n                f\"{self.true_val} or {self.false_val}. Received {cleaned_text}.\"\r\n            )\r\n        return cleaned_text == self.true_val",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5396/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5396/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5395",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5395/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5395/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5395/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5395",
        "id": 1730470195,
        "node_id": "PR_kwDOIPDwls5Rl1Q4",
        "number": 5395,
        "title": "fix: Blob.from_data mimetype is lost",
        "user": {
            "login": "Digma",
            "id": 3279847,
            "node_id": "MDQ6VXNlcjMyNzk4NDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3279847?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Digma",
            "html_url": "https://github.com/Digma",
            "followers_url": "https://api.github.com/users/Digma/followers",
            "following_url": "https://api.github.com/users/Digma/following{/other_user}",
            "gists_url": "https://api.github.com/users/Digma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Digma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Digma/subscriptions",
            "organizations_url": "https://api.github.com/users/Digma/orgs",
            "repos_url": "https://api.github.com/users/Digma/repos",
            "events_url": "https://api.github.com/users/Digma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Digma/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-29T10:03:50Z",
        "updated_at": "2023-05-29T13:36:50Z",
        "closed_at": "2023-05-29T13:36:50Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5395",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5395",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5395.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5395.patch",
            "merged_at": "2023-05-29T13:36:50Z"
        },
        "body": "# Fix lost mimetype when using Blob.from_data method\r\n\r\nThe mimetype is lost due to a typo in the class attribue name\r\n\r\nFixes # - (no issue opened but I can open one if needed)\r\n\r\n## Changes\r\n\r\n* Fixed typo in name\r\n* Added unit-tests to validate the output Blob\r\n\r\n\r\n## Review\r\n@eyurtsev ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5395/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5395/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5394",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5394/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5394/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5394/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5394",
        "id": 1730356379,
        "node_id": "PR_kwDOIPDwls5RlcLG",
        "number": 5394,
        "title": "Allow for async use of SelfAskWithSearchChain",
        "user": {
            "login": "pors",
            "id": 1078320,
            "node_id": "MDQ6VXNlcjEwNzgzMjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1078320?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pors",
            "html_url": "https://github.com/pors",
            "followers_url": "https://api.github.com/users/pors/followers",
            "following_url": "https://api.github.com/users/pors/following{/other_user}",
            "gists_url": "https://api.github.com/users/pors/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pors/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pors/subscriptions",
            "organizations_url": "https://api.github.com/users/pors/orgs",
            "repos_url": "https://api.github.com/users/pors/repos",
            "events_url": "https://api.github.com/users/pors/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pors/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-29T08:53:59Z",
        "updated_at": "2023-05-31T00:02:40Z",
        "closed_at": "2023-05-31T00:02:40Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5394",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5394",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5394.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5394.patch",
            "merged_at": "2023-05-31T00:02:40Z"
        },
        "body": "# Allow for async use of SelfAskWithSearchChain\r\n\r\n\r\n## Who can review?\r\n\r\n  Async\r\n  - @agola11\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5394/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5394/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5393",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5393/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5393/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5393/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5393",
        "id": 1730352093,
        "node_id": "I_kwDOIPDwls5nIxPd",
        "number": 5393,
        "title": "Parser output may not always produce a string (based on what GPT returns), any valid json construct is possible",
        "user": {
            "login": "stephanpirson",
            "id": 131808780,
            "node_id": "U_kgDOB9s-DA",
            "avatar_url": "https://avatars.githubusercontent.com/u/131808780?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephanpirson",
            "html_url": "https://github.com/stephanpirson",
            "followers_url": "https://api.github.com/users/stephanpirson/followers",
            "following_url": "https://api.github.com/users/stephanpirson/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephanpirson/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephanpirson/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephanpirson/subscriptions",
            "organizations_url": "https://api.github.com/users/stephanpirson/orgs",
            "repos_url": "https://api.github.com/users/stephanpirson/repos",
            "events_url": "https://api.github.com/users/stephanpirson/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephanpirson/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-29T08:50:13Z",
        "updated_at": "2023-09-10T16:10:41Z",
        "closed_at": "2023-09-10T16:10:40Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nlangchain 0.183\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [X] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nIf GPT returns a message formatted this way:\r\n\r\nThought: I will produce a list of things.\r\nAction:\r\n```\r\n{\r\n  \"action\": \"Final Answer\",\r\n  \"action_input\": [\r\n    { \"thing\" : \"A\", \"attribute\" : \"X\" },\r\n    { \"thing\" : \"B\", \"attribute\" : \"Y\" }\r\n]\r\n}\r\n```\r\n\r\nWhere action_input is a list instead of a string, the output parser will recognize it as valid and return it all the way back.\r\n\r\noutput_parser.py: line 23->32:\r\n```\r\n    def parse(self, text: str) -> Union[AgentAction, AgentFinish]:\r\n        try:\r\n            action_match = re.search(r\"```(.*?)```?\", text, re.DOTALL)\r\n            if action_match is not None:\r\n                response = json.loads(action_match.group(1).strip(), strict=False)\r\n                if isinstance(response, list):\r\n                    # gpt turbo frequently ignores the directive to emit a single action\r\n                    logger.warning(\"Got multiple action responses: %s\", response)\r\n                    response = response[0]\r\n                if response[\"action\"] == \"Final Answer\":\r\n```\r\n\r\nreponse = json.loads only checks that the response is a valid json, not that the type of \"reponse['action']\" is a string.\r\n\r\nWhile not necessarily an issue functionally speaking, this means that the function prototype\r\nin base.py:225\r\n```\r\n    def run(self, *args: Any, callbacks: Callbacks = None, **kwargs: Any) -> str:\r\n        \"\"\"Run the chain as text in, text out or multiple variables, text out.\"\"\"\r\n```\r\nis incorrect. the return value usually is a string, but could be a dictionary or a list based on the output of gpt.\r\n\r\n\r\n\r\n\n\n### Expected behavior\n\nEither force GPT to reformulate, or change the function prototype",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5393/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5393/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5392",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5392/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5392/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5392/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5392",
        "id": 1730347430,
        "node_id": "PR_kwDOIPDwls5RlaQS",
        "number": 5392,
        "title": "Allow for async use of SelfAskWithSearchChain",
        "user": {
            "login": "pors",
            "id": 1078320,
            "node_id": "MDQ6VXNlcjEwNzgzMjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1078320?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pors",
            "html_url": "https://github.com/pors",
            "followers_url": "https://api.github.com/users/pors/followers",
            "following_url": "https://api.github.com/users/pors/following{/other_user}",
            "gists_url": "https://api.github.com/users/pors/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pors/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pors/subscriptions",
            "organizations_url": "https://api.github.com/users/pors/orgs",
            "repos_url": "https://api.github.com/users/pors/repos",
            "events_url": "https://api.github.com/users/pors/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pors/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-29T08:46:16Z",
        "updated_at": "2023-05-29T08:51:11Z",
        "closed_at": "2023-05-29T08:51:01Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5392",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5392",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5392.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5392.patch",
            "merged_at": null
        },
        "body": "# Allow for async use of SelfAskWithSearchChain\r\n\r\n## Who can review?\r\n\r\n@agola11\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5392/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5392/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5390",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5390/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5390/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5390/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5390",
        "id": 1730216162,
        "node_id": "I_kwDOIPDwls5nIQDi",
        "number": 5390,
        "title": "Incorrect prompt formatting when initializing ReActDocstoreAgent with a chat model",
        "user": {
            "login": "oguzgultepe",
            "id": 15001584,
            "node_id": "MDQ6VXNlcjE1MDAxNTg0",
            "avatar_url": "https://avatars.githubusercontent.com/u/15001584?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/oguzgultepe",
            "html_url": "https://github.com/oguzgultepe",
            "followers_url": "https://api.github.com/users/oguzgultepe/followers",
            "following_url": "https://api.github.com/users/oguzgultepe/following{/other_user}",
            "gists_url": "https://api.github.com/users/oguzgultepe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/oguzgultepe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/oguzgultepe/subscriptions",
            "organizations_url": "https://api.github.com/users/oguzgultepe/orgs",
            "repos_url": "https://api.github.com/users/oguzgultepe/repos",
            "events_url": "https://api.github.com/users/oguzgultepe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/oguzgultepe/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-29T07:13:52Z",
        "updated_at": "2023-09-10T16:10:46Z",
        "closed_at": "2023-09-10T16:10:45Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nLangchain v0.0.183 \n\n### Who can help?\n\n@hwchase17 \r\n@agola11\n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [X] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n```python\r\nfrom langchain import Wikipedia\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.agents import initialize_agent, Tool\r\nfrom langchain.agents import AgentType\r\nfrom langchain.agents.react.base import DocstoreExplorer\r\ndocstore=DocstoreExplorer(Wikipedia())\r\ntools = [\r\n    Tool(\r\n        name=\"Search\",\r\n        func=docstore.search,\r\n        description=\"useful for when you need to ask with search\"\r\n    ),\r\n    Tool(\r\n        name=\"Lookup\",\r\n        func=docstore.lookup,\r\n        description=\"useful for when you need to ask with lookup\"\r\n    )\r\n]\r\n\r\n\r\nllm = ChatOpenAI()\r\nreact = initialize_agent(tools, llm, agent=AgentType.REACT_DOCSTORE, verbose=True)\r\n\r\nquestion = 'Question'\r\nreact.run(question)\r\n```\r\nRunning this snippet initializes a ReActDocStoreAgent and runs it on the given question.\r\n\r\n[initialize_agent( )](https://github.com/hwchase17/langchain/blob/master/langchain/agents/initialize.py#L12) returns an AgentExecutor. During this call an agent is created using the [from_llm_and_tools( )](https://github.com/hwchase17/langchain/blob/master/langchain/agents/agent.py#L528) function. This function creates a new llm_chain for the agent and sets the prompt using agent_cls.create_prompt( ).  Since we are using a ReActDocStoreAgent, [the function](https://github.com/hwchase17/langchain/blob/master/langchain/agents/react/base.py#L35) simply returns the WIKI_PROMPT, which is a PromptTemplate object.\r\n\r\n[run( )](https://github.com/hwchase17/langchain/blob/master/langchain/agents/agent.py#L934) from AgentExecutor calls [_take_next_step( )](https://github.com/hwchase17/langchain/blob/master/langchain/agents/agent.py#L748) which calls agent.plan( ).\r\n\r\n[plan( )](https://github.com/hwchase17/langchain/blob/master/langchain/agents/agent.py#L425) eventually calls llm_chain.predict( ). Eventually llm_chain calls [generate( )](https://github.com/hwchase17/langchain/blob/master/langchain/chains/llm.py#L72). This function creates a prompt by calling [prep_prompt( )](https://github.com/hwchase17/langchain/blob/master/langchain/chains/llm.py#L94). The prompt is a StringPromptValue since it is created using [format_prompt( )](https://github.com/hwchase17/langchain/blob/master/langchain/prompts/base.py#L230).\r\nThis variable is then used as an argument for the function llm.generate_prompt( ). [generate_prompt( )](https://github.com/hwchase17/langchain/blob/master/langchain/chat_models/base.py#L136) converts the prompt to message format using [to_messages( )](https://github.com/hwchase17/langchain/blob/master/langchain/prompts/base.py#L98), which treats the entire prompt as a HumanMessage. \n\n### Expected behavior\n\nThe issue here is that the prompt includes both human and AI messages. Ideally, the questions and observations should be human messages whereas the thoughts and actions should be AI messages. Treating the entire prompt as a human message may decrease prompt quality and lead to suboptimal performance. ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5390/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5390/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5389",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5389/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5389/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5389/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5389",
        "id": 1730114501,
        "node_id": "PR_kwDOIPDwls5Rknju",
        "number": 5389,
        "title": "DeepSpeed Support And Device Map Fix For HuggingFacePipeline",
        "user": {
            "login": "mallorbc",
            "id": 39721523,
            "node_id": "MDQ6VXNlcjM5NzIxNTIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/39721523?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mallorbc",
            "html_url": "https://github.com/mallorbc",
            "followers_url": "https://api.github.com/users/mallorbc/followers",
            "following_url": "https://api.github.com/users/mallorbc/following{/other_user}",
            "gists_url": "https://api.github.com/users/mallorbc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mallorbc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mallorbc/subscriptions",
            "organizations_url": "https://api.github.com/users/mallorbc/orgs",
            "repos_url": "https://api.github.com/users/mallorbc/repos",
            "events_url": "https://api.github.com/users/mallorbc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mallorbc/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5510857403,
                "node_id": "LA_kwDOIPDwls8AAAABSHkCuw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/needs%20documentation",
                "name": "needs documentation",
                "color": "DCAAC0",
                "default": false,
                "description": "PR needs to be updated with documentation"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2023-05-29T05:47:56Z",
        "updated_at": "2023-11-08T18:09:18Z",
        "closed_at": "2023-11-07T04:24:33Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5389",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5389",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5389.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5389.patch",
            "merged_at": null
        },
        "body": "# DeepSpeed Support For HuggingFacePipeline\r\n\r\nThis PR adds support for DeepSpeed with the Huggingface pipelines for local models.  DeepSpeed allows over 2x faster model inference for a wide variety of models.\r\n\r\nTo use this, you need a modern GPU and have CUDA installed that is the same version as the one used to compile Pytorch  \r\n\r\nYou also need to install deepspeed with the following command:\r\n```pip install deepspeed```\r\n\r\nFixes # (issue)\r\n\r\nA test has been added for this new feature.  As a side note, some existing tests seem to not be working due to the fact that ```max_new_tokens``` is not a supported keyword.\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n  @hwchase17 - project lead\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5389/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 2,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5389/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5388",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5388/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5388/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5388/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5388",
        "id": 1730105141,
        "node_id": "I_kwDOIPDwls5nH081",
        "number": 5388,
        "title": "RFC: Use wasm-exec package to sandbox code execution by the Python REPL tool",
        "user": {
            "login": "Jflick58",
            "id": 22459070,
            "node_id": "MDQ6VXNlcjIyNDU5MDcw",
            "avatar_url": "https://avatars.githubusercontent.com/u/22459070?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Jflick58",
            "html_url": "https://github.com/Jflick58",
            "followers_url": "https://api.github.com/users/Jflick58/followers",
            "following_url": "https://api.github.com/users/Jflick58/following{/other_user}",
            "gists_url": "https://api.github.com/users/Jflick58/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Jflick58/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Jflick58/subscriptions",
            "organizations_url": "https://api.github.com/users/Jflick58/orgs",
            "repos_url": "https://api.github.com/users/Jflick58/repos",
            "events_url": "https://api.github.com/users/Jflick58/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Jflick58/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-29T05:39:42Z",
        "updated_at": "2023-09-18T16:10:26Z",
        "closed_at": "2023-09-18T16:10:25Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nIssues #1026  and #5294 raise legitimate concerns with the security of executing LLM-generated code via the `exec()` function. Out of that discussion came a link to [this blog](https://til.simonwillison.net/webassembly/python-in-a-wasm-sandbox) that demonstrated a way to use Wasm to execute Python code in an isolated interpreter. \r\n\r\nI have developed a library based on that code called [wasm-exec](https://github.com/Jflick58/wasm_exec) to provide a clean interface to this solution. I\u2019d like to next make a PR in LangChain replacing instances of `exec()` with `wasm_exec()` but wanted to get some feedback on this solution before doing so. \r\n\r\nRight now, the largest unknown is the extent of support for arbitrary packages, which may make running something like Pandas in the sandbox untenable until a solution is found. I believe I have a path forward on that (via installing when configuring the wasm runtime), but will need to continue to experiment. \n\n### Suggestion:\n\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5388/reactions",
            "total_count": 3,
            "+1": 3,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5388/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5387",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5387/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5387/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5387/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5387",
        "id": 1730087228,
        "node_id": "I_kwDOIPDwls5nHwk8",
        "number": 5387,
        "title": "Failure when running pip install langchain[all]",
        "user": {
            "login": "vmajor",
            "id": 5185905,
            "node_id": "MDQ6VXNlcjUxODU5MDU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5185905?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vmajor",
            "html_url": "https://github.com/vmajor",
            "followers_url": "https://api.github.com/users/vmajor/followers",
            "following_url": "https://api.github.com/users/vmajor/following{/other_user}",
            "gists_url": "https://api.github.com/users/vmajor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vmajor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vmajor/subscriptions",
            "organizations_url": "https://api.github.com/users/vmajor/orgs",
            "repos_url": "https://api.github.com/users/vmajor/repos",
            "events_url": "https://api.github.com/users/vmajor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vmajor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2023-05-29T05:23:41Z",
        "updated_at": "2023-12-08T20:31:23Z",
        "closed_at": "2023-11-17T16:07:08Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nLangchain version: NA\r\nPython 3.10.9\r\nWSL2\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n1. pip install langchain[all]\r\n2. Wait\r\n3. Observe:\r\n\r\n```\r\n  Preparing metadata (setup.py) ... done\r\n  Downloading openai-0.0.2.tar.gz (741 bytes)\r\n  Preparing metadata (setup.py) ... error\r\n  error: subprocess-exited-with-error\r\n\r\n  \u00d7 python setup.py egg_info did not run successfully.\r\n  \u2502 exit code: 1\r\n  \u2570\u2500> [6 lines of output]\r\n      Traceback (most recent call last):\r\n        File \"<string>\", line 2, in <module>\r\n        File \"<pip-setuptools-caller>\", line 34, in <module>\r\n        File \"/tmp/pip-install-9c_7ozkg/openai_9e8b55b2ec17406d8b64d964c29099f3/setup.py\", line 6, in <module>\r\n          raise RuntimeError(\r\n      RuntimeError: This package is a placeholder package on the public PyPI instance, and is not the correct version to install. If you are having trouble figuring out the correct package to install, please contact us.\r\n      [end of output]\r\n\r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\nerror: metadata-generation-failed\r\n\r\n\u00d7 Encountered error while generating package metadata.\r\n\u2570\u2500> See above for output.\r\n\r\nnote: This is an issue with the package mentioned above, not pip.\r\nhint: See above for details.\r\n```\n\n### Expected behavior\n\nInstallation complete.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5387/reactions",
            "total_count": 3,
            "+1": 3,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5387/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5386",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5386/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5386/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5386/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5386",
        "id": 1730022579,
        "node_id": "PR_kwDOIPDwls5RkTBL",
        "number": 5386,
        "title": "fix: compatibility with old version FAISS vector store file",
        "user": {
            "login": "Laisky",
            "id": 4532436,
            "node_id": "MDQ6VXNlcjQ1MzI0MzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4532436?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Laisky",
            "html_url": "https://github.com/Laisky",
            "followers_url": "https://api.github.com/users/Laisky/followers",
            "following_url": "https://api.github.com/users/Laisky/following{/other_user}",
            "gists_url": "https://api.github.com/users/Laisky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Laisky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Laisky/subscriptions",
            "organizations_url": "https://api.github.com/users/Laisky/orgs",
            "repos_url": "https://api.github.com/users/Laisky/repos",
            "events_url": "https://api.github.com/users/Laisky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Laisky/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528836,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvRA",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-29T04:29:54Z",
        "updated_at": "2023-05-31T01:16:55Z",
        "closed_at": "2023-05-31T01:16:55Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5386",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5386",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5386.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5386.patch",
            "merged_at": null
        },
        "body": "# fix: compatibility with old version FAISS vector store file\r\n\r\nThis PR addresses the compatibility issues with langchain when processing vector files generated by older versions of langchain and FAISS. The older files lack the required internal member variables (`deployment, allowed_special, disallowed_special, request_timeout`) that are needed by the new version, leading to compatibility issues as reported in #3251.\r\n\r\nIn addition, this PR also adds a new environment variable `OPENAI_EMBEDDINGS_DEPLOYMENT` which enables langchain to dynamically set the deployment id for older versions of the data files.\r\n\r\nThis fix does not introduce any functional changes. Instead, it sets default values for these new variables so that they can handle older data files and prevent compatibility bugs from occurring.\r\n\r\nFixes #3251 \r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n        \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5386/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5386/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5385",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5385/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5385/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5385/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5385",
        "id": 1729959962,
        "node_id": "PR_kwDOIPDwls5RkGTc",
        "number": 5385,
        "title": "Implements support for Personal Access Token Authentication in the ConfluenceLoader",
        "user": {
            "login": "felipeff",
            "id": 6772121,
            "node_id": "MDQ6VXNlcjY3NzIxMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6772121?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/felipeff",
            "html_url": "https://github.com/felipeff",
            "followers_url": "https://api.github.com/users/felipeff/followers",
            "following_url": "https://api.github.com/users/felipeff/following{/other_user}",
            "gists_url": "https://api.github.com/users/felipeff/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/felipeff/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/felipeff/subscriptions",
            "organizations_url": "https://api.github.com/users/felipeff/orgs",
            "repos_url": "https://api.github.com/users/felipeff/repos",
            "events_url": "https://api.github.com/users/felipeff/events{/privacy}",
            "received_events_url": "https://api.github.com/users/felipeff/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            },
            {
                "id": 5509644103,
                "node_id": "LA_kwDOIPDwls8AAAABSGZ_Rw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/maintainer-to-merge",
                "name": "maintainer-to-merge",
                "color": "B1D5ED",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-29T03:39:26Z",
        "updated_at": "2023-06-03T21:57:50Z",
        "closed_at": "2023-06-03T21:57:50Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5385",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5385",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5385.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5385.patch",
            "merged_at": "2023-06-03T21:57:50Z"
        },
        "body": "# Implements support for Personal Access Token Authentication in the ConfluenceLoader\r\n\r\nFixes #5191\r\n\r\nImplements a new optional parameter for the ConfluenceLoader: `token`.\r\nThis allows the use of personal access authentication when using the on-prem server version of Confluence. \r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n@eyurtsev @Jflick58 \r\n\r\nTwitter Handle: felipe_yyc \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5385/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5385/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5384",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5384/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5384/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5384/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5384",
        "id": 1729806672,
        "node_id": "I_kwDOIPDwls5nGsFQ",
        "number": 5384,
        "title": "Running into this error while creating embeddings out of pdf file",
        "user": {
            "login": "catchlui",
            "id": 4323100,
            "node_id": "MDQ6VXNlcjQzMjMxMDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4323100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/catchlui",
            "html_url": "https://github.com/catchlui",
            "followers_url": "https://api.github.com/users/catchlui/followers",
            "following_url": "https://api.github.com/users/catchlui/following{/other_user}",
            "gists_url": "https://api.github.com/users/catchlui/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/catchlui/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/catchlui/subscriptions",
            "organizations_url": "https://api.github.com/users/catchlui/orgs",
            "repos_url": "https://api.github.com/users/catchlui/repos",
            "events_url": "https://api.github.com/users/catchlui/events{/privacy}",
            "received_events_url": "https://api.github.com/users/catchlui/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-29T01:10:32Z",
        "updated_at": "2023-11-18T16:06:43Z",
        "closed_at": "2023-11-18T16:06:42Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nFile \"d:\\langchain\\pdfqa-app.py\", line 46, in _upload_data\r\n    Pinecone.from_texts(self.doc_chunk,embeddings,batch_size=16,index_name=self.index_name)\r\n  File \"E:\\anaconda\\envs\\langchain\\lib\\site-packages\\langchain\\vectorstores\\pinecone.py\", line 232, in from_texts\r\n    embeds = embedding.embed_documents(lines_batch)\r\n  File \"E:\\anaconda\\envs\\langchain\\lib\\site-packages\\langchain\\embeddings\\openai.py\", line 297, in embed_documents\r\n    return self._get_len_safe_embeddings(texts, engine=self.deployment)\r\n  File \"E:\\anaconda\\envs\\langchain\\lib\\site-packages\\langchain\\embeddings\\openai.py\", line 221, in _get_len_safe_embeddings\r\n    token = encoding.encode(\r\n  File \"E:\\anaconda\\envs\\langchain\\lib\\site-packages\\tiktoken\\core.py\", line 117, in encode\r\n    if match := _special_token_regex(disallowed_special).search(text):\r\nTypeError: expected string or buffer\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [X] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [X] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\ndef _load_docs(self):\r\n        loader=PyPDFLoader(\"D:\\langchain\\data_source\\\\1706.03762.pdf\")\r\n        self.doc= loader.load()\r\n        \r\n\r\n    def _split_docs (self):\r\n        text_splitter = RecursiveCharacterTextSplitter(chunk_size=self.chunk_size, chunk_overlap=self.chunk_overlap,separators= [\"\\n\\n\", \"\"])\r\n        self.doc_chunk = text_splitter.split_documents(self.doc)\r\n    \r\n    def _upload_data(self):\r\n        embeddings = OpenAIEmbeddings()\r\n        list_of_index = pinecone.list_indexes()\r\n        if self.index_name in list_of_index:\r\n            Pinecone.from_texts(self.doc_chunk,embeddings,batch_size=16,index_name=self.index_name)\r\n        else:\r\n            pinecone.create_index(self.index_name, dimension=1024) # for open AI\r\n            Pinecone.from_texts(self.doc_chunk,embeddings,batch_size=16,index_name=self.index_name)\r\n    def dataloader(self):\r\n        self._load_docs()\r\n        self._split_docs()\r\n        self._upload_data()\n\n### Expected behavior\n\nPlease help with the solution",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5384/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5384/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5383",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5383/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5383/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5383/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5383",
        "id": 1729803364,
        "node_id": "PR_kwDOIPDwls5RjjwZ",
        "number": 5383,
        "title": "Update confluence.py to return spaces between elements",
        "user": {
            "login": "gardner",
            "id": 787026,
            "node_id": "MDQ6VXNlcjc4NzAyNg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/787026?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gardner",
            "html_url": "https://github.com/gardner",
            "followers_url": "https://api.github.com/users/gardner/followers",
            "following_url": "https://api.github.com/users/gardner/following{/other_user}",
            "gists_url": "https://api.github.com/users/gardner/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gardner/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gardner/subscriptions",
            "organizations_url": "https://api.github.com/users/gardner/orgs",
            "repos_url": "https://api.github.com/users/gardner/repos",
            "events_url": "https://api.github.com/users/gardner/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gardner/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            },
            {
                "id": 5509644103,
                "node_id": "LA_kwDOIPDwls8AAAABSGZ_Rw",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/maintainer-to-merge",
                "name": "maintainer-to-merge",
                "color": "B1D5ED",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-29T01:05:33Z",
        "updated_at": "2023-06-03T21:57:26Z",
        "closed_at": "2023-06-03T21:57:25Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5383",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5383",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5383.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5383.patch",
            "merged_at": "2023-06-03T21:57:25Z"
        },
        "body": "# Update confluence.py to return spaces between elements like headers and links.\r\n\r\nPlease see https://stackoverflow.com/questions/48913975/how-to-return-nicely-formatted-text-in-beautifulsoup4-when-html-text-is-across-m\r\n\r\nGiven:\r\n\r\n```html\r\n<address>\r\n        183 Main St<br>East Copper<br>Massachusetts<br>U S A<br>\r\n        MA 01516-113\r\n    </address>\r\n```\r\n\r\nThe document loader currently returns:\r\n\r\n```\r\n'183 Main StEast CopperMassachusettsU S A        MA 01516-113'\r\n```\r\n\r\nAfter this change, the document loader will return:\r\n\r\n```\r\n183 Main St East Copper Massachusetts U S A MA 01516-113\r\n```\r\n\r\n\r\n@eyurtsev would you prefer this to be an option that can be passed in?\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5383/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5383/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5382",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5382/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5382/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5382/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5382",
        "id": 1729783793,
        "node_id": "PR_kwDOIPDwls5RjflE",
        "number": 5382,
        "title": "Update PR template with Twitter handle request",
        "user": {
            "login": "jacoblee93",
            "id": 6952323,
            "node_id": "MDQ6VXNlcjY5NTIzMjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6952323?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacoblee93",
            "html_url": "https://github.com/jacoblee93",
            "followers_url": "https://api.github.com/users/jacoblee93/followers",
            "following_url": "https://api.github.com/users/jacoblee93/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacoblee93/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacoblee93/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacoblee93/subscriptions",
            "organizations_url": "https://api.github.com/users/jacoblee93/orgs",
            "repos_url": "https://api.github.com/users/jacoblee93/repos",
            "events_url": "https://api.github.com/users/jacoblee93/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacoblee93/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-29T00:33:58Z",
        "updated_at": "2023-05-29T13:23:17Z",
        "closed_at": "2023-05-29T13:23:17Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5382",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5382",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5382.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5382.patch",
            "merged_at": "2023-05-29T13:23:17Z"
        },
        "body": "# Updates PR template to request Twitter handle for shoutouts!\r\n\r\nMakes it easier for maintainers to show their appreciation \ud83d\ude04 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5382/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5382/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5381",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5381/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5381/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5381/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5381",
        "id": 1729770447,
        "node_id": "PR_kwDOIPDwls5Rjcvx",
        "number": 5381,
        "title": "Set old LCTracer to default to port 8000",
        "user": {
            "login": "vowelparrot",
            "id": 130414180,
            "node_id": "U_kgDOB8X2ZA",
            "avatar_url": "https://avatars.githubusercontent.com/u/130414180?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vowelparrot",
            "html_url": "https://github.com/vowelparrot",
            "followers_url": "https://api.github.com/users/vowelparrot/followers",
            "following_url": "https://api.github.com/users/vowelparrot/following{/other_user}",
            "gists_url": "https://api.github.com/users/vowelparrot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vowelparrot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vowelparrot/subscriptions",
            "organizations_url": "https://api.github.com/users/vowelparrot/orgs",
            "repos_url": "https://api.github.com/users/vowelparrot/repos",
            "events_url": "https://api.github.com/users/vowelparrot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vowelparrot/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-29T00:11:35Z",
        "updated_at": "2023-05-30T05:42:54Z",
        "closed_at": "2023-05-30T05:42:54Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5381",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5381",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5381.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5381.patch",
            "merged_at": "2023-05-30T05:42:54Z"
        },
        "body": "Issue from: https://discord.com/channels/1038097195422978059/1069478035918688346/1112445980466483222",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5381/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5381/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5380",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5380/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5380/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5380/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5380",
        "id": 1729735345,
        "node_id": "PR_kwDOIPDwls5RjU9q",
        "number": 5380,
        "title": "Use Default Factory",
        "user": {
            "login": "vowelparrot",
            "id": 130414180,
            "node_id": "U_kgDOB8X2ZA",
            "avatar_url": "https://avatars.githubusercontent.com/u/130414180?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vowelparrot",
            "html_url": "https://github.com/vowelparrot",
            "followers_url": "https://api.github.com/users/vowelparrot/followers",
            "following_url": "https://api.github.com/users/vowelparrot/following{/other_user}",
            "gists_url": "https://api.github.com/users/vowelparrot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vowelparrot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vowelparrot/subscriptions",
            "organizations_url": "https://api.github.com/users/vowelparrot/orgs",
            "repos_url": "https://api.github.com/users/vowelparrot/repos",
            "events_url": "https://api.github.com/users/vowelparrot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vowelparrot/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T23:14:51Z",
        "updated_at": "2023-05-29T13:22:36Z",
        "closed_at": "2023-05-29T13:22:35Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5380",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5380",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5380.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5380.patch",
            "merged_at": "2023-05-29T13:22:35Z"
        },
        "body": "We shouldn't be calling a constructor for a default value - should use default_factory instead. This is especially ad in this case since it requires an optional dependency and an API key to be set. \r\n \r\nResolves #5361",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5380/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5380/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5379",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5379/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5379/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5379/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5379",
        "id": 1729734150,
        "node_id": "PR_kwDOIPDwls5RjUt9",
        "number": 5379,
        "title": "Supabase similarity search with metadata filtering",
        "user": {
            "login": "Dragos-P-Popa",
            "id": 49782417,
            "node_id": "MDQ6VXNlcjQ5NzgyNDE3",
            "avatar_url": "https://avatars.githubusercontent.com/u/49782417?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Dragos-P-Popa",
            "html_url": "https://github.com/Dragos-P-Popa",
            "followers_url": "https://api.github.com/users/Dragos-P-Popa/followers",
            "following_url": "https://api.github.com/users/Dragos-P-Popa/following{/other_user}",
            "gists_url": "https://api.github.com/users/Dragos-P-Popa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Dragos-P-Popa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Dragos-P-Popa/subscriptions",
            "organizations_url": "https://api.github.com/users/Dragos-P-Popa/orgs",
            "repos_url": "https://api.github.com/users/Dragos-P-Popa/repos",
            "events_url": "https://api.github.com/users/Dragos-P-Popa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Dragos-P-Popa/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5541432778,
                "node_id": "LA_kwDOIPDwls8AAAABSkuNyg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20vector%20store",
                "name": "area: vector store",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to vector store module"
            },
            {
                "id": 5680700873,
                "node_id": "LA_kwDOIPDwls8AAAABUpidyQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/auto:improvement",
                "name": "auto:improvement",
                "color": "FBCA04",
                "default": false,
                "description": "Medium size change to existing code to handle new use-cases"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-28T23:11:23Z",
        "updated_at": "2023-08-11T22:56:58Z",
        "closed_at": "2023-08-11T22:56:58Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5379",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5379",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5379.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5379.patch",
            "merged_at": null
        },
        "body": "# Supabase similarity search with metadata filtering\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFrom what I understood, `SupabaseVectorStore`'s similarity searches did not implement any sort of filtering based on the metadata stored in Supabase. Furthermore, I could not find any way of using `metadata_filter` to limit the results given by a `RetrievalQA`.\r\n\r\nThis is my first open source contribution so if I happened to overlook anything please let me know!\r\n\r\n### Usage\r\n\r\nMetadata can be defined in the constructor.\r\n\r\n```\r\nvectorStore = SupabaseVectorStore(client=supabase, embedding=embeddings, table_name=\"documents\", metadatas=[{\"key\": \"value\"}])\r\n\r\n# unchanged\r\nqa = RetrievalQA.from_chain_type(llm=ChatOpenAI(), chain_type=\"stuff\", retriever=vectorStore.as_retriever())\r\nres = qa.run(\"What is langchain?\")\r\n```\r\n\r\n@dev2049 \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5379/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5379/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5378",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5378/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5378/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5378/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5378",
        "id": 1729730030,
        "node_id": "I_kwDOIPDwls5nGZXu",
        "number": 5378,
        "title": "BaseConversationalRetrievalChain error on 0 docs found",
        "user": {
            "login": "marc-poweruser",
            "id": 55856074,
            "node_id": "MDQ6VXNlcjU1ODU2MDc0",
            "avatar_url": "https://avatars.githubusercontent.com/u/55856074?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marc-poweruser",
            "html_url": "https://github.com/marc-poweruser",
            "followers_url": "https://api.github.com/users/marc-poweruser/followers",
            "following_url": "https://api.github.com/users/marc-poweruser/following{/other_user}",
            "gists_url": "https://api.github.com/users/marc-poweruser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marc-poweruser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marc-poweruser/subscriptions",
            "organizations_url": "https://api.github.com/users/marc-poweruser/orgs",
            "repos_url": "https://api.github.com/users/marc-poweruser/repos",
            "events_url": "https://api.github.com/users/marc-poweruser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marc-poweruser/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-28T23:03:16Z",
        "updated_at": "2023-09-10T16:10:51Z",
        "closed_at": "2023-09-10T16:10:50Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nBaseConversationalRetrievalChain._call() and ._acall() run into errors eventually in LLMChain.prep_prompts() on referencing input_list[0].  This will trigger an index error with an empty input_list, which happens when there are no Documents retrieved during _call() by BaseConversationalRetrievalChain._get_docs().  There should be a check for this.\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nSet up a qa call to ConversationalRetrievalChain.from_llm() on an retriever to which a filter has been applied that will result in no Documents being matched.\n\n### Expected behavior\n\nIf 0 docs are found, don't bother running the rest of the process.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5378/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5378/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5377",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5377/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5377/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5377/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5377",
        "id": 1729729783,
        "node_id": "PR_kwDOIPDwls5RjTxw",
        "number": 5377,
        "title": "py tracer fixes",
        "user": {
            "login": "agola11",
            "id": 9536492,
            "node_id": "MDQ6VXNlcjk1MzY0OTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9536492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agola11",
            "html_url": "https://github.com/agola11",
            "followers_url": "https://api.github.com/users/agola11/followers",
            "following_url": "https://api.github.com/users/agola11/following{/other_user}",
            "gists_url": "https://api.github.com/users/agola11/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agola11/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agola11/subscriptions",
            "organizations_url": "https://api.github.com/users/agola11/orgs",
            "repos_url": "https://api.github.com/users/agola11/repos",
            "events_url": "https://api.github.com/users/agola11/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agola11/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T23:02:46Z",
        "updated_at": "2023-05-31T01:47:08Z",
        "closed_at": "2023-05-31T01:47:07Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5377",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5377",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5377.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5377.patch",
            "merged_at": "2023-05-31T01:47:06Z"
        },
        "body": "Not merging yet due to two issues:\r\n\r\n* LLM/Chat Models inputs and outputs not showing up correctly rendered\r\n* LLM/Chat Models extra showing up twice (one in rendered format, one in json format)\r\n\r\ncc @vowelparrot ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5377/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5377/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5376",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5376/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5376/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5376/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5376",
        "id": 1729727312,
        "node_id": "PR_kwDOIPDwls5RjTSd",
        "number": 5376,
        "title": "Post with child runs",
        "user": {
            "login": "vowelparrot",
            "id": 130414180,
            "node_id": "U_kgDOB8X2ZA",
            "avatar_url": "https://avatars.githubusercontent.com/u/130414180?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vowelparrot",
            "html_url": "https://github.com/vowelparrot",
            "followers_url": "https://api.github.com/users/vowelparrot/followers",
            "following_url": "https://api.github.com/users/vowelparrot/following{/other_user}",
            "gists_url": "https://api.github.com/users/vowelparrot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vowelparrot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vowelparrot/subscriptions",
            "organizations_url": "https://api.github.com/users/vowelparrot/orgs",
            "repos_url": "https://api.github.com/users/vowelparrot/repos",
            "events_url": "https://api.github.com/users/vowelparrot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vowelparrot/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T22:56:15Z",
        "updated_at": "2023-05-28T23:49:19Z",
        "closed_at": "2023-05-28T23:49:19Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5376",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5376",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5376.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5376.patch",
            "merged_at": null
        },
        "body": "Don't send a post for each run all at once",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5376/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5376/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5375",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5375/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5375/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5375/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5375",
        "id": 1729668382,
        "node_id": "I_kwDOIPDwls5nGKUe",
        "number": 5375,
        "title": "error thrown when trying to implement BabyAGI with tools with multiple inputs (requiring Structured Tool Chat Agent) ",
        "user": {
            "login": "luca-git",
            "id": 2820583,
            "node_id": "MDQ6VXNlcjI4MjA1ODM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2820583?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luca-git",
            "html_url": "https://github.com/luca-git",
            "followers_url": "https://api.github.com/users/luca-git/followers",
            "following_url": "https://api.github.com/users/luca-git/following{/other_user}",
            "gists_url": "https://api.github.com/users/luca-git/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/luca-git/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luca-git/subscriptions",
            "organizations_url": "https://api.github.com/users/luca-git/orgs",
            "repos_url": "https://api.github.com/users/luca-git/repos",
            "events_url": "https://api.github.com/users/luca-git/events{/privacy}",
            "received_events_url": "https://api.github.com/users/luca-git/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-28T20:52:13Z",
        "updated_at": "2023-09-10T16:10:56Z",
        "closed_at": "2023-09-10T16:10:56Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Windows 11, Anaconda, python 3.9.16 LanchChain 0.0.183\r\nMy goal is to extend the tools used by baby AGI, more specifically to use At least the basic    WriteFileTool() and ReadFileTool(). they use two inputs though, so I cannot stick with the vanilla ZeroShotAgent. forgive my poor understanding of Python but I have tried to use AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION and replace it in the code. Agent initialization is the only modification I've made to the code in the link below, though it throws an error. Could anyone kindly help updating the code in order to be able to leverage multiple input tools or provide guidance or resources? \r\n\r\nhttps://python.langchain.com/en/latest/use_cases/agents/baby_agi_with_agent.html?highlight=babyagi%20with%20tools \r\n\r\n\r\n```python \r\n\r\nfrom langchain.agents import AgentType \r\n\r\nfrom langchain.agents import initialize_agent \r\n\r\n    @classmethod \r\n\r\n    def from_llm( \r\n\r\n        cls, llm: BaseLLM, vectorstore: VectorStore, verbose: bool = False, **kwargs \r\n\r\n    ) -> \"BabyAGI\": \r\n\r\n        \"\"\"Initialize the BabyAGI Controller.\"\"\" \r\n\r\n        task_creation_chain = TaskCreationChain.from_llm(llm, verbose=verbose) \r\n\r\n        task_prioritization_chain = TaskPrioritizationChain.from_llm( \r\n\r\n            llm, verbose=verbose \r\n\r\n        ) \r\n\r\n        llm_chain = LLMChain(llm=llm, prompt=prompt) \r\n\r\n        tool_names = [tool.name for tool in tools] \r\n\r\n        agent = initialize_agent(agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,llm=llm_chain, tools=tool_names) \r\n\r\n        agent_executor = AgentExecutor.from_agent_and_tools( \r\n\r\n            agent=agent, tools=tools, verbose=True \r\n\r\n        ) \r\n\r\n        return cls( \r\n\r\n            task_creation_chain=task_creation_chain, \r\n\r\n            task_prioritization_chain=task_prioritization_chain, \r\n\r\n            execution_chain=agent_executor, \r\n\r\n            vectorstore=vectorstore, \r\n\r\n            **kwargs, \r\n\r\n        ) \r\n\r\n``` \r\n\r\nI get the error \r\n\r\n```python \r\n\r\n File ~\\anaconda3\\envs\\aagi\\lib\\site-packages\\langchain\\agents\\structured_chat\\base.py:83 in create_prompt  args_schema = re.sub(\"}\", \"}}}}\", re.sub(\"{\", \"{{{{\", str(tool.args))) \r\nAttributeError: 'str' object has no attribute 'args' \r\n``` \r\n\r\n### Suggestion:\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5375/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5375/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5374",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5374/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5374/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5374/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5374",
        "id": 1729634384,
        "node_id": "I_kwDOIPDwls5nGCBQ",
        "number": 5374,
        "title": "Formatter chain",
        "user": {
            "login": "pors",
            "id": 1078320,
            "node_id": "MDQ6VXNlcjEwNzgzMjA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1078320?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pors",
            "html_url": "https://github.com/pors",
            "followers_url": "https://api.github.com/users/pors/followers",
            "following_url": "https://api.github.com/users/pors/following{/other_user}",
            "gists_url": "https://api.github.com/users/pors/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pors/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pors/subscriptions",
            "organizations_url": "https://api.github.com/users/pors/orgs",
            "repos_url": "https://api.github.com/users/pors/repos",
            "events_url": "https://api.github.com/users/pors/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pors/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-28T19:35:23Z",
        "updated_at": "2023-11-05T16:07:09Z",
        "closed_at": "2023-11-05T16:07:09Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature request\n\nCreation of a chain or wrapper that uses two LLMs with different models to force correct formatting:\r\n- do the \"difficult\" work with a model like GPT-4: output format is free text.\r\n- have a second LLM (davinci-003 or a specialized model for this purpose) that is good at following formatting instructions to convert the output of the first model into (say) JSON.\r\n\n\n### Motivation\n\nWhen a model is set up to be creative, or the use case demands that the output is consistently formatted correctly, we are often out of luck, and the output breaks an app.  This proposed use of two models will most likely increase the accuracy of the output a lot.\r\n\n\n### Your contribution\n\nIf maintainers think this is a good idea, please add your input, and I will be happy to provide a PR.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5374/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5374/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5373",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5373/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5373/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5373/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5373",
        "id": 1729625831,
        "node_id": "PR_kwDOIPDwls5Ri9bt",
        "number": 5373,
        "title": "Add async support to routing chains",
        "user": {
            "login": "amaudruz",
            "id": 32224348,
            "node_id": "MDQ6VXNlcjMyMjI0MzQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/32224348?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/amaudruz",
            "html_url": "https://github.com/amaudruz",
            "followers_url": "https://api.github.com/users/amaudruz/followers",
            "following_url": "https://api.github.com/users/amaudruz/following{/other_user}",
            "gists_url": "https://api.github.com/users/amaudruz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/amaudruz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/amaudruz/subscriptions",
            "organizations_url": "https://api.github.com/users/amaudruz/orgs",
            "repos_url": "https://api.github.com/users/amaudruz/repos",
            "events_url": "https://api.github.com/users/amaudruz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/amaudruz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-28T19:15:03Z",
        "updated_at": "2023-05-29T13:37:26Z",
        "closed_at": "2023-05-29T13:37:26Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5373",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5373",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5373.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5373.patch",
            "merged_at": "2023-05-29T13:37:26Z"
        },
        "body": "# Add async support for (LLM) routing chains\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nAdd asynchronous LLM calls support for the routing chains. More specifically:\r\n- Add async `aroute` function (i.e. async version of `route`) to the `RouterChain` which calls the routing LLM asynchronously\r\n- Implement the async `_acall` for the `LLMRouterChain`\r\n-  Implement the async `_acall` function for `MultiRouteChain` which first calls asynchronously the routing chain with its new `aroute` function, and then calls asynchronously the relevant destination chain.\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\n- @agola11\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n  Async\r\n  - @agola11\r\n        \r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5373/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5373/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5372",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5372/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5372/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5372/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5372",
        "id": 1729577021,
        "node_id": "PR_kwDOIPDwls5RizLK",
        "number": 5372,
        "title": "bump to 183",
        "user": {
            "login": "hwchase17",
            "id": 11986836,
            "node_id": "MDQ6VXNlcjExOTg2ODM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11986836?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hwchase17",
            "html_url": "https://github.com/hwchase17",
            "followers_url": "https://api.github.com/users/hwchase17/followers",
            "following_url": "https://api.github.com/users/hwchase17/following{/other_user}",
            "gists_url": "https://api.github.com/users/hwchase17/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hwchase17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hwchase17/subscriptions",
            "organizations_url": "https://api.github.com/users/hwchase17/orgs",
            "repos_url": "https://api.github.com/users/hwchase17/repos",
            "events_url": "https://api.github.com/users/hwchase17/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hwchase17/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5010622926,
                "node_id": "LA_kwDOIPDwls8AAAABKqgJzg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/release",
                "name": "release",
                "color": "07D4BE",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T17:23:53Z",
        "updated_at": "2023-05-28T18:42:59Z",
        "closed_at": "2023-05-28T18:42:58Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5372",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5372",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5372.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5372.patch",
            "merged_at": "2023-05-28T18:42:58Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5372/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5372/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5371",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5371/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5371/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5371/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5371",
        "id": 1729575378,
        "node_id": "PR_kwDOIPDwls5Riy14",
        "number": 5371,
        "title": "handle json parsing errors",
        "user": {
            "login": "hwchase17",
            "id": 11986836,
            "node_id": "MDQ6VXNlcjExOTg2ODM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11986836?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hwchase17",
            "html_url": "https://github.com/hwchase17",
            "followers_url": "https://api.github.com/users/hwchase17/followers",
            "following_url": "https://api.github.com/users/hwchase17/following{/other_user}",
            "gists_url": "https://api.github.com/users/hwchase17/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hwchase17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hwchase17/subscriptions",
            "organizations_url": "https://api.github.com/users/hwchase17/orgs",
            "repos_url": "https://api.github.com/users/hwchase17/repos",
            "events_url": "https://api.github.com/users/hwchase17/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hwchase17/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-28T17:18:48Z",
        "updated_at": "2023-06-05T08:48:33Z",
        "closed_at": "2023-05-29T13:18:20Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5371",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5371",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5371.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5371.patch",
            "merged_at": "2023-05-29T13:18:20Z"
        },
        "body": "adds tests cases, consolidates a lot of PRs",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5371/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5371/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5370",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5370/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5370/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5370/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5370",
        "id": 1729574795,
        "node_id": "PR_kwDOIPDwls5Riyub",
        "number": 5370,
        "title": "revert bad json",
        "user": {
            "login": "hwchase17",
            "id": 11986836,
            "node_id": "MDQ6VXNlcjExOTg2ODM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11986836?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hwchase17",
            "html_url": "https://github.com/hwchase17",
            "followers_url": "https://api.github.com/users/hwchase17/followers",
            "following_url": "https://api.github.com/users/hwchase17/following{/other_user}",
            "gists_url": "https://api.github.com/users/hwchase17/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hwchase17/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hwchase17/subscriptions",
            "organizations_url": "https://api.github.com/users/hwchase17/orgs",
            "repos_url": "https://api.github.com/users/hwchase17/repos",
            "events_url": "https://api.github.com/users/hwchase17/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hwchase17/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T17:17:25Z",
        "updated_at": "2023-05-28T17:22:03Z",
        "closed_at": "2023-05-28T17:22:02Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5370",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5370",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5370.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5370.patch",
            "merged_at": "2023-05-28T17:22:02Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5370/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5370/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5369",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5369/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5369/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5369/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5369",
        "id": 1729573466,
        "node_id": "PR_kwDOIPDwls5Riyc0",
        "number": 5369,
        "title": "HtmlTextSplitter",
        "user": {
            "login": "r3v1",
            "id": 26328973,
            "node_id": "MDQ6VXNlcjI2MzI4OTcz",
            "avatar_url": "https://avatars.githubusercontent.com/u/26328973?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/r3v1",
            "html_url": "https://github.com/r3v1",
            "followers_url": "https://api.github.com/users/r3v1/followers",
            "following_url": "https://api.github.com/users/r3v1/following{/other_user}",
            "gists_url": "https://api.github.com/users/r3v1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/r3v1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/r3v1/subscriptions",
            "organizations_url": "https://api.github.com/users/r3v1/orgs",
            "repos_url": "https://api.github.com/users/r3v1/repos",
            "events_url": "https://api.github.com/users/r3v1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/r3v1/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T17:14:24Z",
        "updated_at": "2023-05-30T22:18:33Z",
        "closed_at": "2023-05-30T22:18:33Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5369",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5369",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5369.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5369.patch",
            "merged_at": "2023-05-30T22:18:33Z"
        },
        "body": "# HtmlTextSplitter\r\n\r\nI am submitting a new HtmlTextSplitter class, which attempts to split text along HTML layout elements.\r\n\r\nThis PR addresses the need for HTML text splitting functionality in the LangChain library. There are no additional dependencies required for this change.\r\n\r\n## Examples\r\n\r\nAn [example notebook](docs/modules/indexes/text_splitters/examples/html.ipynb) showing its use\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n - @vowelparrot\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5369/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5369/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5368",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5368/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5368/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5368/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5368",
        "id": 1729572277,
        "node_id": "PR_kwDOIPDwls5RiyNL",
        "number": 5368,
        "title": "Revert \"standardize json parsing (#5168)\"",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T17:11:17Z",
        "updated_at": "2023-06-01T08:02:06Z",
        "closed_at": "2023-05-29T13:37:37Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5368",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5368",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5368.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5368.patch",
            "merged_at": null
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5368/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5368/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5367",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5367/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5367/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5367/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5367",
        "id": 1729555076,
        "node_id": "PR_kwDOIPDwls5RiunQ",
        "number": 5367,
        "title": "Fixes iter error in FAISS add_embeddings call",
        "user": {
            "login": "ninjapenguin",
            "id": 38786,
            "node_id": "MDQ6VXNlcjM4Nzg2",
            "avatar_url": "https://avatars.githubusercontent.com/u/38786?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ninjapenguin",
            "html_url": "https://github.com/ninjapenguin",
            "followers_url": "https://api.github.com/users/ninjapenguin/followers",
            "following_url": "https://api.github.com/users/ninjapenguin/following{/other_user}",
            "gists_url": "https://api.github.com/users/ninjapenguin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ninjapenguin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ninjapenguin/subscriptions",
            "organizations_url": "https://api.github.com/users/ninjapenguin/orgs",
            "repos_url": "https://api.github.com/users/ninjapenguin/repos",
            "events_url": "https://api.github.com/users/ninjapenguin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ninjapenguin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T16:31:26Z",
        "updated_at": "2023-05-28T16:59:30Z",
        "closed_at": "2023-05-28T16:59:30Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5367",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5367",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5367.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5367.patch",
            "merged_at": "2023-05-28T16:59:30Z"
        },
        "body": "# Remove re-use of iter within add_embeddings causing error\r\n\r\nAs reported in https://github.com/hwchase17/langchain/issues/5336 there is an issue currently involving the atempted re-use of an iterator within the FAISS vectorstore adapter\r\n\r\nFixes # https://github.com/hwchase17/langchain/issues/5336\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5367/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5367/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5366",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5366/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5366/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5366/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5366",
        "id": 1729552762,
        "node_id": "I_kwDOIPDwls5nFuF6",
        "number": 5366,
        "title": "ImportError: DLL load failed while importing interpreter: The specified module could not be found.",
        "user": {
            "login": "aboodebaker",
            "id": 79657104,
            "node_id": "MDQ6VXNlcjc5NjU3MTA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/79657104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aboodebaker",
            "html_url": "https://github.com/aboodebaker",
            "followers_url": "https://api.github.com/users/aboodebaker/followers",
            "following_url": "https://api.github.com/users/aboodebaker/following{/other_user}",
            "gists_url": "https://api.github.com/users/aboodebaker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aboodebaker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aboodebaker/subscriptions",
            "organizations_url": "https://api.github.com/users/aboodebaker/orgs",
            "repos_url": "https://api.github.com/users/aboodebaker/repos",
            "events_url": "https://api.github.com/users/aboodebaker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aboodebaker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-05-28T16:24:50Z",
        "updated_at": "2023-09-28T07:47:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I cannot figure out why this is happening:   File \"c:\\Users\\Yaseen\\Documents\\AVA\\main.py\", line 2, in <module>\r\n    import langchain\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\__init__.py\", line 6, in <module>\r\n    from langchain.agents import MRKLChain, ReActChain, SelfAskWithSearchChain\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\agents\\__init__.py\", line 2, in <module>    \r\n    from langchain.agents.agent import (\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\agents\\agent.py\", line 16, in <module>      \r\n    from langchain.agents.tools import InvalidTool\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\agents\\tools.py\", line 8, in <module>       \r\n    from langchain.tools.base import BaseTool, Tool, tool\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\tools\\__init__.py\", line 45, in <module>    \r\n    from langchain.tools.powerbi.tool import (\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\tools\\powerbi\\tool.py\", line 10, in <module>\r\n    from langchain.chains.llm import LLMChain\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\chains\\__init__.py\", line 18, in <module>\r\n    from langchain.chains.llm_math.base import LLMMathChain\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\langchain\\chains\\llm_math\\base.py\", line 9, in <module>\r\n    import numexpr\r\n  File \"C:\\Users\\Yaseen\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\numexpr\\__init__.py\", line 24, in <module>\r\n    from numexpr.interpreter import MAX_THREADS, use_vml, __BLOCK_SIZE1__\r\nImportError: DLL load failed while importing interpreter: The specified module could not be found.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5366/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5366/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5365",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5365/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5365/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5365/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5365",
        "id": 1729549900,
        "node_id": "I_kwDOIPDwls5nFtZM",
        "number": 5365,
        "title": "AssertionError when using AutoGPT with Huggingface",
        "user": {
            "login": "alienhd",
            "id": 56604862,
            "node_id": "MDQ6VXNlcjU2NjA0ODYy",
            "avatar_url": "https://avatars.githubusercontent.com/u/56604862?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alienhd",
            "html_url": "https://github.com/alienhd",
            "followers_url": "https://api.github.com/users/alienhd/followers",
            "following_url": "https://api.github.com/users/alienhd/following{/other_user}",
            "gists_url": "https://api.github.com/users/alienhd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alienhd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alienhd/subscriptions",
            "organizations_url": "https://api.github.com/users/alienhd/orgs",
            "repos_url": "https://api.github.com/users/alienhd/repos",
            "events_url": "https://api.github.com/users/alienhd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alienhd/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-28T16:16:57Z",
        "updated_at": "2023-09-10T03:09:29Z",
        "closed_at": "2023-08-04T00:18:16Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "# This code: \r\n\r\n\r\n`from langchain.experimental import AutoGPT\r\nfrom langchain import HuggingFaceHub\r\n\r\nrepo_id = \"google/flan-t5-xl\" # See https://huggingface.co/models?pipeline_tag=text-generation&sort=downloads for some other options\r\n\r\nagent = AutoGPT.from_llm_and_tools(\r\n    ai_name=\"Tom\",\r\n    ai_role=\"Assistant\",\r\n    tools=tools,\r\n    llm = HuggingFaceHub(repo_id=repo_id, model_kwargs={\"temperature\":0, \"max_length\":64}),\r\n    memory=vectorstore.as_retriever()\r\n)\r\nagent.chain.verbose = True`\r\nagent.run([\"write a weather report for SF today\"])\r\n\r\n\r\n# outputs the error:\r\n\r\n\r\n`AssertionError                            Traceback (most recent call last)\r\nCell In[21], line 1\r\n----> 1 agent.run([\"write a weather report for SF today\"])\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\experimental\\autonomous_agents\\autogpt\\agent.py:91, in AutoGPT.run(self, goals)\r\n     88 loop_count += 1\r\n     90 # Send message to AI, get response\r\n---> 91 assistant_reply = self.chain.run(\r\n     92     goals=goals,\r\n     93     messages=self.full_message_history,\r\n     94     memory=self.memory,\r\n     95     user_input=user_input,\r\n     96 )\r\n     98 # Print Assistant thoughts\r\n     99 print(assistant_reply)\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\chains\\base.py:239, in Chain.run(self, callbacks, *args, **kwargs)\r\n    236     return self(args[0], callbacks=callbacks)[self.output_keys[0]]\r\n    238 if kwargs and not args:\r\n--> 239     return self(kwargs, callbacks=callbacks)[self.output_keys[0]]\r\n    241 if not kwargs and not args:\r\n    242     raise ValueError(\r\n    243         \"`run` supported with either positional arguments or keyword arguments,\"\r\n    244         \" but none were provided.\"\r\n    245     )\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\chains\\base.py:140, in Chain.__call__(self, inputs, return_only_outputs, callbacks)\r\n    138 except (KeyboardInterrupt, Exception) as e:\r\n    139     run_manager.on_chain_error(e)\r\n--> 140     raise e\r\n    141 run_manager.on_chain_end(outputs)\r\n    142 return self.prep_outputs(inputs, outputs, return_only_outputs)\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\chains\\base.py:134, in Chain.__call__(self, inputs, return_only_outputs, callbacks)\r\n    128 run_manager = callback_manager.on_chain_start(\r\n    129     {\"name\": self.__class__.__name__},\r\n    130     inputs,\r\n    131 )\r\n    132 try:\r\n    133     outputs = (\r\n--> 134         self._call(inputs, run_manager=run_manager)\r\n    135         if new_arg_supported\r\n    136         else self._call(inputs)\r\n    137     )\r\n    138 except (KeyboardInterrupt, Exception) as e:\r\n    139     run_manager.on_chain_error(e)\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\chains\\llm.py:69, in LLMChain._call(self, inputs, run_manager)\r\n     64 def _call(\r\n     65     self,\r\n     66     inputs: Dict[str, Any],\r\n     67     run_manager: Optional[CallbackManagerForChainRun] = None,\r\n     68 ) -> Dict[str, str]:\r\n---> 69     response = self.generate([inputs], run_manager=run_manager)\r\n     70     return self.create_outputs(response)[0]\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\chains\\llm.py:78, in LLMChain.generate(self, input_list, run_manager)\r\n     72 def generate(\r\n     73     self,\r\n     74     input_list: List[Dict[str, Any]],\r\n     75     run_manager: Optional[CallbackManagerForChainRun] = None,\r\n     76 ) -> LLMResult:\r\n     77     \"\"\"Generate LLM result from inputs.\"\"\"\r\n---> 78     prompts, stop = self.prep_prompts(input_list, run_manager=run_manager)\r\n     79     return self.llm.generate_prompt(\r\n     80         prompts, stop, callbacks=run_manager.get_child() if run_manager else None\r\n     81     )\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\chains\\llm.py:106, in LLMChain.prep_prompts(self, input_list, run_manager)\r\n    104 for inputs in input_list:\r\n    105     selected_inputs = {k: inputs[k] for k in self.prompt.input_variables}\r\n--> 106     prompt = self.prompt.format_prompt(**selected_inputs)\r\n    107     _colored_text = get_colored_text(prompt.to_string(), \"green\")\r\n    108     _text = \"Prompt after formatting:\\n\" + _colored_text\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\prompts\\chat.py:144, in BaseChatPromptTemplate.format_prompt(self, **kwargs)\r\n    143 def format_prompt(self, **kwargs: Any) -> PromptValue:\r\n--> 144     messages = self.format_messages(**kwargs)\r\n    145     return ChatPromptValue(messages=messages)\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\experimental\\autonomous_agents\\autogpt\\prompt.py:51, in AutoGPTPrompt.format_messages(self, **kwargs)\r\n     49 memory: VectorStoreRetriever = kwargs[\"memory\"]\r\n     50 previous_messages = kwargs[\"messages\"]\r\n---> 51 relevant_docs = memory.get_relevant_documents(str(previous_messages[-10:]))\r\n     52 relevant_memory = [d.page_content for d in relevant_docs]\r\n     53 relevant_memory_tokens = sum(\r\n     54     [self.token_counter(doc) for doc in relevant_memory]\r\n     55 )\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\vectorstores\\base.py:377, in VectorStoreRetriever.get_relevant_documents(self, query)\r\n    375 def get_relevant_documents(self, query: str) -> List[Document]:\r\n    376     if self.search_type == \"similarity\":\r\n--> 377         docs = self.vectorstore.similarity_search(query, **self.search_kwargs)\r\n    378     elif self.search_type == \"similarity_score_threshold\":\r\n    379         docs_and_similarities = (\r\n    380             self.vectorstore.similarity_search_with_relevance_scores(\r\n    381                 query, **self.search_kwargs\r\n    382             )\r\n    383         )\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\vectorstores\\faiss.py:255, in FAISS.similarity_search(self, query, k, **kwargs)\r\n    243 def similarity_search(\r\n    244     self, query: str, k: int = 4, **kwargs: Any\r\n    245 ) -> List[Document]:\r\n    246     \"\"\"Return docs most similar to query.\r\n    247 \r\n    248     Args:\r\n   (...)\r\n    253         List of Documents most similar to the query.\r\n    254     \"\"\"\r\n--> 255     docs_and_scores = self.similarity_search_with_score(query, k)\r\n    256     return [doc for doc, _ in docs_and_scores]\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\vectorstores\\faiss.py:225, in FAISS.similarity_search_with_score(self, query, k)\r\n    215 \"\"\"Return docs most similar to query.\r\n    216 \r\n    217 Args:\r\n   (...)\r\n    222     List of Documents most similar to the query and score for each\r\n    223 \"\"\"\r\n    224 embedding = self.embedding_function(query)\r\n--> 225 docs = self.similarity_search_with_score_by_vector(embedding, k)\r\n    226 return docs\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\langchain\\vectorstores\\faiss.py:199, in FAISS.similarity_search_with_score_by_vector(self, embedding, k)\r\n    197 if self._normalize_L2:\r\n    198     faiss.normalize_L2(vector)\r\n--> 199 scores, indices = self.index.search(vector, k)\r\n    200 docs = []\r\n    201 for j, i in enumerate(indices[0]):\r\n\r\nFile ~\\anaconda3\\envs\\langchain\\Lib\\site-packages\\faiss\\class_wrappers.py:329, in handle_Index.<locals>.replacement_search(self, x, k, params, D, I)\r\n    327 n, d = x.shape\r\n    328 x = np.ascontiguousarray(x, dtype='float32')\r\n--> 329 assert d == self.d\r\n    331 assert k > 0\r\n    333 if D is None:\r\n\r\nAssertionError: `\r\n\r\n# How can I resolve this behaviour?",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5365/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5365/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5364",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5364/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5364/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5364/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5364",
        "id": 1729542395,
        "node_id": "PR_kwDOIPDwls5Rir3p",
        "number": 5364,
        "title": "bump 182",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5010622926,
                "node_id": "LA_kwDOIPDwls8AAAABKqgJzg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/release",
                "name": "release",
                "color": "07D4BE",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-28T16:04:44Z",
        "updated_at": "2023-05-28T16:16:19Z",
        "closed_at": "2023-05-28T16:16:18Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5364",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5364",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5364.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5364.patch",
            "merged_at": "2023-05-28T16:16:18Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5364/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5364/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5363",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5363/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5363/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5363/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5363",
        "id": 1729341841,
        "node_id": "I_kwDOIPDwls5nE6mR",
        "number": 5363,
        "title": "DOC: the example on setting model_kwrgs in HuggingFaceEmbeddings does not work",
        "user": {
            "login": "chanansh",
            "id": 5981644,
            "node_id": "MDQ6VXNlcjU5ODE2NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5981644?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chanansh",
            "html_url": "https://github.com/chanansh",
            "followers_url": "https://api.github.com/users/chanansh/followers",
            "following_url": "https://api.github.com/users/chanansh/following{/other_user}",
            "gists_url": "https://api.github.com/users/chanansh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/chanansh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/chanansh/subscriptions",
            "organizations_url": "https://api.github.com/users/chanansh/orgs",
            "repos_url": "https://api.github.com/users/chanansh/repos",
            "events_url": "https://api.github.com/users/chanansh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/chanansh/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-05-28T09:35:29Z",
        "updated_at": "2023-09-18T16:10:30Z",
        "closed_at": "2023-09-18T16:10:29Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue with current documentation:\n\nThe example in https://python.langchain.com/en/latest/reference/modules/embeddings.html \r\n```\r\nfrom langchain.embeddings import HuggingFaceEmbeddings\r\n\r\nmodel_name = \"sentence-transformers/all-mpnet-base-v2\"\r\nmodel_kwargs = {'device': 'cpu'}\r\nhf = HuggingFaceEmbeddings(model_name=model_name, model_kwargs=model_kwargs)\r\n```\r\ndoes not work.\r\nI get an error: \r\n> pydantic.error_wrappers.ValidationError: 1 validation error for HuggingFaceEmbeddings\r\nmodel_kwargs\r\n  extra fields not permitted (type=value_error.extra)\r\n\n\n### Idea or request for content:\n\nfixed example",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5363/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5363/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5362",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5362/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5362/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5362/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5362",
        "id": 1729331928,
        "node_id": "PR_kwDOIPDwls5Rh_As",
        "number": 5362,
        "title": "fix: agent CHAT_ZERO_SHOT_REACT can not work normally",
        "user": {
            "login": "Undertone0809",
            "id": 72488598,
            "node_id": "MDQ6VXNlcjcyNDg4NTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/72488598?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Undertone0809",
            "html_url": "https://github.com/Undertone0809",
            "followers_url": "https://api.github.com/users/Undertone0809/followers",
            "following_url": "https://api.github.com/users/Undertone0809/following{/other_user}",
            "gists_url": "https://api.github.com/users/Undertone0809/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Undertone0809/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Undertone0809/subscriptions",
            "organizations_url": "https://api.github.com/users/Undertone0809/orgs",
            "repos_url": "https://api.github.com/users/Undertone0809/repos",
            "events_url": "https://api.github.com/users/Undertone0809/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Undertone0809/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-28T09:20:05Z",
        "updated_at": "2023-05-29T13:38:12Z",
        "closed_at": "2023-05-29T13:38:11Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5362",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5362",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5362.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5362.patch",
            "merged_at": null
        },
        "body": "# Fix agent CHAT_ZERO_SHOT_REACT can not work normally\r\n\r\nFixes #5299 \r\n\r\nIn this problem, `ChatOutputParser` must handle text similar to the the following:\r\n\r\n```\r\nThought: I need to use the search tool to find the current price of EPAM in NYSE and then use the calculator tool to raise it to the 0.23 power.\r\n\r\nAction:\r\n\\```\r\n{\r\n  \"action\": \"Search\",\r\n  \"action_input\": \"EPAM NYSE price\"\r\n}\r\n\\```\r\n```\r\n\r\nInitially, `ChatOutputParser` used `parse_json_markdown` to solve the problem but it doesn't work and resulted in #5299 . A better solution is to use `re` to handle text to obtain value for `action` and `action_input` .\r\n\r\nThe optimized program output content is as follows.\r\n--- \r\n\r\n> Entering new AgentExecutor chain...\r\nThought: I need to use the search tool to find the current price of EPAM in NYSE and then use the calculator tool to raise it to the 0.23 power.\r\n\r\nAction:\r\n```\r\n{\r\n  \"action\": \"Search\",\r\n  \"action_input\": \"EPAM NYSE price\"\r\n}\r\n```\r\n\r\n\r\nObservation: EPAM Systems, Inc. is an American company that specializes in software engineering services, digital platform engineering, and digital product design, operating out of Newtown, Pennsylvania. EPAM is a founding member of the MACH Alliance.\r\nThought:I need to refine my search query to find the current stock price of EPAM on NYSE. \r\n\r\nAction:\r\n```\r\n{\r\n  \"action\": \"Search\",\r\n  \"action_input\": \"EPAM stock price NYSE\"\r\n}\r\n```\r\n\r\n\r\nObservation: EPAM Systems, Inc. is an American company that specializes in software engineering services, digital platform engineering, and digital product design, operating out of Newtown, Pennsylvania. EPAM is a founding member of the MACH Alliance.\r\nThought:I need to check the search results to find the current stock price of EPAM on NYSE.\r\n\r\nAction:\r\n```\r\n{\r\n  \"action\": \"Search\",\r\n  \"action_input\": \"EPAM stock price NYSE\"\r\n}\r\n```\r\n\r\n\r\n\r\nObservation: EPAM Systems, Inc. is an American company that specializes in software engineering services, digital platform engineering, and digital product design, operating out of Newtown, Pennsylvania. EPAM is a founding member of the MACH Alliance.\r\nThought:I found the current stock price of EPAM on NYSE, now I need to use the calculator tool to raise it to the 0.23 power.\r\n\r\nAction:\r\n```\r\n{\r\n  \"action\": \"Calculator\",\r\n  \"action_input\": \"pow(123.45, 0.23)\"\r\n}\r\n```\r\n\r\n\r\nObservation: Answer: 3.027212804346112\r\nFinal Answer: 3.027212804346112\r\n\r\n> Finished chain.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5362/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5362/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5361",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5361/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5361/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5361/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5361",
        "id": 1729290674,
        "node_id": "I_kwDOIPDwls5nEuGy",
        "number": 5361,
        "title": "Validation Error importing OpenAPI planner when OpenAI credentials not in environment",
        "user": {
            "login": "shvjds",
            "id": 7003969,
            "node_id": "MDQ6VXNlcjcwMDM5Njk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7003969?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shvjds",
            "html_url": "https://github.com/shvjds",
            "followers_url": "https://api.github.com/users/shvjds/followers",
            "following_url": "https://api.github.com/users/shvjds/following{/other_user}",
            "gists_url": "https://api.github.com/users/shvjds/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shvjds/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shvjds/subscriptions",
            "organizations_url": "https://api.github.com/users/shvjds/orgs",
            "repos_url": "https://api.github.com/users/shvjds/repos",
            "events_url": "https://api.github.com/users/shvjds/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shvjds/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-28T08:18:12Z",
        "updated_at": "2023-05-29T13:22:37Z",
        "closed_at": "2023-05-29T13:22:37Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\nName: langchain, Version: 0.0.180\r\nName: openai, Version: 0.27.7\r\n\r\nmacOS Mojave 10.14.6\r\n\r\n### Who can help?\r\n\r\n@vowelparrot \r\n\r\n### Information\r\n\r\n- [X] The official example notebooks/scripts\r\n- [X] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [ ] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [X] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\nSteps:\r\n\r\n1. Do _not_ load open ai key into env with the intention of wanting to pass it as a parameter when instantiating the llm\r\n\r\n```\r\nfrom dotenv import dotenv_values\r\nopenai_api_key = dotenv_values('.env')['OPENAI_API_KEY']\r\n```\r\n\r\n2. Load the planner:\r\n\r\n```\r\nfrom langchain.llms.openai import OpenAI\r\nfrom langchain.agents.agent_toolkits.openapi import planner\r\n``` \r\n\r\n### Expected behavior\r\n\r\nA validation error should not be raised during the importing of the module.\r\nWe should be able to pass the open api key as an argument.\r\n\r\nThat is, the following should work:\r\n```\r\nfrom langchain.llms.openai import OpenAI\r\nfrom langchain.agents.agent_toolkits.openapi import planner\r\n\r\nllm = OpenAI(model_name=\"gpt-4\", temperature=0.0, open_api_key=open_api_key)\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5361/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5361/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5360",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5360/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5360/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5360/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5360",
        "id": 1729102111,
        "node_id": "I_kwDOIPDwls5nEAEf",
        "number": 5360,
        "title": "change in the template string is causing the SSL connection or the server response to hang",
        "user": {
            "login": "wunglee",
            "id": 5841627,
            "node_id": "MDQ6VXNlcjU4NDE2Mjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5841627?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wunglee",
            "html_url": "https://github.com/wunglee",
            "followers_url": "https://api.github.com/users/wunglee/followers",
            "following_url": "https://api.github.com/users/wunglee/following{/other_user}",
            "gists_url": "https://api.github.com/users/wunglee/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wunglee/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wunglee/subscriptions",
            "organizations_url": "https://api.github.com/users/wunglee/orgs",
            "repos_url": "https://api.github.com/users/wunglee/repos",
            "events_url": "https://api.github.com/users/wunglee/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wunglee/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-28T02:31:02Z",
        "updated_at": "2023-09-10T16:11:01Z",
        "closed_at": "2023-09-10T16:11:00Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nPycharm in macOS\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n# change in the template string will cause the SSL connection or the server response to hang,code here:\r\n\r\n\r\n`question = \"Who won the FIFA World Cup in the year 1994? \"\r\ntemplate = \"\"\"Question: {question}\r\n\r\nAnswer: Let's think step by step.\"\"\"\r\ndef execute_llm(repo_id:str,template:str,question:str):\r\n    prompt = PromptTemplate(template=template, input_variables=[\"question\"])\r\n    llm = HuggingFaceHub(repo_id=repo_id, model_kwargs={\"temperature\": 0, \"max_length\": 64})\r\n    llm_chain = LLMChain(prompt=prompt, llm=llm)\r\n    print(llm_chain.run(question))`\r\n    \r\n    \r\nexecute_llm(repo_id=\"google/flan-t5-xl\",template=template,question=question)\r\nUpon executing llm_chain.run(question), it accesses the HuggingFaceHub service. This results in the code getting stuck at the following line in ssl.py, which is part of the SSLSocket class: self._sslobj.read(len, buffer). This method of the SSLSocket class holds a _sslobj object, which is also of SSLSocket class. The SSLSocket class defines a method read(self, len=1024, buffer=None) which internally calls _sslobj's read(self, len=1024, buffer=None) method.\r\n\r\nThe problem is that any modification to the template (whether it's adding spaces, newline characters, or changing the string) will cause self._sslobj.read(len, buffer) to block until it times out. Since it's completely impossible to step into it for tracking and debugging, I'm unable to determine the specific reason.\n\n### Expected behavior\n\nCould you explain what might be causing this issue? It seems to be related to the SSL network connection, not the content of the template string. However, it's puzzling that the change in the template string is causing the SSL connection or the server response to hang. This behavior is not entirely reasonable and may be a bug or a problem caused by other factors.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5360/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5360/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5359",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5359/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5359/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5359/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5359",
        "id": 1729020166,
        "node_id": "PR_kwDOIPDwls5Rg6Qn",
        "number": 5359,
        "title": "Fix update_document function, add test and documentation.",
        "user": {
            "login": "martinholecekmax",
            "id": 10392540,
            "node_id": "MDQ6VXNlcjEwMzkyNTQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/10392540?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinholecekmax",
            "html_url": "https://github.com/martinholecekmax",
            "followers_url": "https://api.github.com/users/martinholecekmax/followers",
            "following_url": "https://api.github.com/users/martinholecekmax/following{/other_user}",
            "gists_url": "https://api.github.com/users/martinholecekmax/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martinholecekmax/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martinholecekmax/subscriptions",
            "organizations_url": "https://api.github.com/users/martinholecekmax/orgs",
            "repos_url": "https://api.github.com/users/martinholecekmax/repos",
            "events_url": "https://api.github.com/users/martinholecekmax/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martinholecekmax/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-27T23:41:36Z",
        "updated_at": "2023-05-29T14:32:12Z",
        "closed_at": "2023-05-29T13:39:25Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5359",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5359",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5359.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5359.patch",
            "merged_at": "2023-05-29T13:39:25Z"
        },
        "body": "# Fix for `update_document` Function in Chroma\r\n\r\n## Summary\r\nThis pull request addresses an issue with the `update_document` function in the Chroma class, as described in [#5031](https://github.com/hwchase17/langchain/issues/5031#issuecomment-1562577947). The issue was identified as an `AttributeError` raised when calling `update_document` due to a missing corresponding method in the `Collection` object. This fix refactors the `update_document` method in `Chroma` to correctly interact with the `Collection` object.\r\n\r\n## Changes\r\n1. Fixed the `update_document` method in the `Chroma` class to correctly call methods on the `Collection` object.\r\n2. Added the corresponding test `test_chroma_update_document` in `tests/integration_tests/vectorstores/test_chroma.py` to reflect the updated method call.\r\n3. Added an example and explanation of how to use the `update_document` function in the Jupyter notebook tutorial for Chroma.\r\n\r\n## Test Plan\r\nAll existing tests pass after this change. In addition, the `test_chroma_update_document` test case now correctly checks the functionality of `update_document`, ensuring that the function works as expected and updates the content of documents correctly.\r\n\r\n## Reviewers\r\n@dev2049\r\n\r\nThis fix will ensure that users are able to use the `update_document` function as expected, without encountering the previous `AttributeError`. This will enhance the usability and reliability of the Chroma class for all users. \r\n\r\nThank you for considering this pull request. I look forward to your feedback and suggestions.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5359/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5359/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5358",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5358/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5358/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5358/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5358",
        "id": 1728991454,
        "node_id": "I_kwDOIPDwls5nDlDe",
        "number": 5358,
        "title": "DOC: SteamshipImageGenerationTool returns Config Error in multi_modal_output_agent.ipynb",
        "user": {
            "login": "panyi121",
            "id": 3675275,
            "node_id": "MDQ6VXNlcjM2NzUyNzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3675275?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/panyi121",
            "html_url": "https://github.com/panyi121",
            "followers_url": "https://api.github.com/users/panyi121/followers",
            "following_url": "https://api.github.com/users/panyi121/following{/other_user}",
            "gists_url": "https://api.github.com/users/panyi121/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/panyi121/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/panyi121/subscriptions",
            "organizations_url": "https://api.github.com/users/panyi121/orgs",
            "repos_url": "https://api.github.com/users/panyi121/repos",
            "events_url": "https://api.github.com/users/panyi121/events{/privacy}",
            "received_events_url": "https://api.github.com/users/panyi121/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2023-05-27T22:42:18Z",
        "updated_at": "2023-11-15T16:08:24Z",
        "closed_at": "2023-11-15T16:08:24Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue with current documentation:\r\n\r\nWhen running multi_modal_output_agent.ipynb: https://python.langchain.com/en/latest/use_cases/agents/multi_modal_output_agent.html, I get ConfigError: field \"steamship\" not yet prepared so type is still a ForwardRef, you might need to call SteamshipImageGenerationTool.update_forward_refs().\r\n\r\n\r\ntools = [\r\n    SteamshipImageGenerationTool(model_name= \"dall-e\")\r\n]\r\n---------------------------------------------------------------------------\r\nConfigError                               Traceback (most recent call last)\r\nCell In[7], line 2\r\n      1 tools = [\r\n----> 2     SteamshipImageGenerationTool(model_name= \"dall-e\")\r\n      3 ]\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/main.py:339, in pydantic.main.BaseModel.__init__()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/main.py:1076, in pydantic.main.validate_model()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/fields.py:860, in pydantic.fields.ModelField.validate()\r\n\r\nConfigError: field \"steamship\" not yet prepared so type is still a ForwardRef, you might need to call SteamshipImageGenerationTool.update_forward_refs().\r\n\r\n\r\nAfter I call SteamshipImageGenerationTool.update_forward_refs(), I get another error. \r\n\r\nSteamshipImageGenerationTool.update_forward_refs()\r\n---------------------------------------------------------------------------\r\nNameError                                 Traceback (most recent call last)\r\nCell In[10], line 1\r\n----> 1 SteamshipImageGenerationTool.update_forward_refs()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/main.py:815, in pydantic.main.BaseModel.update_forward_refs()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/typing.py:562, in pydantic.typing.update_model_forward_refs()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/typing.py:528, in pydantic.typing.update_field_forward_refs()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/site-packages/pydantic/typing.py:66, in pydantic.typing.evaluate_forwardref()\r\n\r\nFile ~/miniconda3/envs/langchain/lib/python3.11/typing.py:864, in ForwardRef._evaluate(self, globalns, localns, recursive_guard)\r\n    859 if self.__forward_module__ is not None:\r\n    860     globalns = getattr(\r\n    861         sys.modules.get(self.__forward_module__, None), '__dict__', globalns\r\n    862     )\r\n    863 type_ = _type_check(\r\n--> 864     eval(self.__forward_code__, globalns, localns),\r\n    865     \"Forward references must evaluate to types.\",\r\n    866     is_argument=self.__forward_is_argument__,\r\n    867     allow_special_forms=self.__forward_is_class__,\r\n    868 )\r\n    869 self.__forward_value__ = _eval_type(\r\n    870     type_, globalns, localns, recursive_guard | {self.__forward_arg__}\r\n    871 )\r\n    872 self.__forward_evaluated__ = True\r\n\r\nFile <string>:1\r\n\r\nNameError: name 'Steamship' is not defined\r\n\r\n### Idea or request for content:\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5358/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5358/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5357",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5357/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5357/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5357/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5357",
        "id": 1728988973,
        "node_id": "PR_kwDOIPDwls5RgzV5",
        "number": 5357,
        "title": "Merging to branch",
        "user": {
            "login": "bpleahey",
            "id": 90427341,
            "node_id": "MDQ6VXNlcjkwNDI3MzQx",
            "avatar_url": "https://avatars.githubusercontent.com/u/90427341?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bpleahey",
            "html_url": "https://github.com/bpleahey",
            "followers_url": "https://api.github.com/users/bpleahey/followers",
            "following_url": "https://api.github.com/users/bpleahey/following{/other_user}",
            "gists_url": "https://api.github.com/users/bpleahey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bpleahey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bpleahey/subscriptions",
            "organizations_url": "https://api.github.com/users/bpleahey/orgs",
            "repos_url": "https://api.github.com/users/bpleahey/repos",
            "events_url": "https://api.github.com/users/bpleahey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bpleahey/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T22:38:32Z",
        "updated_at": "2023-05-27T22:38:54Z",
        "closed_at": "2023-05-27T22:38:54Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5357",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5357",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5357.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5357.patch",
            "merged_at": null
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5357/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5357/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5356",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5356/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5356/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5356/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5356",
        "id": 1728974878,
        "node_id": "PR_kwDOIPDwls5RgwOg",
        "number": 5356,
        "title": "\"parse_json_markdown\" function improved / fixed.",
        "user": {
            "login": "medram",
            "id": 24493753,
            "node_id": "MDQ6VXNlcjI0NDkzNzUz",
            "avatar_url": "https://avatars.githubusercontent.com/u/24493753?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/medram",
            "html_url": "https://github.com/medram",
            "followers_url": "https://api.github.com/users/medram/followers",
            "following_url": "https://api.github.com/users/medram/following{/other_user}",
            "gists_url": "https://api.github.com/users/medram/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/medram/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/medram/subscriptions",
            "organizations_url": "https://api.github.com/users/medram/orgs",
            "repos_url": "https://api.github.com/users/medram/repos",
            "events_url": "https://api.github.com/users/medram/events{/privacy}",
            "received_events_url": "https://api.github.com/users/medram/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5463330795,
                "node_id": "LA_kwDOIPDwls8AAAABRaPP6w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/needs%20test",
                "name": "needs test",
                "color": "E99695",
                "default": false,
                "description": "PR needs to be updated with tests"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-27T22:11:00Z",
        "updated_at": "2023-06-14T06:38:04Z",
        "closed_at": "2023-05-29T13:38:37Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5356",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5356",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5356.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5356.patch",
            "merged_at": null
        },
        "body": "# \"parse_json_markdown\" function improved / fixed.\r\n\r\nI've run into an LLm output parsing issue with an agent (type: conversational-react-description), it always raises llm output error/exception with this type of agent.\r\nI couldn't wait for a fix to be released, so I fixed/improved the \"parse_json_markdown\" function to ensure parsing the json from LLM output, now it's working great for me, and I would like to contribute the fix :D\r\n\r\nNote: I'm a Python expert, and I would like to contribute more, is there anyone that can help/guide me to do the testing for more complex contributions (any articles/blogs may help)?\r\n\r\n## Before submitting\r\nThanks in advance :D\r\n\r\n## Who can review?\r\n@hwchase17\r\n@vowelparrot\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5356/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5356/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5355",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5355/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5355/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5355/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5355",
        "id": 1728954768,
        "node_id": "PR_kwDOIPDwls5Rgr3X",
        "number": 5355,
        "title": "fix output parsing for chat agent",
        "user": {
            "login": "agola11",
            "id": 9536492,
            "node_id": "MDQ6VXNlcjk1MzY0OTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9536492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agola11",
            "html_url": "https://github.com/agola11",
            "followers_url": "https://api.github.com/users/agola11/followers",
            "following_url": "https://api.github.com/users/agola11/following{/other_user}",
            "gists_url": "https://api.github.com/users/agola11/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agola11/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agola11/subscriptions",
            "organizations_url": "https://api.github.com/users/agola11/orgs",
            "repos_url": "https://api.github.com/users/agola11/repos",
            "events_url": "https://api.github.com/users/agola11/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agola11/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-27T21:31:19Z",
        "updated_at": "2023-05-29T13:38:24Z",
        "closed_at": "2023-05-29T13:38:23Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5355",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5355",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5355.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5355.patch",
            "merged_at": null
        },
        "body": "Confirmed that this allows people to run `ChatAgents` with LLMs and ChatModels with no more parsing errors.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5355/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5355/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5354",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5354/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5354/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5354/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5354",
        "id": 1728933523,
        "node_id": "PR_kwDOIPDwls5RgnML",
        "number": 5354,
        "title": "Move chat agent prompt formatting instructions into human message",
        "user": {
            "login": "jacoblee93",
            "id": 6952323,
            "node_id": "MDQ6VXNlcjY5NTIzMjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6952323?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacoblee93",
            "html_url": "https://github.com/jacoblee93",
            "followers_url": "https://api.github.com/users/jacoblee93/followers",
            "following_url": "https://api.github.com/users/jacoblee93/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacoblee93/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacoblee93/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacoblee93/subscriptions",
            "organizations_url": "https://api.github.com/users/jacoblee93/orgs",
            "repos_url": "https://api.github.com/users/jacoblee93/repos",
            "events_url": "https://api.github.com/users/jacoblee93/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacoblee93/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-27T20:46:19Z",
        "updated_at": "2023-05-31T07:27:52Z",
        "closed_at": "2023-05-27T21:12:17Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5354",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5354",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5354.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5354.patch",
            "merged_at": null
        },
        "body": "# Move chat agent prompt formatting instructions into human message\r\n\r\nPartially addresses #5353 around chat agent reliability.\r\n\r\nOpenAI's 3.5 turbo model is documented as \"not pay[ing] strong attention to the system message, and therefore important instructions are often better placed in a user message.\". Could use a bit of testing, opening for discussion at the moment.\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@vowelparrot \r\n@agola11 \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5354/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5354/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5353",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5353/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5353/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5353/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5353",
        "id": 1728932672,
        "node_id": "I_kwDOIPDwls5nDWtA",
        "number": 5353,
        "title": "Issue: Chat agents should put format instructions and other important information in a human message",
        "user": {
            "login": "jacoblee93",
            "id": 6952323,
            "node_id": "MDQ6VXNlcjY5NTIzMjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6952323?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jacoblee93",
            "html_url": "https://github.com/jacoblee93",
            "followers_url": "https://api.github.com/users/jacoblee93/followers",
            "following_url": "https://api.github.com/users/jacoblee93/following{/other_user}",
            "gists_url": "https://api.github.com/users/jacoblee93/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jacoblee93/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jacoblee93/subscriptions",
            "organizations_url": "https://api.github.com/users/jacoblee93/orgs",
            "repos_url": "https://api.github.com/users/jacoblee93/repos",
            "events_url": "https://api.github.com/users/jacoblee93/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jacoblee93/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T20:44:27Z",
        "updated_at": "2023-05-27T21:21:10Z",
        "closed_at": "2023-05-27T21:21:10Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Chat agent reliability fix:  put format instructions and other important information in a human message\r\n\r\nThere have been a few raised issues specifically around agent reliability when using chat models. @emilsedgh brought up in the JS Discord that OpenAI's 3.5 turbo model is documented as \"not pay[ing] strong attention to the system message, and therefore important instructions are often better placed in a user message.\":\r\n\r\nhttps://platform.openai.com/docs/guides/chat/instructing-chat-models\r\n\r\nThe `ConversationalChatAgent` is implemented this way:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/langchain/agents/conversational_chat/base.py#L90\r\n\r\nBut the base `ChatAgent` and the `StructuredChatAgent` are not:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/langchain/agents/chat/base.py#L81\r\nhttps://github.com/hwchase17/langchain/blob/master/langchain/agents/structured_chat/base.py#L88\r\n\r\nNeed to do a little bit more experimenting, but moving things into the human message may help with reliability issues.\r\n\r\n\r\n### Suggestion:\r\n\r\n_No response_",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5353/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5353/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5352",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5352/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5352/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5352/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5352",
        "id": 1728924485,
        "node_id": "PR_kwDOIPDwls5RglOT",
        "number": 5352,
        "title": "Add llama.cpp get_num_tokens support",
        "user": {
            "login": "s7726",
            "id": 1107801,
            "node_id": "MDQ6VXNlcjExMDc4MDE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1107801?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/s7726",
            "html_url": "https://github.com/s7726",
            "followers_url": "https://api.github.com/users/s7726/followers",
            "following_url": "https://api.github.com/users/s7726/following{/other_user}",
            "gists_url": "https://api.github.com/users/s7726/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/s7726/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/s7726/subscriptions",
            "organizations_url": "https://api.github.com/users/s7726/orgs",
            "repos_url": "https://api.github.com/users/s7726/repos",
            "events_url": "https://api.github.com/users/s7726/events{/privacy}",
            "received_events_url": "https://api.github.com/users/s7726/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-27T20:26:43Z",
        "updated_at": "2023-05-29T13:40:25Z",
        "closed_at": "2023-05-29T13:40:24Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5352",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5352",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5352.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5352.patch",
            "merged_at": "2023-05-29T13:40:24Z"
        },
        "body": "# Adds support for counting tokens using the llama.cpp python interface rather than the default huggingface transformers library\n\nThe current implementation of the `LlamaCpp` LLM defaults to the base `LLM` for token counting. This results in the need for the huggingface transformers library to be loaded.\n\nThe Llama.cpp python interface provides a method for tokenizing a given string. This PR overloads the `get_num_tokens` method of the base class to use that instead.\n\nUsing the native tokenizer should yield more accurate token counts dependent on the loaded model.\n\nFor llama.cpp workflows this PR reduces dependencies.\n\n<!--\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\n\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\n\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\n-->\n\n## Before submitting\n\nWasn't sure how to setup a test for this without spinning up a particular model. But I have tested it in a project.\n\n## Who can review?\n\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\n@hwchase17\n@agola11\n<!-- For a quicker response, figure out the right person to tag with @\n\n  @hwchase17 - project lead\n\n  Tracing / Callbacks\n  - @agola11\n\n  Async\n  - @agola11\n\n  DataLoaders\n  - @eyurtsev\n\n  Models\n  - @hwchase17\n  - @agola11\n\n  Agents / Tools / Toolkits\n  - @vowelparrot\n\n  VectorStores / Retrievers / Memory\n  - @dev2049\n        \n -->\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5352/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5352/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5351",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5351/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5351/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5351/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5351",
        "id": 1728921069,
        "node_id": "PR_kwDOIPDwls5RgkhV",
        "number": 5351,
        "title": "Sample Notebook for DynamoDB Chat Message History",
        "user": {
            "login": "KBB99",
            "id": 19329998,
            "node_id": "MDQ6VXNlcjE5MzI5OTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/19329998?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KBB99",
            "html_url": "https://github.com/KBB99",
            "followers_url": "https://api.github.com/users/KBB99/followers",
            "following_url": "https://api.github.com/users/KBB99/following{/other_user}",
            "gists_url": "https://api.github.com/users/KBB99/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KBB99/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KBB99/subscriptions",
            "organizations_url": "https://api.github.com/users/KBB99/orgs",
            "repos_url": "https://api.github.com/users/KBB99/repos",
            "events_url": "https://api.github.com/users/KBB99/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KBB99/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T20:15:50Z",
        "updated_at": "2023-05-28T04:29:34Z",
        "closed_at": "2023-05-28T04:16:25Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5351",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5351",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5351.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5351.patch",
            "merged_at": "2023-05-28T04:16:24Z"
        },
        "body": "# Sample Notebook for DynamoDB Chat Message History\r\n\r\n@dev2049\r\n\r\nAdding a sample notebook for the DynamoDB Chat Message History class.\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n        \r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5351/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5351/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5348",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5348/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5348/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5348/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5348",
        "id": 1728907870,
        "node_id": "I_kwDOIPDwls5nDQpe",
        "number": 5348,
        "title": "implement `Multiagent Debate`",
        "user": {
            "login": "leo-gan",
            "id": 2256422,
            "node_id": "MDQ6VXNlcjIyNTY0MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2256422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leo-gan",
            "html_url": "https://github.com/leo-gan",
            "followers_url": "https://api.github.com/users/leo-gan/followers",
            "following_url": "https://api.github.com/users/leo-gan/following{/other_user}",
            "gists_url": "https://api.github.com/users/leo-gan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leo-gan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leo-gan/subscriptions",
            "organizations_url": "https://api.github.com/users/leo-gan/orgs",
            "repos_url": "https://api.github.com/users/leo-gan/repos",
            "events_url": "https://api.github.com/users/leo-gan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leo-gan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-05-27T19:13:41Z",
        "updated_at": "2023-12-11T17:05:44Z",
        "closed_at": "2023-12-11T17:05:39Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "body": "### Feature request\n\n[Improving Factuality and Reasoning in Language\r\nModels through Multiagent Debate](https://arxiv.org/pdf/2305.14325.pdf) - looks very promising\n\n### Motivation\n\nThis method is orthogonal to other methods like CoT. It looks like, this method is beneficial almost in any case when we need the highest quality answer.\n\n### Your contribution\n\nI can help with testing. Not sure about quick implementation.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5348/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5348/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5347",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5347/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5347/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5347/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5347",
        "id": 1728877787,
        "node_id": "I_kwDOIPDwls5nDJTb",
        "number": 5347,
        "title": "Using OpenLM example giving error: \"ValueError: OPENAI_API_KEY is not set or passed as an argument\"",
        "user": {
            "login": "pst2154",
            "id": 6865592,
            "node_id": "MDQ6VXNlcjY4NjU1OTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6865592?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pst2154",
            "html_url": "https://github.com/pst2154",
            "followers_url": "https://api.github.com/users/pst2154/followers",
            "following_url": "https://api.github.com/users/pst2154/following{/other_user}",
            "gists_url": "https://api.github.com/users/pst2154/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pst2154/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pst2154/subscriptions",
            "organizations_url": "https://api.github.com/users/pst2154/orgs",
            "repos_url": "https://api.github.com/users/pst2154/repos",
            "events_url": "https://api.github.com/users/pst2154/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pst2154/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-27T18:13:32Z",
        "updated_at": "2023-09-12T16:12:17Z",
        "closed_at": "2023-09-12T16:12:16Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nRunning latest versions of langchain, openai, openlm, python 3.10, mac M1, trying this example I saw on Twitter\r\n\r\nhttps://python.langchain.com/en/latest/modules/models/llms/integrations/openlm.html?highlight=openlm\r\n\r\n```\r\nfrom langchain.llms import OpenLM\r\nfrom langchain.llms import OpenAI\r\nfrom langchain.llms import openai\r\nfrom langchain import PromptTemplate, LLMChain\r\n\r\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\r\n\r\nquestion = \"What is the capital of France?\"\r\ntemplate = \"\"\"Question: {question}\r\n\r\nAnswer: Let's think step by step.\"\"\"\r\n\r\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\r\n\r\n\r\nllm1 = OpenAI()\r\n\r\nllm2 = OpenLM(model=\"text-davinci-003\")\r\nllm_chain1 = LLMChain(prompt=prompt, llm=llm1)\r\nllm_chain2 = LLMChain(prompt=prompt, llm=llm2)\r\nresult1 = llm_chain1.run(question)\r\nresult2 = llm_chain2.run(question)\r\n```\r\n\r\nresult 1 runs, result 2 gives ValueError: OPENAI_API_KEY is not set or passed as an argument\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [X] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n```\r\nfrom langchain.llms import OpenLM\r\nfrom langchain.llms import OpenAI\r\nfrom langchain.llms import openai\r\nfrom langchain import PromptTemplate, LLMChain\r\n\r\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\r\n\r\nquestion = \"What is the capital of France?\"\r\ntemplate = \"\"\"Question: {question}\r\n\r\nAnswer: Let's think step by step.\"\"\"\r\n\r\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\r\n\r\n\r\nllm1 = OpenAI()\r\n\r\nllm2 = OpenLM(model=\"text-davinci-003\")\r\nllm_chain1 = LLMChain(prompt=prompt, llm=llm1)\r\nllm_chain2 = LLMChain(prompt=prompt, llm=llm2)\r\nresult1 = llm_chain1.run(question)\r\nresult2 = llm_chain2.run(question)\r\n```\n\n### Expected behavior\n\nRun without error",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5347/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5347/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5346",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5346/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5346/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5346/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5346",
        "id": 1728842882,
        "node_id": "I_kwDOIPDwls5nDAyC",
        "number": 5346,
        "title": "Extend elastic_vector_search.py to allow for kNN indexing/searching",
        "user": {
            "login": "jeffvestal",
            "id": 53237856,
            "node_id": "MDQ6VXNlcjUzMjM3ODU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/53237856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jeffvestal",
            "html_url": "https://github.com/jeffvestal",
            "followers_url": "https://api.github.com/users/jeffvestal/followers",
            "following_url": "https://api.github.com/users/jeffvestal/following{/other_user}",
            "gists_url": "https://api.github.com/users/jeffvestal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jeffvestal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jeffvestal/subscriptions",
            "organizations_url": "https://api.github.com/users/jeffvestal/orgs",
            "repos_url": "https://api.github.com/users/jeffvestal/repos",
            "events_url": "https://api.github.com/users/jeffvestal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jeffvestal/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": {
            "login": "jeffvestal",
            "id": 53237856,
            "node_id": "MDQ6VXNlcjUzMjM3ODU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/53237856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jeffvestal",
            "html_url": "https://github.com/jeffvestal",
            "followers_url": "https://api.github.com/users/jeffvestal/followers",
            "following_url": "https://api.github.com/users/jeffvestal/following{/other_user}",
            "gists_url": "https://api.github.com/users/jeffvestal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jeffvestal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jeffvestal/subscriptions",
            "organizations_url": "https://api.github.com/users/jeffvestal/orgs",
            "repos_url": "https://api.github.com/users/jeffvestal/repos",
            "events_url": "https://api.github.com/users/jeffvestal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jeffvestal/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "jeffvestal",
                "id": 53237856,
                "node_id": "MDQ6VXNlcjUzMjM3ODU2",
                "avatar_url": "https://avatars.githubusercontent.com/u/53237856?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/jeffvestal",
                "html_url": "https://github.com/jeffvestal",
                "followers_url": "https://api.github.com/users/jeffvestal/followers",
                "following_url": "https://api.github.com/users/jeffvestal/following{/other_user}",
                "gists_url": "https://api.github.com/users/jeffvestal/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/jeffvestal/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jeffvestal/subscriptions",
                "organizations_url": "https://api.github.com/users/jeffvestal/orgs",
                "repos_url": "https://api.github.com/users/jeffvestal/repos",
                "events_url": "https://api.github.com/users/jeffvestal/events{/privacy}",
                "received_events_url": "https://api.github.com/users/jeffvestal/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-27T17:12:57Z",
        "updated_at": "2023-06-02T19:49:19Z",
        "closed_at": "2023-06-02T19:49:19Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature request\n\nExtend `langchain/embeddings/elasticsearch.py` to support kNN indexing and searching. \r\nThe high-level objectives will be:\r\n\r\n1. Allow for the [creation of an index with the correct mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/dense-vector.html#index-vectors-knn-search) to store documents including dense_vectors so they can be used for kNN search\r\n2. Store embeddings in elasticsearch in [dense_vector](https://www.elastic.co/guide/en/elasticsearch/reference/current/dense-vector.html) field type\r\n3. Perform [kNN search](https://www.elastic.co/guide/en/elasticsearch/reference/current/knn-search.html)\r\n4. Perform [Hybrid](https://www.elastic.co/guide/en/elasticsearch/reference/current/knn-search.html#_combine_approximate_knn_with_other_features) BM25 (query) + kNN search\r\n\n\n### Motivation\n\nElasticsearch support approximate k-nearest neighbor search with dense vectors. The current module only support script score / exact match vector search. \n\n### Your contribution\n\nI will work on the code and create the pull request",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5346/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5346/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5345",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5345/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5345/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5345/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5345",
        "id": 1728810122,
        "node_id": "I_kwDOIPDwls5nC4yK",
        "number": 5345,
        "title": "FLARE | Azure open Ai doesn't work",
        "user": {
            "login": "waadarsh",
            "id": 36239301,
            "node_id": "MDQ6VXNlcjM2MjM5MzAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/36239301?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/waadarsh",
            "html_url": "https://github.com/waadarsh",
            "followers_url": "https://api.github.com/users/waadarsh/followers",
            "following_url": "https://api.github.com/users/waadarsh/following{/other_user}",
            "gists_url": "https://api.github.com/users/waadarsh/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/waadarsh/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/waadarsh/subscriptions",
            "organizations_url": "https://api.github.com/users/waadarsh/orgs",
            "repos_url": "https://api.github.com/users/waadarsh/repos",
            "events_url": "https://api.github.com/users/waadarsh/events{/privacy}",
            "received_events_url": "https://api.github.com/users/waadarsh/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-27T16:08:32Z",
        "updated_at": "2023-09-15T16:10:19Z",
        "closed_at": "2023-09-15T16:10:18Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "---------------------------------------------------------------------------\r\nInvalidRequestError                       Traceback (most recent call last)\r\n[<ipython-input-33-f877209e86e7>](https://localhost:8080/#) in <cell line: 1>()\r\n----> 1 flare.run(query)\r\n\r\n20 frames\r\n[/usr/local/lib/python3.10/dist-packages/openai/api_resources/abstract/engine_api_resource.py](https://localhost:8080/#) in __prepare_create_request(cls, api_key, api_base, api_type, api_version, organization, **params)\r\n     81         if typed_api_type in (util.ApiType.AZURE, util.ApiType.AZURE_AD):\r\n     82             if deployment_id is None and engine is None:\r\n---> 83                 raise error.InvalidRequestError(\r\n     84                     \"Must provide an 'engine' or 'deployment_id' parameter to create a %s\"\r\n     85                     % cls,\r\n\r\nInvalidRequestError: Must provide an 'engine' or 'deployment_id' parameter to create a <class 'openai.api_resources.completion.Completion'>",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5345/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5345/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5344",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5344/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5344/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5344/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5344",
        "id": 1728796525,
        "node_id": "PR_kwDOIPDwls5RgKB7",
        "number": 5344,
        "title": "Update llamacpp demonstration notebook",
        "user": {
            "login": "mmagnesium",
            "id": 48142538,
            "node_id": "MDQ6VXNlcjQ4MTQyNTM4",
            "avatar_url": "https://avatars.githubusercontent.com/u/48142538?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mmagnesium",
            "html_url": "https://github.com/mmagnesium",
            "followers_url": "https://api.github.com/users/mmagnesium/followers",
            "following_url": "https://api.github.com/users/mmagnesium/following{/other_user}",
            "gists_url": "https://api.github.com/users/mmagnesium/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mmagnesium/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mmagnesium/subscriptions",
            "organizations_url": "https://api.github.com/users/mmagnesium/orgs",
            "repos_url": "https://api.github.com/users/mmagnesium/repos",
            "events_url": "https://api.github.com/users/mmagnesium/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mmagnesium/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-27T15:39:34Z",
        "updated_at": "2023-05-29T13:43:27Z",
        "closed_at": "2023-05-29T13:43:27Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5344",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5344",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5344.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5344.patch",
            "merged_at": "2023-05-29T13:43:27Z"
        },
        "body": "# Update llamacpp demonstration notebook\r\n\r\nAdd instructions to install with BLAS backend, and update the example of model usage.\r\n\r\nFixes #5071. However, it is more like a prevention of similar issues in the future, not a fix, since there was no problem in the framework functionality\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n- @hwchase17 \r\n- @agola11\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5344/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5344/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5343",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5343/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5343/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5343/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5343",
        "id": 1728784070,
        "node_id": "PR_kwDOIPDwls5RgHRQ",
        "number": 5343,
        "title": "Removed deprecated llm attribute for load_chain",
        "user": {
            "login": "imeckr",
            "id": 7942293,
            "node_id": "MDQ6VXNlcjc5NDIyOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7942293?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/imeckr",
            "html_url": "https://github.com/imeckr",
            "followers_url": "https://api.github.com/users/imeckr/followers",
            "following_url": "https://api.github.com/users/imeckr/following{/other_user}",
            "gists_url": "https://api.github.com/users/imeckr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/imeckr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/imeckr/subscriptions",
            "organizations_url": "https://api.github.com/users/imeckr/orgs",
            "repos_url": "https://api.github.com/users/imeckr/repos",
            "events_url": "https://api.github.com/users/imeckr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/imeckr/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-27T15:22:22Z",
        "updated_at": "2023-05-29T13:44:47Z",
        "closed_at": "2023-05-29T13:44:47Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5343",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5343",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5343.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5343.patch",
            "merged_at": "2023-05-29T13:44:47Z"
        },
        "body": "# Removed deprecated llm attribute for load_chain\r\n\r\nCurrently `load_chain` for some chain types expect `llm` attribute to be present but `llm` is deprecated attribute for those chains and might not be persisted during their `chain.save`.\r\n\r\nFixes #5224 [(issue)](https://github.com/hwchase17/langchain/issues/5224)\r\n\r\n## Who can review?\r\n@hwchase17\r\n@dev2049 \r\n ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5343/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5343/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5342",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5342/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5342/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5342/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5342",
        "id": 1728738044,
        "node_id": "I_kwDOIPDwls5nCnL8",
        "number": 5342,
        "title": "UnstructuredURLLoader can't load data from url",
        "user": {
            "login": "midxplore",
            "id": 52440723,
            "node_id": "MDQ6VXNlcjUyNDQwNzIz",
            "avatar_url": "https://avatars.githubusercontent.com/u/52440723?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/midxplore",
            "html_url": "https://github.com/midxplore",
            "followers_url": "https://api.github.com/users/midxplore/followers",
            "following_url": "https://api.github.com/users/midxplore/following{/other_user}",
            "gists_url": "https://api.github.com/users/midxplore/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/midxplore/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/midxplore/subscriptions",
            "organizations_url": "https://api.github.com/users/midxplore/orgs",
            "repos_url": "https://api.github.com/users/midxplore/repos",
            "events_url": "https://api.github.com/users/midxplore/events{/privacy}",
            "received_events_url": "https://api.github.com/users/midxplore/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 16,
        "created_at": "2023-05-27T13:55:09Z",
        "updated_at": "2023-11-08T13:29:53Z",
        "closed_at": "2023-05-28T04:07:03Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nI operate according to the official documentation (https://python.langchain.com/en/latest/modules/indexes/document_loaders/examples/url.html), but I can't get the information through loader.load(), but the output is still [], the language I use is Python, and the version of langchain is 0.0.181, I tried reinstalling the dependent environment but it didn't work well, hopefully it can be solved soon\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n from langchain.document_loaders import UnstructuredURLLoader\r\n\r\nurls = [\r\n    \"https://www.understandingwar.org/backgrounder/russian-offensive-campaign-assessment-february-8-2023\",\r\n    \"https://www.understandingwar.org/backgrounder/russian-offensive-campaign-assessment-february-9-2023\"\r\n]\r\n\r\nloader = UnstructuredURLLoader(urls=urls)\r\n\r\ndata = loader.load()\n\n### Expected behavior\n\ndata not empty",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5342/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5342/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5340",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5340/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5340/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5340/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5340",
        "id": 1728681110,
        "node_id": "I_kwDOIPDwls5nCZSW",
        "number": 5340,
        "title": "Implement a way to abort / cancel request",
        "user": {
            "login": "dzmitry-kankalovich",
            "id": 6346981,
            "node_id": "MDQ6VXNlcjYzNDY5ODE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6346981?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dzmitry-kankalovich",
            "html_url": "https://github.com/dzmitry-kankalovich",
            "followers_url": "https://api.github.com/users/dzmitry-kankalovich/followers",
            "following_url": "https://api.github.com/users/dzmitry-kankalovich/following{/other_user}",
            "gists_url": "https://api.github.com/users/dzmitry-kankalovich/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dzmitry-kankalovich/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dzmitry-kankalovich/subscriptions",
            "organizations_url": "https://api.github.com/users/dzmitry-kankalovich/orgs",
            "repos_url": "https://api.github.com/users/dzmitry-kankalovich/repos",
            "events_url": "https://api.github.com/users/dzmitry-kankalovich/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dzmitry-kankalovich/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2023-05-27T12:07:10Z",
        "updated_at": "2023-11-19T18:56:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nI've been playing around with OpenAI GPT-4 and ran into situation when response generation might take quite some time - say 5 minutes. \r\n\r\nI switched over to streaming, but often I can immediately see the response is not what want, and therefore I'd like to cancel request.\r\n\r\nNow here is the part that is unclear to me: \r\n**is there an official way to cancel request in Python's version of LangChain?** I have found this [described](https://js.langchain.com/docs/modules/models/chat/additional_functionality#cancelling-requests) in JS/TS version of the framework, however scanning docs, sources and issues yields nothing for this repo.\r\n\r\nFor now I simply terminate process, which works good enough for something like Jupyter notebooks, but quite problematic for say web application.\r\n\r\nBesides termination, it's also unclear if I may incur any unwanted costs or not for the abandoned request.\r\n\r\nShould some sort of feature parity be made with JS LangChain?\n\n### Motivation\n\nProvide a documented way to cancel long-running requests\r\n\n\n### Your contribution\n\nAt this point I have capacity only to test out potential implementation. May work on the implementation in later weeks.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5340/reactions",
            "total_count": 15,
            "+1": 9,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 6
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5340/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5339",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5339/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5339/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5339/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5339",
        "id": 1728672923,
        "node_id": "PR_kwDOIPDwls5Rfvge",
        "number": 5339,
        "title": "pref: reduce DB query error rate",
        "user": {
            "login": "Undertone0809",
            "id": 72488598,
            "node_id": "MDQ6VXNlcjcyNDg4NTk4",
            "avatar_url": "https://avatars.githubusercontent.com/u/72488598?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Undertone0809",
            "html_url": "https://github.com/Undertone0809",
            "followers_url": "https://api.github.com/users/Undertone0809/followers",
            "following_url": "https://api.github.com/users/Undertone0809/following{/other_user}",
            "gists_url": "https://api.github.com/users/Undertone0809/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Undertone0809/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Undertone0809/subscriptions",
            "organizations_url": "https://api.github.com/users/Undertone0809/orgs",
            "repos_url": "https://api.github.com/users/Undertone0809/repos",
            "events_url": "https://api.github.com/users/Undertone0809/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Undertone0809/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2023-05-27T11:49:38Z",
        "updated_at": "2023-06-03T21:55:57Z",
        "closed_at": "2023-06-03T21:55:56Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5339",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5339",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5339.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5339.patch",
            "merged_at": "2023-06-03T21:55:56Z"
        },
        "body": "# Reduce DB query error rate\r\n\r\nIf you use sql agent of `SQLDatabaseToolkit` to query data, it is prone to errors in query fields and often uses fields that do not exist in database tables for queries. However, the existing prompt does not effectively make the agent aware that there are problems with the fields they query. At this time, we urgently need to improve the prompt so that the agent realizes that they have queried non-existent fields and allows them to use the `schema_sql_db`, that is,` ListSQLDatabaseTool` first queries the corresponding fields in the table in the database, and then uses  `QuerySQLDatabaseTool` for querying.\r\n\r\nThere is a demo of my project to show this problem.\r\n\r\n**Original Agent**\r\n\r\n```python\r\ndef create_mysql_kit():\r\n    db = SQLDatabase.from_uri(\"mysql+pymysql://xxxxxxx\")\r\n    llm = OpenAI(temperature=0)\r\n\r\n    toolkit = SQLDatabaseToolkit(db=db, llm=llm)\r\n    agent_executor = create_sql_agent(\r\n        llm=OpenAI(temperature=0),\r\n        toolkit=toolkit,\r\n        verbose=True\r\n    )\r\n    agent_executor.run(\"Who are the users of sysuser in this system? Tell me the username of all users\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    create_mysql_kit()\r\n\r\n```\r\n\r\n**original output**\r\n\r\n```\r\n> Entering new AgentExecutor chain...\r\nAction: list_tables_sql_db\r\nAction Input: \"\"\r\nObservation: app_sysrole_menus, app_bimfacemodel, app_project_users, app_measuringpointdata, auth_user, auth_user_groups, django_apscheduler_djangojobexecution, app_project, app_elementpoint, django_apscheduler_djangojob, django_content_type, app_sysrole, django_admin_log, app_bimfaceaccount, app_measuringpoint_warning_thresholds, app_measuringpoint, app_company, auth_group_permissions, app_sysuser, app_sysuser_companies, app_sysmenu, app_datawarningthreshold, auth_group, auth_permission, app_datawarningrecord, auth_user_user_permissions, app_bimfaceaccount_bimface_models, django_migrations, app_measuringitem, django_session\r\nThought: I should query the app_sysuser table to get the users in the system.\r\nAction: query_sql_db\r\nAction Input: SELECT username FROM app_sysuser LIMIT 10;\r\nObservation: Error: (pymysql.err.OperationalError) (1054, \"Unknown column 'username' in 'field list'\")\r\n[SQL: SELECT username FROM app_sysuser LIMIT 10;]\r\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\r\nThought: I should double check my query before executing it.\r\nAction: query_checker_sql_db\r\nAction Input: SELECT username FROM app_sysuser LIMIT 10;\r\nObservation: \r\n\r\nSELECT username FROM app_sysuser LIMIT 10;\r\nThought: The query looks correct, so I should execute it.\r\nAction: query_sql_db\r\nAction Input: SELECT username FROM app_sysuser LIMIT 10;\r\nObservation: Error: (pymysql.err.OperationalError) (1054, \"Unknown column 'username' in 'field list'\")\r\n[SQL: SELECT username FROM app_sysuser LIMIT 10;]\r\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\r\nThought: I should double check my query before executing it.\r\nAction: query_checker_sql_db\r\nAction Input: SELECT name FROM app_sysuser LIMIT 10;\r\nObservation: \r\n\r\nSELECT name FROM app_sysuser LIMIT 10;\r\nThought: The query looks correct, so I should execute it.\r\nAction: query_sql_db\r\nAction Input: SELECT name FROM app_sysuser LIMIT 10;\r\nObservation: Error: (pymysql.err.OperationalError) (1054, \"Unknown column 'name' in 'field list'\")\r\n[SQL: SELECT name FROM app_sysuser LIMIT 10;]\r\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\r\nThought: I should double check my query before executing it.\r\nAction: query_checker_sql_db\r\nAction Input: SELECT id, username FROM app_sysuser LIMIT 10;\r\nObservation: \r\n\r\nSELECT id, username FROM app_sysuser LIMIT 10;\r\nThought: The query looks correct, so I should execute it.\r\nAction: query_sql_db\r\nAction Input: SELECT id, username FROM app_sysuser LIMIT 10;\r\nObservation: Error: (pymysql.err.OperationalError) (1054, \"Unknown column 'id' in 'field list'\")\r\n[SQL: SELECT id, username FROM app_sysuser LIMIT 10;]\r\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\r\nThought: I should double check my query before executing it.\r\nAction: query_checker_sql_db\r\nAction Input: SELECT user_id, username FROM app_sysuser LIMIT 10;\r\nObservation: \r\n\r\nSELECT user_id, username FROM app_sysuser WHERE user_id IS NOT NULL AND user_id BETWEEN 0 AND 10 UNION ALL SELECT user_id, username FROM app_sysuser WHERE username IS NOT NULL ORDER BY user_id ASC LIMIT 10;\r\nThought: The query looks correct, so I should execute it.\r\nAction: query_sql_db\r\nAction Input: SELECT user_id, username FROM app_sysuser WHERE user_id IS NOT NULL AND user_id BETWEEN 0 AND 10 UNION ALL SELECT user_id, username FROM app_sysuser WHERE username IS NOT NULL ORDER BY user_id ASC LIMIT 10;\r\nObservation: Error: (pymysql.err.OperationalError) (1054, \"Unknown column 'username' in 'field list'\")\r\n[SQL: SELECT user_id, username FROM app_sysuser WHERE user_id IS NOT NULL AND user_id BETWEEN 0 AND 10 UNION ALL SELECT user_id, username FROM app_sysuser WHERE username IS NOT NULL ORDER BY user_id ASC LIMIT 10;]\r\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\r\nThought: I should double check my query before executing it.\r\nAction: query_checker_sql_db\r\nAction Input: SELECT user_id, user_name FROM app_sysuser LIMIT 10;\r\nObservation: \r\n\r\nSELECT user_id, user_name FROM app_sysuser WHERE user_id NOT IN (NULL) AND user_name BETWEEN 'A' AND 'Z' UNION ALL SELECT user_id, user_name FROM app_sysuser WHERE user_id IS NOT NULL AND user_name LIKE '%a%' LIMIT 10;\r\nThought: The query looks correct, so I should execute it.\r\nAction: query_sql_db\r\nAction Input: SELECT user_id, user_name FROM app_sysuser WHERE user_id NOT IN (NULL) AND user_name BETWEEN 'A' AND 'Z' UNION ALL SELECT user_id, user_name FROM app_sysuser WHERE user_id IS NOT NULL AND user_name LIKE '%a%' LIMIT 10;\r\nObservation: []\r\nThought: I now know the final answer.\r\nFinal Answer: There are no users in the sysuser table.\r\n\r\n> Finished chain.\r\n\r\nProcess finished with exit code 0\r\n```\r\n\r\nAs you can see, agent always use incorrect sql to query the data. Actually, the username field name of my `app_sysuser` table is `user_name`, not the `username` believed by the agent.\r\n\r\n**Optimized agent output**\r\n\r\n```\r\n> Entering new AgentExecutor chain...\r\nAction: list_tables_sql_db\r\nAction Input: \"\"\r\nObservation: app_project_users, django_content_type, app_measuringpoint_warning_thresholds, app_bimfaceaccount_bimface_models, django_session, app_sysuser, django_migrations, app_bimfacemodel, app_elementpoint, app_measuringpoint, django_apscheduler_djangojobexecution, auth_permission, app_sysuser_companies, app_measuringpointdata, app_measuringitem, app_sysrole_menus, django_admin_log, auth_group, django_apscheduler_djangojob, app_sysmenu, app_project, app_bimfaceaccount, app_datawarningthreshold, app_datawarningrecord, auth_user_groups, auth_user_user_permissions, auth_group_permissions, auth_user, app_company, app_sysrole\r\nThought: I should query the app_sysuser table to get the usernames of all the users.\r\nAction: query_sql_db\r\nAction Input: SELECT username FROM app_sysuser\r\nObservation: Error: (pymysql.err.OperationalError) (1054, \"Unknown column 'username' in 'field list'\")\r\n[SQL: SELECT username FROM app_sysuser]\r\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\r\nThought: I should use the schema_sql_db tool to get the correct table fields.\r\nAction: schema_sql_db\r\nAction Input: app_sysuser\r\nObservation: \r\nCREATE TABLE app_sysuser (\r\n\tuser_id INTEGER NOT NULL AUTO_INCREMENT, \r\n\tuser_account VARCHAR(50) COLLATE utf8mb4_general_ci NOT NULL, \r\n\tuser_password VARCHAR(255) COLLATE utf8mb4_general_ci NOT NULL, \r\n\tuser_name VARCHAR(50) COLLATE utf8mb4_general_ci NOT NULL, \r\n\tuser_avatar VARCHAR(255) COLLATE utf8mb4_general_ci, \r\n\tuser_email VARCHAR(254) COLLATE utf8mb4_general_ci, \r\n\tuser_phone VARCHAR(20) COLLATE utf8mb4_general_ci, \r\n\tuser_create_time DATETIME(6) NOT NULL, \r\n\tuser_update_time DATETIME(6) NOT NULL, \r\n\tuser_status SMALLINT, \r\n\trole_id_id INTEGER, \r\n\tPRIMARY KEY (user_id), \r\n\tCONSTRAINT app_sysuser_role_id_id_51b50f39_fk_app_sysrole_role_id FOREIGN KEY(role_id_id) REFERENCES app_sysrole (role_id)\r\n)COLLATE utf8mb4_general_ci DEFAULT CHARSET=utf8mb4 ENGINE=InnoDB\r\n\r\n/*\r\n3 rows from app_sysuser table:\r\nuser_id\tuser_account\tuser_password\tuser_name\tuser_avatar\tuser_email\tuser_phone\tuser_create_time\tuser_update_time\tuser_status\trole_id_id\r\nxxxxxxxxxxxxxx\r\n*/\r\nThought: I should query the app_sysuser table to get the usernames of all the users.\r\nAction: query_sql_db\r\nAction Input: SELECT user_account FROM app_sysuser LIMIT 10\r\nObservation: [('baiyun',), ('eatrice',), ('lisi',), ('pingxiang',), ('wangwu',), ('zeeland',), ('zsj',), ('zzw',)]\r\nThought: I now know the final answer\r\nFinal Answer: The usernames of the users in the sysuser table are baiyun, eatrice, lisi, pingxiang, wangwu, zeeland, zsj, and zzw.\r\n\r\n> Finished chain.\r\n\r\nProcess finished with exit code 0\r\n\r\n```\r\n\r\nI have tested about 10 related prompts and they all work properly, with a much lower error rate compared to before\r\n\r\n\r\n## Who can review?\r\n\r\n@vowelparrot \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5339/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5339/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5338",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5338/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5338/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5338/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5338",
        "id": 1728670022,
        "node_id": "PR_kwDOIPDwls5Rfu44",
        "number": 5338,
        "title": "adding MongoDBAtlasVectorSearch",
        "user": {
            "login": "P-E-B",
            "id": 38215315,
            "node_id": "MDQ6VXNlcjM4MjE1MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/38215315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/P-E-B",
            "html_url": "https://github.com/P-E-B",
            "followers_url": "https://api.github.com/users/P-E-B/followers",
            "following_url": "https://api.github.com/users/P-E-B/following{/other_user}",
            "gists_url": "https://api.github.com/users/P-E-B/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/P-E-B/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/P-E-B/subscriptions",
            "organizations_url": "https://api.github.com/users/P-E-B/orgs",
            "repos_url": "https://api.github.com/users/P-E-B/repos",
            "events_url": "https://api.github.com/users/P-E-B/events{/privacy}",
            "received_events_url": "https://api.github.com/users/P-E-B/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528817,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvMQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            },
            {
                "id": 5541432778,
                "node_id": "LA_kwDOIPDwls8AAAABSkuNyg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20vector%20store",
                "name": "area: vector store",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to vector store module"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 22,
        "created_at": "2023-05-27T11:42:59Z",
        "updated_at": "2023-06-06T14:18:01Z",
        "closed_at": "2023-05-30T14:59:02Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5338",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5338",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5338.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5338.patch",
            "merged_at": "2023-05-30T14:59:02Z"
        },
        "body": "# Add MongoDBAtlasVectorSearch for the python library\r\n\r\nFixes #5337\r\n\r\n## Who can review?\r\n@dev2049 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5338/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5338/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5337",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5337/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5337/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5337/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5337",
        "id": 1728669494,
        "node_id": "I_kwDOIPDwls5nCWc2",
        "number": 5337,
        "title": "Add MongoDBAtlasVectorSearch vectorstore",
        "user": {
            "login": "P-E-B",
            "id": 38215315,
            "node_id": "MDQ6VXNlcjM4MjE1MzE1",
            "avatar_url": "https://avatars.githubusercontent.com/u/38215315?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/P-E-B",
            "html_url": "https://github.com/P-E-B",
            "followers_url": "https://api.github.com/users/P-E-B/followers",
            "following_url": "https://api.github.com/users/P-E-B/following{/other_user}",
            "gists_url": "https://api.github.com/users/P-E-B/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/P-E-B/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/P-E-B/subscriptions",
            "organizations_url": "https://api.github.com/users/P-E-B/orgs",
            "repos_url": "https://api.github.com/users/P-E-B/repos",
            "events_url": "https://api.github.com/users/P-E-B/events{/privacy}",
            "received_events_url": "https://api.github.com/users/P-E-B/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T11:41:39Z",
        "updated_at": "2023-05-30T14:59:03Z",
        "closed_at": "2023-05-30T14:59:03Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature request\r\n\r\nMongoDB Atlas is a fully managed DBaaS, powered by the MongoDB database. It also enables Lucene (collocated with the mongod process) for full-text search - this is know as Atlas Search. The PR has to allow Langchain users from using the functionality related to the MongoDB Atlas Vector Search feature where you can store your embeddings in MongoDB documents and create a Lucene vector index to perform a KNN search.\r\n\r\n### Motivation\r\n\r\nThere is currently no way in Langchain to connect to MongoDB Atlas and perform a KNN search.\r\n\r\n### Your contribution\r\n\r\nI am submitting a PR for this issue soon.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5337/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5337/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5336",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5336/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5336/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5336/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5336",
        "id": 1728661570,
        "node_id": "I_kwDOIPDwls5nCUhC",
        "number": 5336,
        "title": "FAISS.add_embeddings is typed to take iterables but does not. ",
        "user": {
            "login": "startakovsky",
            "id": 689723,
            "node_id": "MDQ6VXNlcjY4OTcyMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/689723?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/startakovsky",
            "html_url": "https://github.com/startakovsky",
            "followers_url": "https://api.github.com/users/startakovsky/followers",
            "following_url": "https://api.github.com/users/startakovsky/following{/other_user}",
            "gists_url": "https://api.github.com/users/startakovsky/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/startakovsky/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/startakovsky/subscriptions",
            "organizations_url": "https://api.github.com/users/startakovsky/orgs",
            "repos_url": "https://api.github.com/users/startakovsky/repos",
            "events_url": "https://api.github.com/users/startakovsky/events{/privacy}",
            "received_events_url": "https://api.github.com/users/startakovsky/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-27T11:29:03Z",
        "updated_at": "2023-12-07T16:08:35Z",
        "closed_at": "2023-12-07T16:08:34Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\nMacOS\r\nLangchain Version 0.0.181\r\nPython Version 3.11.3\r\n\r\n### Who can help?\r\n\r\n@eyurtsev I wasn't sure who to reach out to. The following is the signature for adding embeddings to FAISS: \r\n\r\n```python\r\nFAISS.add_embeddings(\r\n    self,\r\n    text_embeddings: 'Iterable[Tuple[str, List[float]]]',\r\n    metadatas: 'Optional[List[dict]]' = None,\r\n    **kwargs: 'Any',\r\n) -> 'List[str]'\r\n```\r\n\r\nNotice that `text_embeddings` takes an iterable. However, when I do this I get a failure with my iterable, but when wrapped in a `list` function then it is successful.\r\n\r\n \r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [ ] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [ ] Output Parsers\r\n- [ ] Document Loaders\r\n- [X] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\n```python\r\nfrom langchain.vectorstores import FAISS\r\nfrom langchain.embeddings import OpenAIEmbeddings\r\n\r\nvs = FAISS.from_texts(['a'], embedding=OpenAIEmbeddings())\r\nvector = OpenAIEmbeddings().embed_query('b')\r\n\r\n# error happens with this next line, see \"Expected behavior\" below.\r\nvs.add_embeddings(iter([('b', vector)]))\r\n\r\n# no error happens when wrapped in a list\r\nvs.add_embeddings(list(iter([('b', vector)])))\r\n```\r\n\r\n### Expected behavior\r\n\r\n```bash\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n...\r\nFile ~/.pyenv/versions/3.11.3/envs/myenv/lib/python3.11/site-packages/faiss/class_wrappers.py:227, in handle_Index.<locals>.replacement_add(self, x)\r\n    214 def replacement_add(self, x):\r\n    215     \"\"\"Adds vectors to the index.\r\n    216     The index must be trained before vectors can be added to it.\r\n    217     The vectors are implicitly numbered in sequence. When `n` vectors are\r\n   (...)\r\n    224         `dtype` must be float32.\r\n    225     \"\"\"\r\n--> 227     n, d = x.shape\r\n    228     assert d == self.d\r\n    229     x = np.ascontiguousarray(x, dtype='float32')\r\n\r\nValueError: not enough values to unpack (expected 2, got 1)\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5336/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5336/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5335",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5335/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5335/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5335/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5335",
        "id": 1728609263,
        "node_id": "I_kwDOIPDwls5nCHvv",
        "number": 5335,
        "title": "`Agents with Chat Models` Example Code Abnormal When Using `google-serper` Tool",
        "user": {
            "login": "dsdashun",
            "id": 1663307,
            "node_id": "MDQ6VXNlcjE2NjMzMDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1663307?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dsdashun",
            "html_url": "https://github.com/dsdashun",
            "followers_url": "https://api.github.com/users/dsdashun/followers",
            "following_url": "https://api.github.com/users/dsdashun/following{/other_user}",
            "gists_url": "https://api.github.com/users/dsdashun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dsdashun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dsdashun/subscriptions",
            "organizations_url": "https://api.github.com/users/dsdashun/orgs",
            "repos_url": "https://api.github.com/users/dsdashun/repos",
            "events_url": "https://api.github.com/users/dsdashun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dsdashun/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-27T09:47:29Z",
        "updated_at": "2023-09-15T16:10:24Z",
        "closed_at": "2023-09-15T16:10:23Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\n* Langchain: 0.0.181\r\n* OS: Ubuntu Linux 20.04\r\n  * Kernel: `Linux iZt4n78zs78m7gw0tztt8lZ 5.4.0-47-generic #51-Ubuntu SMP Fri Sep 4 19:50:52 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux`\r\n  * Ubuntu version:\r\n```plain \r\nLSB Version:    core-11.1.0ubuntu2-noarch:security-11.1.0ubuntu2-noarch\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 20.04.1 LTS\r\nRelease:        20.04\r\nCodename:       focal\r\n```\r\n* Python: Python 3.8.2\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [X] Agents / Agent Executors\n- [X] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n1. Use the example code provided in [Quick Start: Agents with Chat Models](https://python.langchain.com/en/latest/getting_started/getting_started.html#agents-with-chat-models), but replace the 'serpapi' tool with 'google-serper' tool . \r\nHere's the modified code:\r\n```python\r\nfrom langchain.agents import load_tools\r\nfrom langchain.agents import initialize_agent\r\nfrom langchain.agents import AgentType\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.llms import OpenAI\r\n\r\nchat = ChatOpenAI(temperature=0.3)\r\n\r\nllm = OpenAI(temperature=0)\r\ntools = load_tools([\"google-serper\", \"llm-math\"], llm=llm)\r\n\r\nagent = initialize_agent(tools, chat, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\r\n\r\nresult = agent.run(\"Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?\")\r\nprint(result)\r\n```\r\n\r\nWhen I execute the code above.  Error occurred.  Here's the error text: \r\n~~~plain\r\n(openai-test) dsdashun@iZt4n78zs78m7gw0tztt8lZ:~/workspaces/openai-test/langchain$ python3 get_started_chat_agent.py\r\n\r\n\r\n> Entering new AgentExecutor chain...\r\nTraceback (most recent call last):\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/agents/chat/output_parser.py\", line 22, in parse\r\n    response = json.loads(action.strip())\r\n  File \"/usr/lib/python3.8/json/__init__.py\", line 357, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/usr/lib/python3.8/json/decoder.py\", line 340, in decode\r\n    raise JSONDecodeError(\"Extra data\", s, end)\r\njson.decoder.JSONDecodeError: Extra data: line 4 column 2 (char 75)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"get_started_chat_agent.py\", line 14, in <module>\r\n    result = agent.run(\"Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?\")\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/chains/base.py\", line 213, in run\r\n    return self(args[0])[self.output_keys[0]]\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/chains/base.py\", line 116, in __call__\r\n    raise e\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/chains/base.py\", line 113, in __call__\r\n    outputs = self._call(inputs)\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/agents/agent.py\", line 792, in _call\r\n    next_step_output = self._take_next_step(\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/agents/agent.py\", line 672, in _take_next_step\r\n    output = self.agent.plan(intermediate_steps, **inputs)\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/agents/agent.py\", line 385, in plan\r\n    return self.output_parser.parse(full_output)\r\n  File \"/home/dsdashun/.local/share/virtualenvs/openai-test-pldc8tvg/lib/python3.8/site-packages/langchain/agents/chat/output_parser.py\", line 26, in parse\r\n    raise OutputParserException(f\"Could not parse LLM output: {text}\")\r\nlangchain.schema.OutputParserException: Could not parse LLM output: Question: Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?\r\nThought: I should use Serper Search to find out who Olivia Wilde's boyfriend is and then use Calculator to calculate his age raised to the 0.23 power.\r\nAction:\r\n```\r\n{\r\n  \"action\": \"Serper Search\",\r\n  \"action_input\": \"Olivia Wilde boyfriend\"\r\n},\r\n{\r\n  \"action\": \"Calculator\",\r\n  \"action_input\": \"Age of Olivia Wilde's boyfriend raised to the 0.23 power\"\r\n}\r\n```\r\n\r\n~~~\r\n\r\nHowever, if I use the `pdb` debugger to debug the program step by step, and pause a little bit after running `initialize_agent`, everything is fine.  \r\n\r\nI didn't use the 'serpapi' tool, because I don't have an API key on it.  So I cannot verify whether the original example code can be executed successfully on my machine using the 'serpapi' tool\n\n### Expected behavior\n\nI expect the code can run successfully without any problems, even if I replace the search tool with a similar one.  ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5335/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5335/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5334",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5334/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5334/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5334/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5334",
        "id": 1728559884,
        "node_id": "PR_kwDOIPDwls5RfWSS",
        "number": 5334,
        "title": "Add removing any text before json to parse_json_markdown",
        "user": {
            "login": "mohsend",
            "id": 4129635,
            "node_id": "MDQ6VXNlcjQxMjk2MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4129635?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mohsend",
            "html_url": "https://github.com/mohsend",
            "followers_url": "https://api.github.com/users/mohsend/followers",
            "following_url": "https://api.github.com/users/mohsend/following{/other_user}",
            "gists_url": "https://api.github.com/users/mohsend/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mohsend/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mohsend/subscriptions",
            "organizations_url": "https://api.github.com/users/mohsend/orgs",
            "repos_url": "https://api.github.com/users/mohsend/repos",
            "events_url": "https://api.github.com/users/mohsend/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mohsend/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-27T09:00:13Z",
        "updated_at": "2023-05-29T13:46:03Z",
        "closed_at": "2023-05-29T13:46:03Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5334",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5334",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5334.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5334.patch",
            "merged_at": null
        },
        "body": "# Add removing any text before the json string to parse_json_markdown (Issue #1358)\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes #1358 (ValueError: Could not parse LLM output: )\r\n\r\nSometimes the agent adds a little sentence before the thought JSON it's supposed to give. I causes an error. This little function removes that part before the main JSON response before trying to parse it. Here is an example error I got before this fix:\r\n\r\n`````\r\nTraceback (most recent call last):\r\n  File \".../langchain/agents/conversational_chat/output_parser.py\", line 17, in parse\r\n    response = parse_json_markdown(text)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../langchain/output_parsers/json.py\", line 17, in parse_json_markdown\r\n    parsed = json.loads(json_string)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/json/__init__.py\", line 346, in loads\r\n    return _default_decoder.decode(s)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/json/decoder.py\", line 337, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/usr/lib/python3.11/json/decoder.py\", line 355, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n...\r\n  File \".../langchain/chains/base.py\", line 239, in run\r\n    return self(kwargs, callbacks=callbacks)[self.output_keys[0]]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../langchain/chains/base.py\", line 140, in __call__\r\n    raise e\r\n  File \".../langchain/chains/base.py\", line 134, in __call__\r\n    self._call(inputs, run_manager=run_manager)\r\n  File \".../langchain/agents/agent.py\", line 951, in _call\r\n    next_step_output = self._take_next_step(\r\n                       ^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../langchain/agents/agent.py\", line 773, in _take_next_step\r\n    raise e\r\n  File \".../langchain/agents/agent.py\", line 762, in _take_next_step\r\n    output = self.agent.plan(\r\n             ^^^^^^^^^^^^^^^^\r\n  File \".../langchain/agents/agent.py\", line 444, in plan\r\n    return self.output_parser.parse(full_output)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \".../langchain/agents/conversational_chat/output_parser.py\", line 24, in parse\r\n    raise OutputParserException(f\"Could not parse LLM output: {text}\") from e\r\nlangchain.schema.OutputParserException: Could not parse LLM output: Sure, here's a sentence-long description of the first tool in the list:\r\n\r\n```json\r\n{\r\n    \"action\": \"Final Answer\",\r\n    \"action_input\": \"The 'Search the internet' tool is useful for finding information about current events or the current state of the world. You can input a single search term to get started.\"\r\n}\r\n```\r\n`````\r\n\r\nIn this PR, in the example above `parse_json_markdown` will remove \"Sure, here's a sentence-long description of the first tool in the list:\" before trying to parse the string as a json.\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n@vowelparrot\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n        \r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5334/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5334/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5333",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5333/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5333/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5333/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5333",
        "id": 1728554626,
        "node_id": "PR_kwDOIPDwls5RfVIC",
        "number": 5333,
        "title": "Improved json parse sanitization",
        "user": {
            "login": "svdeepak99",
            "id": 42609308,
            "node_id": "MDQ6VXNlcjQyNjA5MzA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/42609308?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svdeepak99",
            "html_url": "https://github.com/svdeepak99",
            "followers_url": "https://api.github.com/users/svdeepak99/followers",
            "following_url": "https://api.github.com/users/svdeepak99/following{/other_user}",
            "gists_url": "https://api.github.com/users/svdeepak99/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svdeepak99/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svdeepak99/subscriptions",
            "organizations_url": "https://api.github.com/users/svdeepak99/orgs",
            "repos_url": "https://api.github.com/users/svdeepak99/repos",
            "events_url": "https://api.github.com/users/svdeepak99/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svdeepak99/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-27T08:53:29Z",
        "updated_at": "2023-05-29T13:45:45Z",
        "closed_at": "2023-05-29T13:45:45Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5333",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5333",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5333.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5333.patch",
            "merged_at": null
        },
        "body": "@vowelparrot  Added regex expressions (superset to the previously present non regex expressions) to also solve the case where unnecessary characters are present after the triple backticks but before the {, and after the } but before the closing triple backticks.\r\n\r\nBefore fix (additional \"AI: \" is present after Thought:):\r\n```\r\nObservation: There are 38175 accounts available in the dataframe.\r\nThought:AI: {\r\n    \"action\": \"Final Answer\",\r\n    \"action_input\": \"There are 38175 accounts available in the dataframe.\"\r\n}\r\nObservation: Invalid or incomplete response\r\n```\r\n\r\nAfter fix:\r\n```\r\nObservation: There are 38175 accounts available in the dataframe.\r\nThought:AI: {\r\n    \"action\": \"Final Answer\",\r\n    \"action_input\": \"There are 38175 accounts available in the dataframe.\"\r\n}\r\n\r\n> Finished chain.\r\n[AI Message]: There are 38175 accounts available in the dataframe.\r\n```\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5333/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5333/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5332",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5332/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5332/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5332/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5332",
        "id": 1728523406,
        "node_id": "PR_kwDOIPDwls5RfOgS",
        "number": 5332,
        "title": "refactor: BaseStringMessagePromptTemplate from_template method ",
        "user": {
            "login": "Sukitly",
            "id": 54905519,
            "node_id": "MDQ6VXNlcjU0OTA1NTE5",
            "avatar_url": "https://avatars.githubusercontent.com/u/54905519?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sukitly",
            "html_url": "https://github.com/Sukitly",
            "followers_url": "https://api.github.com/users/Sukitly/followers",
            "following_url": "https://api.github.com/users/Sukitly/following{/other_user}",
            "gists_url": "https://api.github.com/users/Sukitly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Sukitly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Sukitly/subscriptions",
            "organizations_url": "https://api.github.com/users/Sukitly/orgs",
            "repos_url": "https://api.github.com/users/Sukitly/repos",
            "events_url": "https://api.github.com/users/Sukitly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Sukitly/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2023-05-27T07:48:30Z",
        "updated_at": "2023-06-03T23:55:59Z",
        "closed_at": "2023-06-03T23:55:58Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5332",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5332",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5332.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5332.patch",
            "merged_at": "2023-06-03T23:55:58Z"
        },
        "body": "\r\n# refactor BaseStringMessagePromptTemplate from_template method \r\n\r\nRefactor the `from_template` method of the `BaseStringMessagePromptTemplate` class to allow passing keyword arguments to the `from_template` method of `PromptTemplate`.\r\nEnable the usage of arguments like `template_format`.\r\nIn my scenario, I intend to utilize Jinja2 for formatting the human message prompt in the chat template.\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n  - @jonasalexander \r\n\r\n -->\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5332/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5332/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5331",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5331/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5331/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5331/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5331",
        "id": 1728469328,
        "node_id": "PR_kwDOIPDwls5RfDPR",
        "number": 5331,
        "title": "Fixing blank thoughts in verbose for \"_Exception\" Action",
        "user": {
            "login": "svdeepak99",
            "id": 42609308,
            "node_id": "MDQ6VXNlcjQyNjA5MzA4",
            "avatar_url": "https://avatars.githubusercontent.com/u/42609308?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svdeepak99",
            "html_url": "https://github.com/svdeepak99",
            "followers_url": "https://api.github.com/users/svdeepak99/followers",
            "following_url": "https://api.github.com/users/svdeepak99/following{/other_user}",
            "gists_url": "https://api.github.com/users/svdeepak99/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svdeepak99/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svdeepak99/subscriptions",
            "organizations_url": "https://api.github.com/users/svdeepak99/orgs",
            "repos_url": "https://api.github.com/users/svdeepak99/repos",
            "events_url": "https://api.github.com/users/svdeepak99/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svdeepak99/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T05:28:30Z",
        "updated_at": "2023-05-28T04:14:17Z",
        "closed_at": "2023-05-28T04:14:16Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5331",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5331",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5331.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5331.patch",
            "merged_at": "2023-05-28T04:14:16Z"
        },
        "body": "Fixed the issue of blank Thoughts being printed in verbose when `handle_parsing_errors=True`, as below:\r\n\r\nBefore Fix:\r\n```\r\nObservation: There are 38175 accounts available in the dataframe.\r\nThought:\r\nObservation: Invalid or incomplete response\r\nThought:\r\nObservation: Invalid or incomplete response\r\nThought:\r\n```\r\n\r\nAfter Fix:\r\n```\r\nObservation: There are 38175 accounts available in the dataframe.\r\nThought:AI: {\r\n    \"action\": \"Final Answer\",\r\n    \"action_input\": \"There are 38175 accounts available in the dataframe.\"\r\n}\r\nObservation: Invalid Action or Action Input format\r\nThought:AI: {\r\n    \"action\": \"Final Answer\",\r\n    \"action_input\": \"The number of available accounts is 38175.\"\r\n}\r\nObservation: Invalid Action or Action Input format\r\n```\r\n\r\n@vowelparrot currently I have set the colour of thought to green (same as the colour when `handle_parsing_errors=False`). If you want to change the colour of this \"_Exception\" case to red or something else (when `handle_parsing_errors=True`), feel free to change it in line 789.\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5331/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5331/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5330",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5330/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5330/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5330/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5330",
        "id": 1728464301,
        "node_id": "PR_kwDOIPDwls5RfCMW",
        "number": 5330,
        "title": "Reformat openai proxy setting as code",
        "user": {
            "login": "sevendark",
            "id": 13547104,
            "node_id": "MDQ6VXNlcjEzNTQ3MTA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/13547104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sevendark",
            "html_url": "https://github.com/sevendark",
            "followers_url": "https://api.github.com/users/sevendark/followers",
            "following_url": "https://api.github.com/users/sevendark/following{/other_user}",
            "gists_url": "https://api.github.com/users/sevendark/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sevendark/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sevendark/subscriptions",
            "organizations_url": "https://api.github.com/users/sevendark/orgs",
            "repos_url": "https://api.github.com/users/sevendark/repos",
            "events_url": "https://api.github.com/users/sevendark/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sevendark/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T05:12:55Z",
        "updated_at": "2023-05-29T14:02:47Z",
        "closed_at": "2023-05-29T14:02:47Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5330",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5330",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5330.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5330.patch",
            "merged_at": "2023-05-29T14:02:47Z"
        },
        "body": "# Reformat the openai proxy setting as code\r\n\r\n\r\n  Only affect the doc for openai Model\r\n  - @hwchase17\r\n  - @agola11\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5330/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5330/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5329",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5329/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5329/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5329/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5329",
        "id": 1728448457,
        "node_id": "I_kwDOIPDwls5nBgfJ",
        "number": 5329,
        "title": "Serp APi and google search API won't work with LLama models like vicuna",
        "user": {
            "login": "mikeyang01",
            "id": 2081093,
            "node_id": "MDQ6VXNlcjIwODEwOTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2081093?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mikeyang01",
            "html_url": "https://github.com/mikeyang01",
            "followers_url": "https://api.github.com/users/mikeyang01/followers",
            "following_url": "https://api.github.com/users/mikeyang01/following{/other_user}",
            "gists_url": "https://api.github.com/users/mikeyang01/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mikeyang01/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mikeyang01/subscriptions",
            "organizations_url": "https://api.github.com/users/mikeyang01/orgs",
            "repos_url": "https://api.github.com/users/mikeyang01/repos",
            "events_url": "https://api.github.com/users/mikeyang01/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mikeyang01/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-27T04:23:16Z",
        "updated_at": "2023-06-30T07:51:03Z",
        "closed_at": "2023-06-06T13:11:32Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nLangchain Version: 0.0.176\r\nUbuntu x86 23.04\r\nMemory 24gb\r\nAMD EPYC\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n```\r\n# Callbacks support token-wise streaming\r\ncallback_manager = CallbackManager([StreamingStdOutCallbackHandler()])\r\n# Verbose is required to pass to the callback manager\r\n\r\n# Make sure the model path is correct for your system!\r\nllm_cpp = LlamaCpp(model_path=\"/vicuna/ggml-vic7b-q4_0.bin\", callback_manager=callback_manager)\r\nllm = llm_cpp\r\ntools = load_tools([\"serpapi\"], llm=llm_cpp)\r\nagent = initialize_agent(tools, llm, agent=\"zero-shot-react-description\", verbose=True)\r\nagent.run(\"What is football?\")\r\n```\r\nResult\r\n```\r\nAction Input: \"what is football?\" I should probably start by defining what football actually is.\r\nAction: Let's [Search] \"what is football?\"\r\nAction Input: \"what is football?\"\r\nObservation: Let's [Search] \"what is football?\" is not a valid tool, try another one.\r\nThought:\r\n```\n\n### Expected behavior\n\nExpected behavior:\r\nsearch google and return correct results\r\n\r\nIf i change model from vicuna to openAI api, works fine\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5329/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5329/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5328",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5328/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5328/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5328/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5328",
        "id": 1728430768,
        "node_id": "I_kwDOIPDwls5nBcKw",
        "number": 5328,
        "title": "Difference among various ways to query database and return source information? (Question Answering with Sources, Retrieval Question Answering with Sources, index.query_with_sources, etc.)",
        "user": {
            "login": "cyberjj999",
            "id": 51283594,
            "node_id": "MDQ6VXNlcjUxMjgzNTk0",
            "avatar_url": "https://avatars.githubusercontent.com/u/51283594?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cyberjj999",
            "html_url": "https://github.com/cyberjj999",
            "followers_url": "https://api.github.com/users/cyberjj999/followers",
            "following_url": "https://api.github.com/users/cyberjj999/following{/other_user}",
            "gists_url": "https://api.github.com/users/cyberjj999/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cyberjj999/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cyberjj999/subscriptions",
            "organizations_url": "https://api.github.com/users/cyberjj999/orgs",
            "repos_url": "https://api.github.com/users/cyberjj999/repos",
            "events_url": "https://api.github.com/users/cyberjj999/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cyberjj999/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-27T03:28:23Z",
        "updated_at": "2023-09-18T16:10:35Z",
        "closed_at": "2023-09-18T16:10:34Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\r\n\r\nWhat are the key differences between these methods of trying to query/ask a database, then return the answer along with its relevant sources?\r\n\r\nMy main objective is to have a Chatbot that has knowledge from a knowledge base, and can still maintain conversation history. Their answer must return me the source document as well. Which option is the best among so many choices?\r\n\r\nThere are\r\n\r\n1. [Question Answering with Sources](https://python.langchain.com/en/latest/modules/chains/index_examples/qa_with_sources.html), \r\n```\r\nchain = load_qa_with_sources_chain(OpenAI(temperature=0), chain_type=\"stuff\")\r\nquery = \"What did the president say about Justice Breyer\"\r\nchain({\"input_documents\": docs, \"question\": query}, return_only_outputs=True)\r\n```\r\n\r\n2. [Retrieval Question Answering with Sources](https://python.langchain.com/en/latest/modules/chains/index_examples/vector_db_qa_with_sources.html)\r\n```\r\nfrom langchain import OpenAI\r\n\r\nchain = RetrievalQAWithSourcesChain.from_chain_type(OpenAI(temperature=0), chain_type=\"stuff\", retriever=docsearch.as_retriever())\r\n\r\nchain({\"question\": \"What did the president say about Justice Breyer\"}, return_only_outputs=True)\r\n```\r\n\r\n3. [Question Answering over Docs](https://python.langchain.com/en/latest/use_cases/question_answering.html)\r\n```\r\nfrom langchain.indexes import VectorstoreIndexCreator\r\nindex = VectorstoreIndexCreator().from_loaders([loader])\r\n\r\nquery = \"What did the president say about Ketanji Brown Jackson\"\r\nindex.query_with_sources(query)\r\n```\r\n\r\n++ probably quite a few more examples I could find if I dig through the documentation.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5328/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5328/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5327",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5327/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5327/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5327/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5327",
        "id": 1728415189,
        "node_id": "PR_kwDOIPDwls5Re4Fe",
        "number": 5327,
        "title": "Add path validation to DirectoryLoader",
        "user": {
            "login": "os1ma",
            "id": 39944763,
            "node_id": "MDQ6VXNlcjM5OTQ0NzYz",
            "avatar_url": "https://avatars.githubusercontent.com/u/39944763?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/os1ma",
            "html_url": "https://github.com/os1ma",
            "followers_url": "https://api.github.com/users/os1ma/followers",
            "following_url": "https://api.github.com/users/os1ma/following{/other_user}",
            "gists_url": "https://api.github.com/users/os1ma/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/os1ma/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/os1ma/subscriptions",
            "organizations_url": "https://api.github.com/users/os1ma/orgs",
            "repos_url": "https://api.github.com/users/os1ma/repos",
            "events_url": "https://api.github.com/users/os1ma/events{/privacy}",
            "received_events_url": "https://api.github.com/users/os1ma/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T02:38:00Z",
        "updated_at": "2023-05-28T19:31:23Z",
        "closed_at": "2023-05-28T19:31:23Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5327",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5327",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5327.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5327.patch",
            "merged_at": "2023-05-28T19:31:23Z"
        },
        "body": "# Add path validation to DirectoryLoader\r\n\r\nThis PR introduces a minor adjustment to the DirectoryLoader by adding validation for the path argument. Previously, if the provided path didn't exist or wasn't a directory, DirectoryLoader would return an empty document list due to the behavior of the `glob` method. This could potentially cause confusion for users, as they might expect a file-loading error instead.\r\n\r\nSo, I've added two validations to the load method of the DirectoryLoader:\r\n\r\n- Raise a FileNotFoundError if the provided path does not exist\r\n- Raise a ValueError if the provided path is not a directory\r\n\r\nDue to the relatively small scope of these changes, a new issue was not created.\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@eyurtsev\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5327/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5327/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5326",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5326/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5326/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5326/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5326",
        "id": 1728409984,
        "node_id": "PR_kwDOIPDwls5Re3C1",
        "number": 5326,
        "title": "Tracing Group",
        "user": {
            "login": "agola11",
            "id": 9536492,
            "node_id": "MDQ6VXNlcjk1MzY0OTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9536492?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agola11",
            "html_url": "https://github.com/agola11",
            "followers_url": "https://api.github.com/users/agola11/followers",
            "following_url": "https://api.github.com/users/agola11/following{/other_user}",
            "gists_url": "https://api.github.com/users/agola11/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agola11/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agola11/subscriptions",
            "organizations_url": "https://api.github.com/users/agola11/orgs",
            "repos_url": "https://api.github.com/users/agola11/repos",
            "events_url": "https://api.github.com/users/agola11/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agola11/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-27T02:18:53Z",
        "updated_at": "2023-06-06T02:18:44Z",
        "closed_at": "2023-06-06T02:18:43Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5326",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5326",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5326.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5326.patch",
            "merged_at": "2023-06-06T02:18:43Z"
        },
        "body": "Add context manager to group all runs under a virtual parent",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5326/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5326/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5325",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5325/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5325/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5325/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5325",
        "id": 1728399484,
        "node_id": "PR_kwDOIPDwls5Re0zl",
        "number": 5325,
        "title": "Add pagination for Vertex AI embeddings",
        "user": {
            "login": "Jflick58",
            "id": 22459070,
            "node_id": "MDQ6VXNlcjIyNDU5MDcw",
            "avatar_url": "https://avatars.githubusercontent.com/u/22459070?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Jflick58",
            "html_url": "https://github.com/Jflick58",
            "followers_url": "https://api.github.com/users/Jflick58/followers",
            "following_url": "https://api.github.com/users/Jflick58/following{/other_user}",
            "gists_url": "https://api.github.com/users/Jflick58/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Jflick58/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Jflick58/subscriptions",
            "organizations_url": "https://api.github.com/users/Jflick58/orgs",
            "repos_url": "https://api.github.com/users/Jflick58/repos",
            "events_url": "https://api.github.com/users/Jflick58/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Jflick58/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-27T01:49:22Z",
        "updated_at": "2023-05-29T13:57:41Z",
        "closed_at": "2023-05-29T13:57:41Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5325",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5325",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5325.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5325.patch",
            "merged_at": "2023-05-29T13:57:41Z"
        },
        "body": "Fixes #5316\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5325/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5325/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5324",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5324/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5324/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5324/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5324",
        "id": 1728392677,
        "node_id": "I_kwDOIPDwls5nBS3l",
        "number": 5324,
        "title": "Issue: Fix or automate sync of releases to Discord Announcements channel, Twitter, etc.",
        "user": {
            "login": "uogbuji",
            "id": 279982,
            "node_id": "MDQ6VXNlcjI3OTk4Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/279982?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/uogbuji",
            "html_url": "https://github.com/uogbuji",
            "followers_url": "https://api.github.com/users/uogbuji/followers",
            "following_url": "https://api.github.com/users/uogbuji/following{/other_user}",
            "gists_url": "https://api.github.com/users/uogbuji/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/uogbuji/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/uogbuji/subscriptions",
            "organizations_url": "https://api.github.com/users/uogbuji/orgs",
            "repos_url": "https://api.github.com/users/uogbuji/repos",
            "events_url": "https://api.github.com/users/uogbuji/events{/privacy}",
            "received_events_url": "https://api.github.com/users/uogbuji/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-27T01:24:20Z",
        "updated_at": "2023-09-10T16:11:21Z",
        "closed_at": "2023-09-10T16:11:21Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Issue you'd like to raise.\n\nLC Release announcements seem to be missing from Discord's Announcements channel since 0.0.166. Looking more closely, these seem to be manual, added by hwchase17.\r\n\r\nOn Twitter, the most recent release announcement from the LangChainAI account is 0.0.170, viz:\r\n\r\nhttps://twitter.com/search?q=(from%3ALangChainAI)%20release&src=typed_query&f=live\r\n\n\n### Suggestion:\n\nI couldn't tell from this project's various actions whether such postings are meant to be automated upon release (Github search on actions isn't great), and just need to be fixed. If not, I think it would be would be very useful for the community to add such release notification actions, so that the various places people keep up to date are all, well, up to date.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5324/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5324/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5323",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5323/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5323/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5323/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5323",
        "id": 1728371158,
        "node_id": "PR_kwDOIPDwls5Reu4d",
        "number": 5323,
        "title": "Fix typos",
        "user": {
            "login": "russellpwirtz",
            "id": 987237,
            "node_id": "MDQ6VXNlcjk4NzIzNw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/987237?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/russellpwirtz",
            "html_url": "https://github.com/russellpwirtz",
            "followers_url": "https://api.github.com/users/russellpwirtz/followers",
            "following_url": "https://api.github.com/users/russellpwirtz/following{/other_user}",
            "gists_url": "https://api.github.com/users/russellpwirtz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/russellpwirtz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/russellpwirtz/subscriptions",
            "organizations_url": "https://api.github.com/users/russellpwirtz/orgs",
            "repos_url": "https://api.github.com/users/russellpwirtz/repos",
            "events_url": "https://api.github.com/users/russellpwirtz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/russellpwirtz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-27T00:32:25Z",
        "updated_at": "2023-05-28T03:57:49Z",
        "closed_at": "2023-05-27T01:55:22Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5323",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5323",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5323.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5323.patch",
            "merged_at": "2023-05-27T01:55:22Z"
        },
        "body": "# Documentation typo fixes\r\n\r\nFixes # (issue)\r\n\r\nSimple typos in the blockchain .ipynb documentation\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5323/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5323/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5322",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5322/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5322/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5322/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5322",
        "id": 1728349391,
        "node_id": "I_kwDOIPDwls5nBITP",
        "number": 5322,
        "title": "Issues with Azure OpenAI",
        "user": {
            "login": "ushakrishnan",
            "id": 18739265,
            "node_id": "MDQ6VXNlcjE4NzM5MjY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/18739265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ushakrishnan",
            "html_url": "https://github.com/ushakrishnan",
            "followers_url": "https://api.github.com/users/ushakrishnan/followers",
            "following_url": "https://api.github.com/users/ushakrishnan/following{/other_user}",
            "gists_url": "https://api.github.com/users/ushakrishnan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ushakrishnan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ushakrishnan/subscriptions",
            "organizations_url": "https://api.github.com/users/ushakrishnan/orgs",
            "repos_url": "https://api.github.com/users/ushakrishnan/repos",
            "events_url": "https://api.github.com/users/ushakrishnan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ushakrishnan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-26T23:47:15Z",
        "updated_at": "2023-05-31T23:40:55Z",
        "closed_at": "2023-05-31T23:40:55Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nOS = MACOS\r\nlangchain=0.0.179 (also tried 0.0.174 and 0.0.178)\n\n### Who can help?\n\n@hwchase17 @agola11 \r\n\r\nThe full code below is single file.  imports and other information not added to keep it crisp.\r\n\r\nThe following works with no issues:\r\n```\r\nllm = AzureOpenAI(openai_api_base=openai_api_base , model=\"text-davinci-003\",  engine=\"text-davinci-003\", temperature=0.1, verbose=True, deployment_name=\"text-davinci-003\", deployment_id=\"text-davinci-003\", openai_api_key=openai_api_key)\r\n\r\nresp = llm(\"Tell me pub joke\")\r\nprint(resp)\r\n```\r\n\r\nThe following does not work.  \r\n```\r\n#get document store\r\nstore = getfromstore(collection_name=\"sou_coll\")\r\n\r\n# Create vectorstore info object - metadata repo?\r\nvectorstore_info = VectorStoreInfo(\r\n    name=\"sou\",\r\n    description=\"sou folder\",\r\n    vectorstore=store\r\n)\r\n# Convert the document store into a langchain toolkit\r\ntoolkit = VectorStoreToolkit(vectorstore_info=vectorstore_info)\r\n\r\n# Add the toolkit to an end-to-end LC\r\nagent_executor = create_vectorstore_agent(\r\n    llm=llm,\r\n    toolkit=toolkit,\r\n    verbose=True\r\n)\r\nresponse = agent_executor.run(prompt)\r\nprint(response)\r\n```\r\n\r\nI can confirm the document store exists and the same code with appropriate OpenAI (not Azure OpenAI) works as expected with no issue.   Azure OpenAI gives the following error -  \r\n```\r\nFile \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/openai/api_resources/abstract/engine_api_resource.py\", line 83, in __prepare_create_request\r\n    raise error.InvalidRequestError(\r\nopenai.error.InvalidRequestError: Must provide an 'engine' or 'deployment_id' parameter to create a <class 'openai.api_resources.completion.Completion'>\r\n```\r\nObservation LLM is correct since the first part (write a joke) works.  The agent does not.  Please help!\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [X] Agents / Agent Executors\n- [X] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n#!/usr/bin/env python3\r\nimport sys\r\nfrom dotenv import load_dotenv\r\n\r\n# Load default environment variables (.env)\r\nload_dotenv()\r\n\r\n# Import os to set API key\r\nimport os\r\n# Import OpenAI as main LLM service\r\nfrom langchain.llms import AzureOpenAI\r\nfrom langchain.callbacks import get_openai_callback\r\n\r\n# Bring in streamlit for UI/app interface\r\nimport streamlit as st\r\n\r\n# Import PDF document loaders...there's other ones as well!\r\nfrom langchain.document_loaders import PyPDFLoader\r\n# Import chroma as the vector store \r\nfrom langchain.vectorstores import Chroma\r\n\r\nfrom common.funs import getfromstore\r\n\r\n# Import vector store stuff\r\nfrom langchain.agents.agent_toolkits import (\r\n    create_vectorstore_agent,\r\n    VectorStoreToolkit,\r\n    VectorStoreInfo\r\n)\r\n\r\n# Set this to `azure`\r\nopenai_api_type = os.environ[\"OPENAI_API_TYPE\"] =\"azure\"\r\nopenai_api_version = os.environ[\"OPENAI_API_VERSION\"] = os.environ[\"AOAI_OPENAI_API_VERSION\"]\r\nopenai_api_base = os.environ[\"OPENAI_API_BASE\"] = os.environ[\"AOAI_OPENAI_API_BASE\"]\r\nopenai_api_key = os.environ[\"OPENAI_API_KEY\"] = os.environ[\"AOAI_OPENAI_API_KEY\"]\r\n\r\n# Create instance of OpenAI LLM\r\n#llm = AzureOpenAI(openai_api_base=openai_api_base , model=\"text-davinci-003\", temperature=0.1, verbose=True, deployment_name=\"text-davinci-003\", openai_api_key=openai_api_key)\r\nllm = AzureOpenAI(openai_api_base=openai_api_base , model=\"text-davinci-003\",  engine=\"text-davinci-003\", temperature=0.1, verbose=True, deployment_name=\"text-davinci-003\", deployment_id=\"text-davinci-003\", openai_api_key=openai_api_key)\r\n\r\nresp = llm(\"Tell me pub joke\")\r\nprint(resp)\r\nprint(\"------------\")\r\nst.write(resp)\r\nst.write(\"----------------------\")\r\n\r\n#get document store\r\nstore = getfromstore(collection_name=\"sou_coll\")\r\n#print(store1.get([\"metadatas\"]))\r\n\r\n# Create vectorstore info object - metadata repo?\r\nvectorstore_info = VectorStoreInfo(\r\n    name=\"sou\",\r\n    description=\"sou folder\",\r\n    vectorstore=store\r\n)\r\n# Convert the document store into a langchain toolkit\r\ntoolkit = VectorStoreToolkit(vectorstore_info=vectorstore_info)\r\n\r\n# Add the toolkit to an end-to-end LC\r\nagent_executor = create_vectorstore_agent(\r\n    llm=llm,\r\n    toolkit=toolkit,\r\n    verbose=True\r\n)\r\n\r\nst.title(\"\ud83e\udd9c\ud83d\udd17\ud83e\udd17 What would you like to know?\")\r\nst.write(\"This sample uses Azure OpenAI\")\r\n# Create a text input box for the user\r\nprompt = st.text_input('Input your prompt here:')\r\n\r\n# If the user hits enter\r\nif prompt:\r\n    with get_openai_callback() as cb:\r\n        #try:\r\n            # Then pass the prompt to the LLM\r\n            response = agent_executor.run(prompt)\r\n            # ...and write it out to the screen\r\n            st.write(response)\r\n            st.write(cb)\r\n        #except Exception as e:\r\n        #    st.warning\r\n        #    st.write(\"That was a difficult question!  I choked on it!!  Can you please try again with rephrasing it a bit?\")\r\n        #    st.write(cb)\r\n        #    print(e)\r\n    \r\n    # Find the relevant pages\r\n    search = store.similarity_search_with_score(prompt)\r\n    # Write out the first \r\n    try:\r\n        st.write(\"This information was found in:\")\r\n        for doc in search:\r\n            score = doc[1]\r\n            try:\r\n                page_num = doc[0].metadata['page']\r\n            except:\r\n                page_num = \"txt snippets\"\r\n            source = doc[0].metadata['source']\r\n            # With a streamlit expander  \r\n            with st.expander(\"Source: \" + str(source) + \" - Page: \" + str(page_num) + \"; Similarity Score: \" + str(score) ):\r\n                st.write(doc[0].page_content)\r\n    except:\r\n        print(\"unable to get source document detail\")\r\n\n\n### Expected behavior\n\nThe video shows the expected output - https://www.youtube.com/watch?v=q27RbxcfGvE\r\n\r\nThe OpenAI code in this sample is exact except for changes to LLM and env variables - file https://github.com/ushakrishnan/SearchWithOpenAI/blob/main/pages/6_Q%26A_with_Open_AI.py.  \r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5322/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5322/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5321",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5321/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5321/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5321/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5321",
        "id": 1728341437,
        "node_id": "PR_kwDOIPDwls5Reo1o",
        "number": 5321,
        "title": "Allow ElasticsearchEmbeddings to create a connection with ES Client object",
        "user": {
            "login": "jeffvestal",
            "id": 53237856,
            "node_id": "MDQ6VXNlcjUzMjM3ODU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/53237856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jeffvestal",
            "html_url": "https://github.com/jeffvestal",
            "followers_url": "https://api.github.com/users/jeffvestal/followers",
            "following_url": "https://api.github.com/users/jeffvestal/following{/other_user}",
            "gists_url": "https://api.github.com/users/jeffvestal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jeffvestal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jeffvestal/subscriptions",
            "organizations_url": "https://api.github.com/users/jeffvestal/orgs",
            "repos_url": "https://api.github.com/users/jeffvestal/repos",
            "events_url": "https://api.github.com/users/jeffvestal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jeffvestal/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T23:28:51Z",
        "updated_at": "2023-05-31T01:05:47Z",
        "closed_at": "2023-05-31T00:26:31Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5321",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5321",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5321.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5321.patch",
            "merged_at": "2023-05-31T00:26:31Z"
        },
        "body": "This PR adds a new method `from_es_connection` to the `ElasticsearchEmbeddings` class allowing users to use Elasticsearch clusters outside of Elastic Cloud. \r\n\r\nUsers can create an Elasticsearch Client object and pass that to the new function. \r\nThe returned object is identical to the one returned by calling `from_credentials`\r\n\r\n```\r\n# Create Elasticsearch connection\r\nes_connection = Elasticsearch(\r\n    hosts=['https://es_cluster_url:port'], \r\n    basic_auth=('user', 'password')\r\n)\r\n\r\n# Instantiate ElasticsearchEmbeddings using es_connection\r\nembeddings = ElasticsearchEmbeddings.from_es_connection(\r\n  model_id,\r\n  es_connection,\r\n)\r\n```\r\n\r\nI also added examples to the elasticsearch jupyter notebook\r\n\r\nFixes # https://github.com/hwchase17/langchain/issues/5239\r\n\r\n\r\ncc: @hwchase17\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5321/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5321/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5320",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5320/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5320/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5320/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5320",
        "id": 1728321483,
        "node_id": "PR_kwDOIPDwls5Rekkd",
        "number": 5320,
        "title": "fix: remove empty lines that cause InvalidRequestError",
        "user": {
            "login": "mbchang",
            "id": 6439365,
            "node_id": "MDQ6VXNlcjY0MzkzNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6439365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mbchang",
            "html_url": "https://github.com/mbchang",
            "followers_url": "https://api.github.com/users/mbchang/followers",
            "following_url": "https://api.github.com/users/mbchang/following{/other_user}",
            "gists_url": "https://api.github.com/users/mbchang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mbchang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mbchang/subscriptions",
            "organizations_url": "https://api.github.com/users/mbchang/orgs",
            "repos_url": "https://api.github.com/users/mbchang/repos",
            "events_url": "https://api.github.com/users/mbchang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mbchang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T22:54:23Z",
        "updated_at": "2023-05-28T04:15:04Z",
        "closed_at": "2023-05-28T04:15:04Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5320",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5320",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5320.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5320.patch",
            "merged_at": "2023-05-28T04:15:04Z"
        },
        "body": "\r\n# remove empty lines in GenerativeAgentMemory that cause InvalidRequestError in OpenAIEmbeddings\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nLet's say the text given to `GenerativeAgent._parse_list` is\r\n```\r\ntext = \"\"\"\r\nInsight 1: <insight 1>\r\n\r\nInsight 2: <insight 2>\r\n\"\"\"\r\n```\r\nThis creates an `openai.error.InvalidRequestError: [''] is not valid under any of the given schemas - 'input'` because `GenerativeAgent.add_memory()` tries to add an empty string to the vectorstore.\r\n\r\nThis PR fixes the issue by removing the empty line between `Insight 1` and `Insight 2`\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n        \r\n -->\r\n@hwchase17\r\n@vowelparrot\r\n@dev2049\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5320/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5320/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5319",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5319/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5319/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5319/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5319",
        "id": 1728316763,
        "node_id": "PR_kwDOIPDwls5Rejjw",
        "number": 5319,
        "title": "Fixes and doc updates for DeepInfra integration.",
        "user": {
            "login": "yessenzhar",
            "id": 8552242,
            "node_id": "MDQ6VXNlcjg1NTIyNDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8552242?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/yessenzhar",
            "html_url": "https://github.com/yessenzhar",
            "followers_url": "https://api.github.com/users/yessenzhar/followers",
            "following_url": "https://api.github.com/users/yessenzhar/following{/other_user}",
            "gists_url": "https://api.github.com/users/yessenzhar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/yessenzhar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/yessenzhar/subscriptions",
            "organizations_url": "https://api.github.com/users/yessenzhar/orgs",
            "repos_url": "https://api.github.com/users/yessenzhar/repos",
            "events_url": "https://api.github.com/users/yessenzhar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/yessenzhar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5454193895,
                "node_id": "LA_kwDOIPDwls8AAAABRRhk5w",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/lgtm",
                "name": "lgtm",
                "color": "0E8A16",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T22:45:19Z",
        "updated_at": "2023-05-29T13:56:33Z",
        "closed_at": "2023-05-29T13:56:33Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5319",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5319",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5319.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5319.patch",
            "merged_at": "2023-05-29T13:56:33Z"
        },
        "body": "# Your PR Title (What it does)\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\nFixes # (issue)\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n  - @hwchase17\r\n  - @agola11\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5319/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5319/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5318",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5318/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5318/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5318/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5318",
        "id": 1728309373,
        "node_id": "I_kwDOIPDwls5nA-h9",
        "number": 5318,
        "title": "MultiRetrievalQAChain",
        "user": {
            "login": "SardarArslan",
            "id": 82857336,
            "node_id": "MDQ6VXNlcjgyODU3MzM2",
            "avatar_url": "https://avatars.githubusercontent.com/u/82857336?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SardarArslan",
            "html_url": "https://github.com/SardarArslan",
            "followers_url": "https://api.github.com/users/SardarArslan/followers",
            "following_url": "https://api.github.com/users/SardarArslan/following{/other_user}",
            "gists_url": "https://api.github.com/users/SardarArslan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SardarArslan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SardarArslan/subscriptions",
            "organizations_url": "https://api.github.com/users/SardarArslan/orgs",
            "repos_url": "https://api.github.com/users/SardarArslan/repos",
            "events_url": "https://api.github.com/users/SardarArslan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SardarArslan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T22:32:19Z",
        "updated_at": "2023-09-10T16:11:27Z",
        "closed_at": "2023-09-10T16:11:26Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nlangchain='0.0.161'\r\npython='3.9.13'\r\nIPython= '7.31.1'\r\nipykernel='6.15.2'\n\n### Who can help?\n\n@agola11\r\n\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [X] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n```\r\nretriever1 = Pinecone.from_documents(texts, embeddings,index_name='taxation').as_retriever()\r\nretriever2 = Pinecone.from_documents(texts, embeddings,index_name='taxation').as_retriever()\r\nretriever_infos = [\r\n    {\r\n        \"name\": \"sindh\", \r\n        \"description\": \"Good for answering questions about Sindh\", \r\n        \"retriever\": retriever1\r\n    },\r\n    {\r\n        \"name\": \"punjab\", \r\n        \"description\": \"Good for answering questions about Punjab\", \r\n        \"retriever\": retriever2\r\n    }]\r\nchain = MultiRetrievalQAChain.from_retrievers(ChatOpenAI(model_name='gpt-3.5-turbo',temperature=0), retriever_infos,verbose=True)\r\nchain.save('chain.json')\r\n```\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n~\\AppData\\Local\\Temp\\ipykernel_20160\\230129054.py in <module>\r\n----> 1 chain.save('chain.json')\r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\chains\\base.py in save(self, file_path)\r\n    294 \r\n    295         # Fetch dictionary to save\r\n--> 296         chain_dict = self.dict()\r\n    297 \r\n    298         if save_path.suffix == \".json\":\r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\chains\\base.py in dict(self, **kwargs)\r\n    269         if self.memory is not None:\r\n    270             raise ValueError(\"Saving of memory is not yet supported.\")\r\n--> 271         _dict = super().dict()\r\n    272         _dict[\"_type\"] = self._chain_type\r\n    273         return _dict\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel.dict()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in _iter()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel._get_value()\r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\chains\\base.py in dict(self, **kwargs)\r\n    269         if self.memory is not None:\r\n    270             raise ValueError(\"Saving of memory is not yet supported.\")\r\n--> 271         _dict = super().dict()\r\n    272         _dict[\"_type\"] = self._chain_type\r\n    273         return _dict\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel.dict()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in _iter()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel._get_value()\r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\chains\\base.py in dict(self, **kwargs)\r\n    269         if self.memory is not None:\r\n    270             raise ValueError(\"Saving of memory is not yet supported.\")\r\n--> 271         _dict = super().dict()\r\n    272         _dict[\"_type\"] = self._chain_type\r\n    273         return _dict\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel.dict()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in _iter()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel._get_value()\r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\prompts\\base.py in dict(self, **kwargs)\r\n    186     def dict(self, **kwargs: Any) -> Dict:\r\n    187         \"\"\"Return dictionary representation of prompt.\"\"\"\r\n--> 188         prompt_dict = super().dict(**kwargs)\r\n    189         prompt_dict[\"_type\"] = self._prompt_type\r\n    190         return prompt_dict\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel.dict()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in _iter()\r\n\r\n~\\anaconda3\\lib\\site-packages\\pydantic\\main.cp39-win_amd64.pyd in pydantic.main.BaseModel._get_value()\r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\schema.py in dict(self, **kwargs)\r\n    354         \"\"\"Return dictionary representation of output parser.\"\"\"\r\n    355         output_parser_dict = super().dict()\r\n--> 356         output_parser_dict[\"_type\"] = self._type\r\n    357         return output_parser_dict\r\n    358 \r\n\r\n~\\anaconda3\\lib\\site-packages\\langchain\\schema.py in _type(self)\r\n    349     def _type(self) -> str:\r\n    350         \"\"\"Return the type key.\"\"\"\r\n--> 351         raise NotImplementedError\r\n    352 \r\n    353     def dict(self, **kwargs: Any) -> Dict:\r\n\r\nNotImplementedError: \n\n### Expected behavior\n\nI expected to save the chain on disk for future use.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5318/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5318/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5317",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5317/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5317/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5317/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5317",
        "id": 1728248298,
        "node_id": "I_kwDOIPDwls5nAvnq",
        "number": 5317,
        "title": "TypeError: a coroutine was expected, got {'question': query, 'chat_history': {...}}",
        "user": {
            "login": "talhaanwarch",
            "id": 37379131,
            "node_id": "MDQ6VXNlcjM3Mzc5MTMx",
            "avatar_url": "https://avatars.githubusercontent.com/u/37379131?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/talhaanwarch",
            "html_url": "https://github.com/talhaanwarch",
            "followers_url": "https://api.github.com/users/talhaanwarch/followers",
            "following_url": "https://api.github.com/users/talhaanwarch/following{/other_user}",
            "gists_url": "https://api.github.com/users/talhaanwarch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/talhaanwarch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/talhaanwarch/subscriptions",
            "organizations_url": "https://api.github.com/users/talhaanwarch/orgs",
            "repos_url": "https://api.github.com/users/talhaanwarch/repos",
            "events_url": "https://api.github.com/users/talhaanwarch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/talhaanwarch/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-26T21:09:00Z",
        "updated_at": "2023-09-25T10:16:10Z",
        "closed_at": "2023-09-25T10:16:10Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\n langchain 0.0.181 \r\nPython 3.10\r\nOS: Ubuntu\n\n### Who can help?\n\n@agola11 \n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [X] Chains\n- [X] Callbacks/Tracing\n- [X] Async\n\n### Reproduction\n\n\r\n```\r\nimport asyncio\r\nfrom functools import lru_cache\r\nfrom typing import AsyncGenerator\r\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\r\nfrom fastapi import FastAPI\r\nfrom fastapi.responses import StreamingResponse\r\nfrom langchain.callbacks import AsyncIteratorCallbackHandler\r\nfrom langchain.chains import  ConversationalRetrievalChain\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.memory import ConversationBufferMemory\r\nfrom pydantic import BaseModel\r\nfrom langchain.vectorstores import Chroma\r\nfrom langchain.embeddings.openai import OpenAIEmbeddings\r\n```\r\n\r\n```\r\napi_key = \"sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n\r\napp = FastAPI()\r\n```\r\n\r\n\r\n```\r\n\r\nwith open('state_of_the_union.txt') as f:\r\n    state_of_the_union = f.read()\r\n\r\ntext_splitter = RecursiveCharacterTextSplitter(\r\n    # Set a really small chunk size, just to show.\r\n    chunk_size = 100,\r\n    chunk_overlap  = 20,\r\n    length_function = len,\r\n)\r\n\r\ndoc_text = text_splitter.create_documents([state_of_the_union])\r\n```\r\n\r\n\r\n```\r\nembeddings = OpenAIEmbeddings(openai_api_key=api_key)\r\nvector_db = Chroma.from_documents(doc_text, embeddings,persist_directory='db')\r\n\r\nretriever = vector_db.as_retriever()\r\n```\r\n\r\n```\r\nclass ChatRequest(BaseModel):\r\n    \"\"\"Request model for chat requests.\r\n    Includes the conversation ID and the message from the user.\r\n    \"\"\"\r\n\r\n    conversation_id: str\r\n    message: str\r\n```\r\n```\r\nclass StreamingConversationChain:\r\n    \"\"\"\r\n    Class for handling streaming conversation chains.\r\n    It creates and stores memory for each conversation,\r\n    and generates responses using the ChatOpenAI model from LangChain.\r\n    \"\"\"\r\n\r\n    def __init__(self, openai_api_key: str, temperature: float = 0.0):\r\n        self.memories = {}\r\n        self.openai_api_key = openai_api_key\r\n        self.temperature = temperature\r\n\r\n    async def generate_response(\r\n        self, conversation_id: str, message: str\r\n    ) -> AsyncGenerator[str, None]:\r\n        \"\"\"\r\n        Asynchronous function to generate a response for a conversation.\r\n        It creates a new conversation chain for each message and uses a\r\n        callback handler to stream responses as they're generated.\r\n        :param conversation_id: The ID of the conversation.\r\n        :param message: The message from the user.\r\n        \"\"\"\r\n        callback_handler = AsyncIteratorCallbackHandler()\r\n        llm = ChatOpenAI(\r\n            callbacks=[callback_handler],\r\n            streaming=True,\r\n            temperature=self.temperature,\r\n            openai_api_key=self.openai_api_key,\r\n        )\r\n\r\n        memory = self.memories.get(conversation_id)\r\n        if memory is None:\r\n            memory = ConversationBufferMemory(memory_key=\"chat_history\",output_key='answer',\r\n                                               return_messages=True)\r\n            self.memories[conversation_id] = memory\r\n\r\n    \r\n        chain = ConversationalRetrievalChain.from_llm(llm,\r\n                                                retriever=retriever, memory=memory,\r\n                                                chain_type=\"stuff\",\r\n                                                # return_source_documents=True\r\n                                                )\r\n\r\n        run = asyncio.create_task(chain(({\"question\": message})))\r\n        async for token in callback_handler.aiter():\r\n            yield token\r\n\r\n        await run()\r\n```\r\n\r\n\r\n\r\n```\r\nstreaming_conversation_chain = StreamingConversationChain(\r\n    openai_api_key=api_key\r\n)\r\n```\r\n```\r\n@app.post(\"/chat\", response_class=StreamingResponse)\r\nasync def generate_response(data: ChatRequest) -> StreamingResponse:\r\n    \"\"\"Endpoint for chat requests.\r\n    It uses the StreamingConversationChain instance to generate responses,\r\n    and then sends these responses as a streaming response.\r\n    :param data: The request data.\r\n    \"\"\"\r\n    return StreamingResponse(\r\n        streaming_conversation_chain.generate_response(\r\n            data.conversation_id, data.message\r\n        ),\r\n        media_type=\"text/event-stream\",\r\n    )\r\n```\r\n```\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n\r\n    uvicorn.run(app)\r\n```\r\n\r\n\r\nHere is error traceback\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 435, in run_asgi\r\n    result = await app(  # type: ignore[func-returns-value]\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/uvicorn/middleware/proxy_headers.py\", line 78, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/fastapi/applications.py\", line 276, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/applications.py\", line 122, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/middleware/errors.py\", line 184, in __call__\r\n    raise exc\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/middleware/errors.py\", line 162, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\r\n    raise exc\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/fastapi/middleware/asyncexitstack.py\", line 21, in __call__\r\n    raise e\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/fastapi/middleware/asyncexitstack.py\", line 18, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/routing.py\", line 718, in __call__\r\n    await route.handle(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/routing.py\", line 276, in handle\r\n    await self.app(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/routing.py\", line 69, in app\r\n    await response(scope, receive, send)\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/responses.py\", line 270, in __call__\r\n    async with anyio.create_task_group() as task_group:\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/anyio/_backends/_asyncio.py\", line 662, in __aexit__\r\n    raise exceptions[0]\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/responses.py\", line 273, in wrap\r\n    await func()\r\n  File \"/home/talha/venv/lib/python3.10/site-packages/starlette/responses.py\", line 262, in stream_response\r\n    async for chunk in self.body_iterator:\r\n  File \"/media/talha/data/nlp/langchain/fastapi/error_rep.py\", line 93, in generate_response\r\n    run = asyncio.create_task(chain(({\"question\": message})))\r\n  File \"/usr/lib/python3.10/asyncio/tasks.py\", line 337, in create_task\r\n    task = loop.create_task(coro)\r\n  File \"uvloop/loop.pyx\", line 1435, in uvloop.loop.Loop.create_task\r\nTypeError: a coroutine was expected, got {'question': 'what is cnn', 'chat_history': [HumanMessage(content='what is cnn', additional_kwargs={}, example=False), AIMessage(content='CNN (Cable News Network) is a news-based cable television channel and website that provides 24-hour news coverage, analysis, and commentary on current events happening around the world.', additional_kwargs={}, example=False)], 'answer': 'CNN (Cable News Network) is a news-based cable television channel and website that provides 24-hour news coverage, analysis, and commentary on current events happening around the world.'}\n\n### Expected behavior\n\nThis code worked with `ConversationChain` and produce streaming output\r\n```\r\nchain = ConversationChain(\r\n            memory=memory,\r\n            prompt=CHAT_PROMPT_TEMPLATE,\r\n            llm=llm,\r\n        )\r\n\r\n        run = asyncio.create_task(chain.arun(input=message))\r\n```\r\nBut i want to use ConversationalRetrievalChain",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5317/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5317/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5316",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5316/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5316/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5316/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5316",
        "id": 1728211849,
        "node_id": "I_kwDOIPDwls5nAmuJ",
        "number": 5316,
        "title": "VertexAIEmbeddings error when passing a list with of length greater than 5.",
        "user": {
            "login": "agvc",
            "id": 15971370,
            "node_id": "MDQ6VXNlcjE1OTcxMzcw",
            "avatar_url": "https://avatars.githubusercontent.com/u/15971370?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agvc",
            "html_url": "https://github.com/agvc",
            "followers_url": "https://api.github.com/users/agvc/followers",
            "following_url": "https://api.github.com/users/agvc/following{/other_user}",
            "gists_url": "https://api.github.com/users/agvc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agvc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agvc/subscriptions",
            "organizations_url": "https://api.github.com/users/agvc/orgs",
            "repos_url": "https://api.github.com/users/agvc/repos",
            "events_url": "https://api.github.com/users/agvc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agvc/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-26T20:31:56Z",
        "updated_at": "2023-05-29T13:57:42Z",
        "closed_at": "2023-05-29T13:57:42Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\ngoogle-cloud-aiplatform==1.25.0\r\nlangchain==0.0.181\r\npython 3.10\r\n\r\n### Who can help?\r\n\r\n_No response_\r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [X] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [ ] LLMs/Chat Models\r\n- [X] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [ ] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [ ] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\nAny list with len > 5 will cause an error.\r\n\r\n```python\r\nfrom langchain.vectorstores import FAISS\r\nfrom langchain.embeddings import VertexAIEmbeddings\r\n\r\ntext = ['text_1', 'text_2', 'text_3', 'text_4', 'text_5', 'text_6']\r\nembeddings = VertexAIEmbeddings()\r\nvectorstore = FAISS.from_texts(text, embeddings)\r\n```\r\n```python\r\n\r\nInvalidArgument                           Traceback (most recent call last)\r\n[/usr/local/lib/python3.10/dist-packages/google/api_core/grpc_helpers.py](https://localhost:8080/#) in error_remapped_callable(*args, **kwargs)\r\n     72             return callable_(*args, **kwargs)\r\n     73         except grpc.RpcError as exc:\r\n---> 74             raise exceptions.from_grpc_error(exc) from exc\r\n     75 \r\n     76     return error_remapped_callable\r\n\r\nInvalidArgument: 400 5 instance(s) is allowed per prediction. Actual: 6\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nExcepted to successfully be able to vectorize a larger list of items. Maybe implement a step to ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5316/reactions",
            "total_count": 1,
            "+1": 1,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5316/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5315",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5315/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5315/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5315/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5315",
        "id": 1728163644,
        "node_id": "PR_kwDOIPDwls5ReCpi",
        "number": 5315,
        "title": "minor refactor GenerativeAgentMemory",
        "user": {
            "login": "mbchang",
            "id": 6439365,
            "node_id": "MDQ6VXNlcjY0MzkzNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6439365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mbchang",
            "html_url": "https://github.com/mbchang",
            "followers_url": "https://api.github.com/users/mbchang/followers",
            "following_url": "https://api.github.com/users/mbchang/following{/other_user}",
            "gists_url": "https://api.github.com/users/mbchang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mbchang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mbchang/subscriptions",
            "organizations_url": "https://api.github.com/users/mbchang/orgs",
            "repos_url": "https://api.github.com/users/mbchang/repos",
            "events_url": "https://api.github.com/users/mbchang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mbchang/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": {
            "login": "vowelparrot",
            "id": 130414180,
            "node_id": "U_kgDOB8X2ZA",
            "avatar_url": "https://avatars.githubusercontent.com/u/130414180?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vowelparrot",
            "html_url": "https://github.com/vowelparrot",
            "followers_url": "https://api.github.com/users/vowelparrot/followers",
            "following_url": "https://api.github.com/users/vowelparrot/following{/other_user}",
            "gists_url": "https://api.github.com/users/vowelparrot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vowelparrot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vowelparrot/subscriptions",
            "organizations_url": "https://api.github.com/users/vowelparrot/orgs",
            "repos_url": "https://api.github.com/users/vowelparrot/repos",
            "events_url": "https://api.github.com/users/vowelparrot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vowelparrot/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "vowelparrot",
                "id": 130414180,
                "node_id": "U_kgDOB8X2ZA",
                "avatar_url": "https://avatars.githubusercontent.com/u/130414180?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/vowelparrot",
                "html_url": "https://github.com/vowelparrot",
                "followers_url": "https://api.github.com/users/vowelparrot/followers",
                "following_url": "https://api.github.com/users/vowelparrot/following{/other_user}",
                "gists_url": "https://api.github.com/users/vowelparrot/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/vowelparrot/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/vowelparrot/subscriptions",
                "organizations_url": "https://api.github.com/users/vowelparrot/orgs",
                "repos_url": "https://api.github.com/users/vowelparrot/repos",
                "events_url": "https://api.github.com/users/vowelparrot/events{/privacy}",
                "received_events_url": "https://api.github.com/users/vowelparrot/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T19:57:58Z",
        "updated_at": "2023-06-03T21:53:14Z",
        "closed_at": "2023-06-03T21:53:14Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5315",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5315",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5315.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5315.patch",
            "merged_at": "2023-06-03T21:53:14Z"
        },
        "body": "# minor refactor of GenerativeAgentMemory\r\n\r\n<!--\r\nThank you for contributing to LangChain! Your PR will appear in our release under the title you set. Please make sure it highlights your valuable contribution.\r\n\r\nReplace this with a description of the change, the issue it fixes (if applicable), and relevant context. List any dependencies required for this change.\r\n\r\nAfter you're done, someone will review your PR. They may suggest improvements. If no one reviews your PR within a few days, feel free to @-mention the same people again, as notifications can get lost.\r\n-->\r\n\r\n<!-- Remove if not applicable -->\r\n\r\n- refactor `format_memories_detail` to be more reusable\r\n- modified prompts for getting topics for reflection and for generating insights\r\n- update `characters.ipynb` to reflect changes\r\n\r\n## Before submitting\r\n\r\n<!-- If you're adding a new integration, please include:\r\n\r\n1. a test for the integration - favor unit tests that does not rely on network access.\r\n2. an example notebook showing its use\r\n\r\n\r\nSee contribution guidelines for more information on how to write tests, lint\r\netc:\r\n\r\nhttps://github.com/hwchase17/langchain/blob/master/.github/CONTRIBUTING.md\r\n-->\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n<!-- For a quicker response, figure out the right person to tag with @\r\n\r\n  @hwchase17 - project lead\r\n\r\n  Tracing / Callbacks\r\n  - @agola11\r\n\r\n  Async\r\n  - @agola11\r\n\r\n  DataLoaders\r\n  - @eyurtsev\r\n\r\n  Models\r\n  - @hwchase17\r\n  - @agola11\r\n\r\n  Agents / Tools / Toolkits\r\n  - @vowelparrot\r\n\r\n  VectorStores / Retrievers / Memory\r\n  - @dev2049\r\n        \r\n -->\r\n@vowelparrot\r\n@hwchase17\r\n@dev2049\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5315/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5315/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5314",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5314/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5314/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5314/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5314",
        "id": 1728147636,
        "node_id": "PR_kwDOIPDwls5Rd_Lb",
        "number": 5314,
        "title": "Add Chainlit to deployment options",
        "user": {
            "login": "constantinidan",
            "id": 16107237,
            "node_id": "MDQ6VXNlcjE2MTA3MjM3",
            "avatar_url": "https://avatars.githubusercontent.com/u/16107237?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/constantinidan",
            "html_url": "https://github.com/constantinidan",
            "followers_url": "https://api.github.com/users/constantinidan/followers",
            "following_url": "https://api.github.com/users/constantinidan/following{/other_user}",
            "gists_url": "https://api.github.com/users/constantinidan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/constantinidan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/constantinidan/subscriptions",
            "organizations_url": "https://api.github.com/users/constantinidan/orgs",
            "repos_url": "https://api.github.com/users/constantinidan/repos",
            "events_url": "https://api.github.com/users/constantinidan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/constantinidan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T19:44:07Z",
        "updated_at": "2023-05-28T04:12:54Z",
        "closed_at": "2023-05-28T04:12:53Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5314",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5314",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5314.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5314.patch",
            "merged_at": "2023-05-28T04:12:53Z"
        },
        "body": "# Add Chainlit to deployment options\r\n\r\nAdd [Chainlit](https://github.com/Chainlit/chainlit) as deployment options\r\nUsed links to Github examples and Chainlit doc on the LangChain integration",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5314/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5314/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5313",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5313/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5313/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5313/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5313",
        "id": 1728123134,
        "node_id": "I_kwDOIPDwls5nARD-",
        "number": 5313,
        "title": "Converting ChatOpenAI model to ONNX format",
        "user": {
            "login": "naila03",
            "id": 104375200,
            "node_id": "U_kgDOBjijoA",
            "avatar_url": "https://avatars.githubusercontent.com/u/104375200?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/naila03",
            "html_url": "https://github.com/naila03",
            "followers_url": "https://api.github.com/users/naila03/followers",
            "following_url": "https://api.github.com/users/naila03/following{/other_user}",
            "gists_url": "https://api.github.com/users/naila03/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/naila03/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/naila03/subscriptions",
            "organizations_url": "https://api.github.com/users/naila03/orgs",
            "repos_url": "https://api.github.com/users/naila03/repos",
            "events_url": "https://api.github.com/users/naila03/events{/privacy}",
            "received_events_url": "https://api.github.com/users/naila03/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-26T19:19:53Z",
        "updated_at": "2023-09-27T16:06:50Z",
        "closed_at": "2023-09-27T16:06:49Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nIs there any way to convert ChatOpenAI models to ONNX format? I've noticed that other models can be converted to ONNX (example: https://github.com/openai/whisper/discussions/134) and I was wondering if similar logic could be applied in this case as well.\n\n### Motivation\n\nI want to save these models in the ONNX format (a single file) so I can easily retrieve them and use them for question-answering. I want to be able to save the model as a single file in this case.\n\n### Your contribution\n\nNot sure. I could create a PR if I'm able to succeed in this.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5313/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5313/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5312",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5312/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5312/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5312/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5312",
        "id": 1728082343,
        "node_id": "PR_kwDOIPDwls5RdxAr",
        "number": 5312,
        "title": "Update Prediction Guard LLM wrapper",
        "user": {
            "login": "dwhitena",
            "id": 4524535,
            "node_id": "MDQ6VXNlcjQ1MjQ1MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4524535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dwhitena",
            "html_url": "https://github.com/dwhitena",
            "followers_url": "https://api.github.com/users/dwhitena/followers",
            "following_url": "https://api.github.com/users/dwhitena/following{/other_user}",
            "gists_url": "https://api.github.com/users/dwhitena/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dwhitena/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dwhitena/subscriptions",
            "organizations_url": "https://api.github.com/users/dwhitena/orgs",
            "repos_url": "https://api.github.com/users/dwhitena/repos",
            "events_url": "https://api.github.com/users/dwhitena/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dwhitena/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T18:44:05Z",
        "updated_at": "2023-05-29T14:03:38Z",
        "closed_at": "2023-05-29T14:03:38Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5312",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5312",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5312.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5312.patch",
            "merged_at": "2023-05-29T14:03:38Z"
        },
        "body": "# Update Prediction Guard LLM wrapper to the latest version/ functionality\r\n\r\nNo dependencies updates here, but updating the LLM wrapper for [Prediction Guard](https://www.predictionguard.com/) to the latest version of the Python client, which includes additional functionality. Specifically the new version includes functionality to:\r\n\r\n- control/ structure the output of LLMs\r\n- access the latest open access LLMs (e.g., MPT 7B Instruct) with an OpenAI like API\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested: @hwchase17 or @vowelparrot (as they reviewed the original integration PR for Prediction Guard).\r\n\r\nThanks in advance!\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5312/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5312/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5311",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5311/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5311/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5311/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5311",
        "id": 1728004073,
        "node_id": "PR_kwDOIPDwls5Rdf1Q",
        "number": 5311,
        "title": "docs: added link to LangChain Handbook",
        "user": {
            "login": "leo-gan",
            "id": 2256422,
            "node_id": "MDQ6VXNlcjIyNTY0MjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2256422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leo-gan",
            "html_url": "https://github.com/leo-gan",
            "followers_url": "https://api.github.com/users/leo-gan/followers",
            "following_url": "https://api.github.com/users/leo-gan/following{/other_user}",
            "gists_url": "https://api.github.com/users/leo-gan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leo-gan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leo-gan/subscriptions",
            "organizations_url": "https://api.github.com/users/leo-gan/orgs",
            "repos_url": "https://api.github.com/users/leo-gan/repos",
            "events_url": "https://api.github.com/users/leo-gan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leo-gan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T17:40:12Z",
        "updated_at": "2023-05-28T18:28:09Z",
        "closed_at": "2023-05-28T03:57:41Z",
        "author_association": "COLLABORATOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5311",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5311",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5311.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5311.patch",
            "merged_at": "2023-05-28T03:57:40Z"
        },
        "body": "# added a link to LangChain Handbook\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass.\r\n\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5311/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5311/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5310",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5310/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5310/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5310/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5310",
        "id": 1727986842,
        "node_id": "PR_kwDOIPDwls5RdcHt",
        "number": 5310,
        "title": "Add Spark DataFrame as a Document Loader",
        "user": {
            "login": "rithwik-db",
            "id": 81988348,
            "node_id": "MDQ6VXNlcjgxOTg4MzQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/81988348?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rithwik-db",
            "html_url": "https://github.com/rithwik-db",
            "followers_url": "https://api.github.com/users/rithwik-db/followers",
            "following_url": "https://api.github.com/users/rithwik-db/following{/other_user}",
            "gists_url": "https://api.github.com/users/rithwik-db/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rithwik-db/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rithwik-db/subscriptions",
            "organizations_url": "https://api.github.com/users/rithwik-db/orgs",
            "repos_url": "https://api.github.com/users/rithwik-db/repos",
            "events_url": "https://api.github.com/users/rithwik-db/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rithwik-db/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T17:23:37Z",
        "updated_at": "2023-05-29T14:10:27Z",
        "closed_at": "2023-05-29T14:10:26Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5310",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5310",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5310.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5310.patch",
            "merged_at": "2023-05-29T14:10:26Z"
        },
        "body": "# Add Spark DataFrame as a Document Loader\r\n\r\nThis is currently a work in progress PR on adding Spark DataFrames as a Document Loader **(tests haven't been added yet**). Langchain already has a Pandas DF loader and so extended support for Spark seemed to be the next step. The core issue is that Spark DataFrames are usually not just stored on one worker, so instead of doing a major code change to allow for `yield` functionality with Document Loaders, I simply just checked how much memory is available and set the max size for this DocumentLoader list as a certain fraction of it. It is currently set to 1/2 but it should be set to something like 1/10 or 1/20 for regular usage.",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5310/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5310/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5309",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5309/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5309/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5309/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5309",
        "id": 1727972765,
        "node_id": "PR_kwDOIPDwls5RdZEy",
        "number": 5309,
        "title": "docs: improve flow of llm caching notebook",
        "user": {
            "login": "malandis",
            "id": 3690240,
            "node_id": "MDQ6VXNlcjM2OTAyNDA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3690240?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malandis",
            "html_url": "https://github.com/malandis",
            "followers_url": "https://api.github.com/users/malandis/followers",
            "following_url": "https://api.github.com/users/malandis/following{/other_user}",
            "gists_url": "https://api.github.com/users/malandis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malandis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malandis/subscriptions",
            "organizations_url": "https://api.github.com/users/malandis/orgs",
            "repos_url": "https://api.github.com/users/malandis/repos",
            "events_url": "https://api.github.com/users/malandis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malandis/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T17:11:33Z",
        "updated_at": "2023-05-26T17:34:12Z",
        "closed_at": "2023-05-26T17:34:12Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5309",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5309",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5309.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5309.patch",
            "merged_at": "2023-05-26T17:34:12Z"
        },
        "body": "# docs: improve flow of llm caching notebook\r\n\r\nThe notebook `llm_caching` demos various caching providers. In the previous version, there was setup common to all examples but under the `In Memory Caching` heading.\r\n\r\nIf a user comes and only wants to try a particular example, they will run the common setup, then the cells for the specific provider they are interested in. Then they will get import and variable reference errors. This commit moves the common setup to the top to avoid this.\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@dev2049 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5309/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5309/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5308",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5308/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5308/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5308/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5308",
        "id": 1727924219,
        "node_id": "I_kwDOIPDwls5m_gf7",
        "number": 5308,
        "title": "Issue: All types of langchain memories don't work in a proper way.",
        "user": {
            "login": "Eng-ZeyadTarek",
            "id": 61242145,
            "node_id": "MDQ6VXNlcjYxMjQyMTQ1",
            "avatar_url": "https://avatars.githubusercontent.com/u/61242145?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Eng-ZeyadTarek",
            "html_url": "https://github.com/Eng-ZeyadTarek",
            "followers_url": "https://api.github.com/users/Eng-ZeyadTarek/followers",
            "following_url": "https://api.github.com/users/Eng-ZeyadTarek/following{/other_user}",
            "gists_url": "https://api.github.com/users/Eng-ZeyadTarek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Eng-ZeyadTarek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Eng-ZeyadTarek/subscriptions",
            "organizations_url": "https://api.github.com/users/Eng-ZeyadTarek/orgs",
            "repos_url": "https://api.github.com/users/Eng-ZeyadTarek/repos",
            "events_url": "https://api.github.com/users/Eng-ZeyadTarek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Eng-ZeyadTarek/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-26T16:33:34Z",
        "updated_at": "2023-09-18T16:10:41Z",
        "closed_at": "2023-09-18T16:10:40Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I've built many langchain agents with many types of memory to remember the context of the context in a correct way.\r\n\r\nThe problem is if I send the same message again, he will generate the same thought and answer again, which I don't refer to.\r\n\r\nExample of the incorrect conversation that would happen between me and the agent when using **GPTIndexChatMemory**\r\n\r\n**User**:- Hi\r\n\r\n**AI**:- Hi, how can I help you today?\r\n\r\n**User**: What's machine learning?\r\n\r\n**AI**:- Machine learning is a field of artificial intelligence (AI) that focuses on developing algorithms and models that enable computers to learn from data and make predictions or decisions without being explicitly programmed. The primary goal of machine learning is to enable computers to automatically learn and improve from experience or examples. **(good answer referring to my previous question)**\r\n\r\n**User**:- I didn't get it.\r\n\r\n**AI**:- I apologize if my previous response was not clear. Let me provide a simpler explanation: Machine learning is a branch of artificial intelligence (AI) that focuses on teaching computers to learn and make decisions or predictions without being explicitly programmed for each specific task. **(good answer referring to my previous message and he knew that I didn't the definition of ML)**\r\n\r\n**User**:- what's the physics?\r\n\r\n**AI**:- Physics is a natural science that studies the fundamental principles and laws governing the physical world. It seeks to understand the behavior of matter, energy, and the interactions between them. **(good answer referring to my previous message)**\r\n\r\n**User**:- I didn't get it. **(same message again which saved in the previous chat history)**\r\n\r\n**AI**:- I apologize if my previous response was not clear. Let me provide a simpler explanation: Machine learning is a branch of artificial intelligence (AI) that focuses on teaching computers to learn and make decisions or predictions without being explicitly programmed for each specific task. **(not the correct answer, I'm referring to the definition of physics not the definition of ML)**\r\n\r\n**User**: What's machine learning?\r\n\r\n** AI **:- Machine learning is a field of artificial intelligence (AI) that focuses on developing algorithms and models that enable computers to learn from data and make predictions or decisions without being explicitly programmed. The primary goal of machine learning is to enable computers to automatically learn and improve from experience or examples. **(He generated the same answer from the previous chat history while I need him to give more information to the user not just the same previous answer)**\r\n\r\nExample of the correct conversation I want to accomplish when using **GPTIndexChatMemory**\r\n\r\n\r\n**User**:- Hi\r\n\r\n**AI**:- Hi, how can I help you today?\r\n\r\n**User**: What's machine learning?\r\n\r\n**AI**:- Machine learning is a field of artificial intelligence (AI) that focuses on developing algorithms and models that enable computers to learn from data and make predictions or decisions without being explicitly programmed. The primary goal of machine learning is to enable computers to automatically learn and improve from experience or examples. **(good answer referring to my previous question)**\r\n\r\n**User**:- I didn't get it.\r\n\r\n**AI**:- I apologize if my previous response was not clear. Let me provide a simpler explanation: Machine learning is a branch of artificial intelligence (AI) that focuses on teaching computers to learn and make decisions or predictions without being explicitly programmed for each specific task. **(good answer referring to my previous message and he knew that I didn't the definition of ML)**\r\n\r\n\r\n**User**:- what's the physics?\r\n\r\n**AI**:- Physics is a natural science that studies the fundamental principles and laws governing the physical world. It seeks to understand the behavior of matter, energy, and the interactions between them. **(good answer referring to my previous message)**\r\n\r\n**User**:- I didn't get it.\r\n\r\n**AI**:- I apologize for any confusion caused. Let me provide a more simplified explanation of physics: Physics is the branch of science that deals with understanding and explaining how the world around us works. It is concerned with studying matter (everything that makes up the physical world) and energy (the ability to do work). **(now it's good because he knows that I'm referring to the definition of physics not the definition of ML, although the \"I didn't get it.\" message was saved in the previous chat history.**\r\n\r\n**User**: What's machine learning?\r\n\r\n**AI**:- Machine learning is a field of artificial intelligence that focuses on developing algorithms and models capable of learning from data and making predictions or decisions. The primary idea behind machine learning is to enable computers to learn and improve automatically without explicit programming. **(better answer although I repeated the same question, but he didn't get the same answer from the previous chat history)**\r\n\r\n\r\nI know that the problem with the memory because if I build my agent with **ConversationBufferWindowMemory** with k = he 1 will perform this type of conversation, but since I'm using **GPTIndexChatMemory** he saved all the messages and the questions and the answers of the full conversation in this memory and bring the same answer from the previous chat history if the **message/question** repeated, which is totally wrong.\r\n\r\nThis is my prompt to instruct my agent and its **CONVERSATIONAL_REACT_DESCRIPTION**\r\n\r\n\"\"\"\r\n\r\nSMSM bot, your main objective is to provide the most helpful and accurate responses to the user Zeyad. To do this, you have a powerful toolset and the ability to learn and adapt to the conversation's context\r\n    \r\nGOAL:  The priority is to keep the conversation flowing smoothly. Offer new insights, avoid repetitive responses, and refrain from chat history without considering the most recent context. Always place emphasis on the most recent question or topic raised by the user, and tailor your responses to match his inquiries.\r\n\r\nConsider the following scenarios:\r\n\r\n**Scenario 1**: Whenever the user introduces a new topic, all his subsequent messages are assumed to refer to this latest topic, even if this message/question already exists in the previous chat history as it is in previous conversations under different topics. This context remains until the user changes the topic explicitly. Do not seek clarification on the topic unless the user's message is ambiguous within the context of the latest topic, For example, if the user asked about Machine Learning and then about Physics, and subsequently said, \"I didn't get it,\" your responsibility is to provide further explanation about Physics (the latest topic), and not Machine Learning (the previous topic) or ask which topic he's referring to. The phrase \"I didn't get it\" must be associated with the most recent topic discussed.\r\n\r\n**Scenario 2:** If the user asks the same question or a general knowledge question that has been asked before and you answered it, don't just repeat the previous answer verbatim or without relying on the previous chat history answer. Instead, try to add more value, provide a different perspective, or delve deeper into the topic and aim to generate a better and different answer that provides additional value.\r\n\r\n\r\nYou MUST use the following format to provide the answer to the user:\r\n\r\n**Thought**: I have to see what the current topic we are currently discussing with the user based on the current topic, deeply analyze the user's message, find out his intention, and see if the user refers to the current topic or not regardless of previous chat history and with regarding (Scenario 1, GOAL) \r\n**AI**: [your response here]\r\n\r\nBegin!\r\n\r\nPrvious chat history:\r\n{chat_history}\r\n\r\nNew input: {input}\r\n\"\"\"\r\n\r\nThat's the way I define the agent and my memory.\r\n\r\n`embed_model = LangchainEmbedding(HuggingFaceEmbeddings())\r\nservice_context = ServiceContext.from_defaults(embed_model=embed_model)\r\n\r\nindex = GPTListIndex([],service_context=service_context)\r\nfrom llama_index.query_engine import RetrieverQueryEngine\r\n#retriever = index.as_retriever(retriever_mode='embedding')\r\n#query_engine = RetrieverQueryEngine(retriever)\r\nmemory = GPTIndexChatMemory(\r\n    index=index, \r\n    memory_key=\"chat_history\", \r\n    query_kwargs={\"response_mode\": \"compact\"},\r\n    input_key=\"input\",\r\n)\r\n\r\nagent_chain = initialize_agent(\r\n    tools, \r\n    ChatOpenAI(temperature=0), \r\n    agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION  , \r\n    verbose=True,\r\n    handle_parsing_errors=True,\r\n    memory = memory\r\n)`",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5308/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5308/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5307",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5307/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5307/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5307/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5307",
        "id": 1727914846,
        "node_id": "I_kwDOIPDwls5m_eNe",
        "number": 5307,
        "title": "Add a langchain.embeddings.AnthropicEmbeddings class",
        "user": {
            "login": "mirodrr",
            "id": 113373534,
            "node_id": "U_kgDOBsHxXg",
            "avatar_url": "https://avatars.githubusercontent.com/u/113373534?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mirodrr",
            "html_url": "https://github.com/mirodrr",
            "followers_url": "https://api.github.com/users/mirodrr/followers",
            "following_url": "https://api.github.com/users/mirodrr/following{/other_user}",
            "gists_url": "https://api.github.com/users/mirodrr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mirodrr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mirodrr/subscriptions",
            "organizations_url": "https://api.github.com/users/mirodrr/orgs",
            "repos_url": "https://api.github.com/users/mirodrr/repos",
            "events_url": "https://api.github.com/users/mirodrr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mirodrr/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T16:25:57Z",
        "updated_at": "2023-05-26T17:02:37Z",
        "closed_at": "2023-05-26T17:02:37Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### Feature request\n\nAdd a langchain.embeddings.AnthropicEmbeddings class, similar to the langchain.embeddings.OpenAIEmbeddings class\r\n\r\n\n\n### Motivation\n\nI am trying to modify this notebook to use Claude by Anthropic instead of OpenAI: https://github.com/pinecone-io/examples/blob/master/generation/langchain/handbook/05-langchain-retrieval-augmentation.ipynb \r\n\r\nThis notebook uses Pinecone and an OpenAI LLM to do retrieval augmentation, but I would like to use Claude by Anthropic\r\n\r\nHowever, I am stuck because of the lack of a corresponding langchain.embeddings.AnthropicEmbeddings to replace the langchain.embeddings.OpenAIEmbeddings class that is used in this example\n\n### Your contribution\n\nI am willing to contribute, but would appreciate some guidance. I am very new to this project",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5307/reactions",
            "total_count": 5,
            "+1": 5,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5307/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5306",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5306/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5306/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5306/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5306",
        "id": 1727901493,
        "node_id": "PR_kwDOIPDwls5RdJkB",
        "number": 5306,
        "title": "Fix: Handle empty documents in ContextualCompressionRetriever (Issue #5304)",
        "user": {
            "login": "hanguofeng",
            "id": 18056,
            "node_id": "MDQ6VXNlcjE4MDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/18056?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hanguofeng",
            "html_url": "https://github.com/hanguofeng",
            "followers_url": "https://api.github.com/users/hanguofeng/followers",
            "following_url": "https://api.github.com/users/hanguofeng/following{/other_user}",
            "gists_url": "https://api.github.com/users/hanguofeng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hanguofeng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hanguofeng/subscriptions",
            "organizations_url": "https://api.github.com/users/hanguofeng/orgs",
            "repos_url": "https://api.github.com/users/hanguofeng/repos",
            "events_url": "https://api.github.com/users/hanguofeng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hanguofeng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T16:16:31Z",
        "updated_at": "2023-05-29T15:13:09Z",
        "closed_at": "2023-05-28T20:19:34Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5306",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5306",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5306.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5306.patch",
            "merged_at": "2023-05-28T20:19:34Z"
        },
        "body": "# Fix: Handle empty documents in ContextualCompressionRetriever (Issue #5304)\r\n\r\nFixes #5304 \r\n\r\nPrevent cohere.error.CohereAPIError caused by an empty list of documents by adding a condition to check if the input documents list is empty in the compress_documents method. If the list is empty, return an empty list immediately, avoiding the error and unnecessary processing.\r\n\r\n@dev2049 ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5306/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5306/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5305",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5305/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5305/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5305/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5305",
        "id": 1727894424,
        "node_id": "PR_kwDOIPDwls5RdIAR",
        "number": 5305,
        "title": "Add SKLearnVectorStore",
        "user": {
            "login": "mrtj",
            "id": 3469711,
            "node_id": "MDQ6VXNlcjM0Njk3MTE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3469711?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mrtj",
            "html_url": "https://github.com/mrtj",
            "followers_url": "https://api.github.com/users/mrtj/followers",
            "following_url": "https://api.github.com/users/mrtj/following{/other_user}",
            "gists_url": "https://api.github.com/users/mrtj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mrtj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mrtj/subscriptions",
            "organizations_url": "https://api.github.com/users/mrtj/orgs",
            "repos_url": "https://api.github.com/users/mrtj/repos",
            "events_url": "https://api.github.com/users/mrtj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mrtj/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528817,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvMQ",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 5541432778,
                "node_id": "LA_kwDOIPDwls8AAAABSkuNyg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/area:%20vector%20store",
                "name": "area: vector store",
                "color": "D4C5F9",
                "default": false,
                "description": "Related to vector store module"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T16:11:13Z",
        "updated_at": "2023-05-28T15:17:42Z",
        "closed_at": "2023-05-28T15:17:42Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5305",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5305",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5305.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5305.patch",
            "merged_at": "2023-05-28T15:17:42Z"
        },
        "body": "# Add SKLearnVectorStore\r\n\r\nThis PR adds SKLearnVectorStore, a simply vector store based on NearestNeighbors implementations in the scikit-learn package. This provides a simple drop-in vector store implementation with minimal dependencies (scikit-learn is typically installed in a data scientist / ml engineer environment). The vector store can be persisted and loaded from json, bson and parquet format. \r\n\r\nSKLearnVectorStore has soft (dynamic) dependency on the scikit-learn, numpy and pandas packages. Persisting to bson requires the bson package, persisting to parquet requires the pyarrow package.\r\n\r\n## Before submitting\r\n\r\nIntegration tests are provided under `tests/integration_tests/vectorstores/test_sklearn.py`\r\n\r\nSample usage notebook is provided under `docs/modules/indexes/vectorstores/examples/sklear.ipynb`\r\n\r\n## Who can review?\r\n\r\nCommunity members can review the PR once tests pass. Tag maintainers/contributors who might be interested:\r\n\r\n@hwchase17 - project lead\r\n        \r\nVectorStores / Retrievers / Memory\r\n @dev2049\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5305/reactions",
            "total_count": 2,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 2,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5305/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5304",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5304/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5304/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5304/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5304",
        "id": 1727893507,
        "node_id": "I_kwDOIPDwls5m_ZAD",
        "number": 5304,
        "title": "CohereAPIError thrown when base retriever returns empty documents in ContextualCompressionRetriever using Cohere Rank",
        "user": {
            "login": "hanguofeng",
            "id": 18056,
            "node_id": "MDQ6VXNlcjE4MDU2",
            "avatar_url": "https://avatars.githubusercontent.com/u/18056?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hanguofeng",
            "html_url": "https://github.com/hanguofeng",
            "followers_url": "https://api.github.com/users/hanguofeng/followers",
            "following_url": "https://api.github.com/users/hanguofeng/following{/other_user}",
            "gists_url": "https://api.github.com/users/hanguofeng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hanguofeng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hanguofeng/subscriptions",
            "organizations_url": "https://api.github.com/users/hanguofeng/orgs",
            "repos_url": "https://api.github.com/users/hanguofeng/repos",
            "events_url": "https://api.github.com/users/hanguofeng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hanguofeng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2023-05-26T16:10:47Z",
        "updated_at": "2023-05-28T20:19:35Z",
        "closed_at": "2023-05-28T20:19:35Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### System Info\n\n- 5.19.0-42-generic # 43~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Fri Apr 21 16:51:08 UTC 2 x86_64 x86_64 x86_64 GNU/Linux\r\n- langchain==0.0.180\r\n- Python 3.10.11\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [ ] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [X] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n1. Set up a retriever using any type of retriever (for example, I used Pinecone).\r\n2. Pass it into the ContextualCompressionRetriever.\r\n3. If the base retriever returns empty documents,\r\n4. It throws an error:  **cohere.error.CohereAPIError: invalid request: list of documents must not be empty**\r\n\r\n> File \"/workspaces/example/.venv/lib/python3.10/site-packages/langchain/retrievers/contextual_compression.py\", line 37, in get_relevant_documents\r\n>   compressed_docs = self.base_compressor.compress_documents(docs, query)\r\n> File \"/workspaces/example/.venv/lib/python3.10/site-packages/langchain/retrievers/document_compressors/cohere_rerank.py\", line 57, in compress_documents\r\n>   results = self.client.rerank(\r\n> File \"/workspaces/example/.venv/lib/python3.10/site-packages/cohere/client.py\", line 633, in rerank\r\n>   reranking = Reranking(self._request(cohere.RERANK_URL, json=json_body))\r\n> File \"/workspaces/example/.venv/lib/python3.10/site-packages/cohere/client.py\", line 692, in _request\r\n>   self._check_response(json_response, response.headers, response.status_code)\r\n> File \"/workspaces/example/.venv/lib/python3.10/site-packages/cohere/client.py\", line 642, in _check_response\r\n>   raise CohereAPIError(\r\n> **cohere.error.CohereAPIError: invalid request: list of documents must not be empty**\r\n\r\nCode is Like\r\n\r\n```python\r\n \r\nretriever = vectorstore.as_retriever()\r\ncompressor = CohereRerank()\r\ncompression_retriever = ContextualCompressionRetriever(\r\n    base_compressor=compressor, base_retriever=retriever\r\n)\r\nreturn compression_retriever\r\n```\n\n### Expected behavior\n\n**no error throws** and return empty list",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5304/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5304/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5303",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5303/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5303/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5303/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5303",
        "id": 1727839533,
        "node_id": "PR_kwDOIPDwls5Rc8Hs",
        "number": 5303,
        "title": "RFC: llm / chat model tabs",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 4678528810,
                "node_id": "LA_kwDOIPDwls8AAAABFtyvKg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/documentation",
                "name": "documentation",
                "color": "0075ca",
                "default": true,
                "description": "Improvements or additions to documentation"
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T15:31:41Z",
        "updated_at": "2023-06-22T08:20:00Z",
        "closed_at": "2023-06-22T08:20:00Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5303",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5303",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5303.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5303.patch",
            "merged_at": null
        },
        "body": "only in quickstart atm but could do in other places as well\r\n\r\nhttps://python.langchain.com/en/dev2049-combine_quickstart/getting_started/getting_started.html#prompt-templates\r\n<img width=\"927\" alt=\"Screenshot 2023-05-26 at 3 17 59 AM\" src=\"https://github.com/hwchase17/langchain/assets/130488702/a0daf86b-42aa-42f6-a491-0bae607fe85b\">\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5303/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 1,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5303/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5302",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5302/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5302/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5302/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5302",
        "id": 1727837946,
        "node_id": "PR_kwDOIPDwls5Rc7yR",
        "number": 5302,
        "title": "bump 181",
        "user": {
            "login": "dev2049",
            "id": 130488702,
            "node_id": "U_kgDOB8cZfg",
            "avatar_url": "https://avatars.githubusercontent.com/u/130488702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dev2049",
            "html_url": "https://github.com/dev2049",
            "followers_url": "https://api.github.com/users/dev2049/followers",
            "following_url": "https://api.github.com/users/dev2049/following{/other_user}",
            "gists_url": "https://api.github.com/users/dev2049/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dev2049/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dev2049/subscriptions",
            "organizations_url": "https://api.github.com/users/dev2049/orgs",
            "repos_url": "https://api.github.com/users/dev2049/repos",
            "events_url": "https://api.github.com/users/dev2049/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dev2049/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 5010622926,
                "node_id": "LA_kwDOIPDwls8AAAABKqgJzg",
                "url": "https://api.github.com/repos/langchain-ai/langchain/labels/release",
                "name": "release",
                "color": "07D4BE",
                "default": false,
                "description": ""
            }
        ],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2023-05-26T15:30:28Z",
        "updated_at": "2023-05-26T15:44:20Z",
        "closed_at": "2023-05-26T15:44:19Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5302",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5302",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5302.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5302.patch",
            "merged_at": "2023-05-26T15:44:19Z"
        },
        "body": null,
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5302/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5302/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5301",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5301/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5301/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5301/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5301",
        "id": 1727836402,
        "node_id": "I_kwDOIPDwls5m_LDy",
        "number": 5301,
        "title": "Vertex ChatVertexAI()  doesn't support initialize_agent() as OutputParserException error",
        "user": {
            "login": "axacheng",
            "id": 5593412,
            "node_id": "MDQ6VXNlcjU1OTM0MTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5593412?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/axacheng",
            "html_url": "https://github.com/axacheng",
            "followers_url": "https://api.github.com/users/axacheng/followers",
            "following_url": "https://api.github.com/users/axacheng/following{/other_user}",
            "gists_url": "https://api.github.com/users/axacheng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/axacheng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/axacheng/subscriptions",
            "organizations_url": "https://api.github.com/users/axacheng/orgs",
            "repos_url": "https://api.github.com/users/axacheng/repos",
            "events_url": "https://api.github.com/users/axacheng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/axacheng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T15:29:14Z",
        "updated_at": "2023-09-10T16:11:32Z",
        "closed_at": "2023-09-10T16:11:31Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\r\n\r\ngoogle-cloud-aiplatform==1.25.0\r\nlangchain==0.0.180\r\npython 3.11\r\n\r\n### Who can help?\r\n\r\n@dev2049\r\n@Jflick58\r\n@hwchase17 \r\n\r\n### Information\r\n\r\n- [ ] The official example notebooks/scripts\r\n- [ ] My own modified scripts\r\n\r\n### Related Components\r\n\r\n- [X] LLMs/Chat Models\r\n- [ ] Embedding Models\r\n- [ ] Prompts / Prompt Templates / Prompt Selectors\r\n- [X] Output Parsers\r\n- [ ] Document Loaders\r\n- [ ] Vector Stores / Retrievers\r\n- [X] Memory\r\n- [ ] Agents / Agent Executors\r\n- [ ] Tools / Toolkits\r\n- [ ] Chains\r\n- [ ] Callbacks/Tracing\r\n- [ ] Async\r\n\r\n### Reproduction\r\n\r\n  question1 = \"I am axa, I'm a 2 months old baby..\"\r\n  question2 = \"I like eating \ud83c\udf4c \ud83c\udf49 \ud83e\uded0 but dislike \ud83e\udd51\"\r\n  question3 = \"what is my name?\"\r\n  question4 = \"Do i disklike \ud83c\udf4c?\"\r\n\r\n  agent_chain = initialize_agent(\r\n    agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,\r\n    tools=[],\r\n    llm=llm,\r\n    verbose=True,\r\n    max_iterations=3,\r\n    memory=ConversationBufferMemory(\r\n      memory_key=\"chat_history\", return_messages=True),\r\n  )\r\n\r\n  agent_chain.run(input=question1)\r\n  agent_chain.run(input=question2)\r\n  agent_chain.run(input=question3)\r\n  agent_chain.run(input=question4)\r\n\r\n\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/api/app/routes/v1/quiz_chat.py\", line 271, in ask\r\n    agent_chain.run(input=question1)\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/chains/base.py\", line 239, in run\r\n    return self(kwargs, callbacks=callbacks)[self.output_keys[0]]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/chains/base.py\", line 140, in __call__\r\n    raise e\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/chains/base.py\", line 134, in __call__\r\n    self._call(inputs, run_manager=run_manager)\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/agents/agent.py\", line 951, in _call\r\n    next_step_output = self._take_next_step(\r\n                       ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/agents/agent.py\", line 773, in _take_next_step\r\n    raise e\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/agents/agent.py\", line 762, in _take_next_step\r\n    output = self.agent.plan(\r\n             ^^^^^^^^^^^^^^^^\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/agents/agent.py\", line 444, in plan\r\n    return self.output_parser.parse(full_output)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/axa/workspace/h/default/genai_learning/post/.venv/lib/python3.11/site-packages/langchain/agents/conversational/output_parser.py\", line 23, in parse\r\n    raise OutputParserException(f\"Could not parse LLM output: `{text}`\")\r\nlangchain.schema.OutputParserException: **Could not parse LLM output: `Hi Axa, it's nice to meet you! I'm Bard, a large language model, also known as a conversational AI or chatbot trained to be informative and comprehensive. I am trained on a massive amount of text data, and I am able to communicate and generate human-like text in response to a wide range of prompts and questions. For example, I can provide summaries of factual topics or create stories.**\r\n\r\n\r\n### Expected behavior\r\n\r\nWhen I used same code but ChatOpenAI() it worked perfectly.\r\n\r\n\r\n> Entering new AgentExecutor chain...\r\nThought: Do I need to use a tool? No\r\n\r\nAI: Hello Axa! As an AI language model, I'm not able to see or interact with you physically, but I'm here to assist you with any questions or topics you might have. How can I assist you today?\r\n\r\n> Finished chain.\r\n\r\n\r\n> Entering new AgentExecutor chain...\r\nThought: Do I need to use a tool? No\r\n\r\nAI: It's great to hear that you enjoy eating bananas, watermelons, and blueberries! However, it's understandable that you might not like avocados. Everyone has their own preferences when it comes to food. Is there anything else you would like to discuss or ask about?\r\n\r\n> Finished chain.\r\n\r\n\r\n> Entering new AgentExecutor chain...\r\nThought: Do I need to use a tool? No\r\nAI: Your name is Axa, as you mentioned earlier.\r\n\r\n> Finished chain.\r\n\r\n\r\n> Entering new AgentExecutor chain...\r\nThought: Do I need to use a tool? No\r\nAI: You did not mention that you dislike bananas, so I cannot say for sure. However, based on your previous message, it seems that you enjoy eating bananas.\r\n\r\n> Finished chain.\r\nINFO:     127.0.0.1:57044 - \"POST /api/v1/quiz/ask HTTP/1.1\" 200 OK",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5301/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5301/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5300",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5300/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5300/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5300/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5300",
        "id": 1727780002,
        "node_id": "I_kwDOIPDwls5m-9Si",
        "number": 5300,
        "title": "Weaviate: Add support for other vectorizers in hybrid search",
        "user": {
            "login": "hsm207",
            "id": 2398765,
            "node_id": "MDQ6VXNlcjIzOTg3NjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2398765?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hsm207",
            "html_url": "https://github.com/hsm207",
            "followers_url": "https://api.github.com/users/hsm207/followers",
            "following_url": "https://api.github.com/users/hsm207/following{/other_user}",
            "gists_url": "https://api.github.com/users/hsm207/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hsm207/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hsm207/subscriptions",
            "organizations_url": "https://api.github.com/users/hsm207/orgs",
            "repos_url": "https://api.github.com/users/hsm207/repos",
            "events_url": "https://api.github.com/users/hsm207/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hsm207/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2023-05-26T14:54:53Z",
        "updated_at": "2023-09-18T16:10:45Z",
        "closed_at": "2023-09-18T16:10:45Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "### Feature request\n\nWe should add support for the following vectorizers in the [weaviate hybrid search](https://python.langchain.com/en/latest/modules/indexes/retrievers/examples/weaviate-hybrid.html):\r\n\r\n1. [cohere](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere)\r\n2. [palm](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere)\r\n3. [huggingface](https://weaviate.io/developers/weaviate/modules/retriever-vectorizer-modules/text2vec-cohere)\n\n### Motivation\n\nmore flexibility to users\n\n### Your contribution\n\ncode review",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5300/reactions",
            "total_count": 2,
            "+1": 2,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5300/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5299",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5299/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5299/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5299/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5299",
        "id": 1727665260,
        "node_id": "I_kwDOIPDwls5m-hRs",
        "number": 5299,
        "title": "Failure to run docpage examples",
        "user": {
            "login": "juan-carvajal",
            "id": 39658930,
            "node_id": "MDQ6VXNlcjM5NjU4OTMw",
            "avatar_url": "https://avatars.githubusercontent.com/u/39658930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/juan-carvajal",
            "html_url": "https://github.com/juan-carvajal",
            "followers_url": "https://api.github.com/users/juan-carvajal/followers",
            "following_url": "https://api.github.com/users/juan-carvajal/following{/other_user}",
            "gists_url": "https://api.github.com/users/juan-carvajal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/juan-carvajal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/juan-carvajal/subscriptions",
            "organizations_url": "https://api.github.com/users/juan-carvajal/orgs",
            "repos_url": "https://api.github.com/users/juan-carvajal/repos",
            "events_url": "https://api.github.com/users/juan-carvajal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/juan-carvajal/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2023-05-26T13:48:05Z",
        "updated_at": "2023-06-05T08:51:01Z",
        "closed_at": "2023-05-29T13:46:33Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nVersion: 0.0.180\r\nPython: 3.10.11\r\nOS: MacOs Monterrey 12.5.1 (Apple Silicon)\r\n\r\nSteps to reproduce:\r\n```\r\nfrom langchain.agents import load_tools\r\nfrom langchain.agents import initialize_agent\r\nfrom langchain.agents import AgentType\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.llms import OpenAI\r\n\r\n# First, let's load the language model we're going to use to control the agent.\r\nchat = ChatOpenAI(temperature=0)\r\n\r\n# Next, let's load some tools to use. Note that the `llm-math` tool uses an LLM, so we need to pass that in.\r\nllm = OpenAI(temperature=0)\r\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\r\n\r\n\r\n# Finally, let's initialize an agent with the tools, the language model, and the type of agent we want to use.\r\nagent = initialize_agent(tools, chat, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\r\n\r\n# Now let's test it out!\r\nagent.run(\"What is EPAM price in NYSE? What is that number raised to the 0.23 power?\")\r\n```\r\nOutput:\r\n```\r\n{\r\n\t\"name\": \"OutputParserException\",\r\n\t\"message\": \"Could not parse LLM output: Thought: I need to use a search engine to find the current price of EPAM on NYSE and a calculator to raise it to the 0.23 power.\\n\\nAction:\\n```\\n{\\n  \\\"action\\\": \\\"Search\\\",\\n  \\\"action_input\\\": \\\"EPAM NYSE price\\\"\\n}\\n```\\n\\n\",\r\n\t\"stack\": \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\\n\\u001b[0;31mJSONDecodeError\\u001b[0m                           Traceback (most recent call last)\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/agents/chat/output_parser.py:21\\u001b[0m, in \\u001b[0;36mChatOutputParser.parse\\u001b[0;34m(self, text)\\u001b[0m\\n\\u001b[1;32m     20\\u001b[0m \\u001b[39mtry\\u001b[39;00m:\\n\\u001b[0;32m---> 21\\u001b[0m     response \\u001b[39m=\\u001b[39m parse_json_markdown(text)\\n\\u001b[1;32m     22\\u001b[0m     \\u001b[39mreturn\\u001b[39;00m AgentAction(response[\\u001b[39m\\\"\\u001b[39m\\u001b[39maction\\u001b[39m\\u001b[39m\\\"\\u001b[39m], response[\\u001b[39m\\\"\\u001b[39m\\u001b[39maction_input\\u001b[39m\\u001b[39m\\\"\\u001b[39m], text)\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/output_parsers/json.py:17\\u001b[0m, in \\u001b[0;36mparse_json_markdown\\u001b[0;34m(json_string)\\u001b[0m\\n\\u001b[1;32m     16\\u001b[0m \\u001b[39m# Parse the JSON string into a Python dictionary\\u001b[39;00m\\n\\u001b[0;32m---> 17\\u001b[0m parsed \\u001b[39m=\\u001b[39m json\\u001b[39m.\\u001b[39;49mloads(json_string)\\n\\u001b[1;32m     19\\u001b[0m \\u001b[39mreturn\\u001b[39;00m parsed\\n\\nFile \\u001b[0;32m/opt/homebrew/Cellar/python@3.10/3.10.11/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py:346\\u001b[0m, in \\u001b[0;36mloads\\u001b[0;34m(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\\u001b[0m\\n\\u001b[1;32m    343\\u001b[0m \\u001b[39mif\\u001b[39;00m (\\u001b[39mcls\\u001b[39m \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m \\u001b[39mand\\u001b[39;00m object_hook \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m \\u001b[39mand\\u001b[39;00m\\n\\u001b[1;32m    344\\u001b[0m         parse_int \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m \\u001b[39mand\\u001b[39;00m parse_float \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m \\u001b[39mand\\u001b[39;00m\\n\\u001b[1;32m    345\\u001b[0m         parse_constant \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m \\u001b[39mand\\u001b[39;00m object_pairs_hook \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m \\u001b[39mand\\u001b[39;00m \\u001b[39mnot\\u001b[39;00m kw):\\n\\u001b[0;32m--> 346\\u001b[0m     \\u001b[39mreturn\\u001b[39;00m _default_decoder\\u001b[39m.\\u001b[39;49mdecode(s)\\n\\u001b[1;32m    347\\u001b[0m \\u001b[39mif\\u001b[39;00m \\u001b[39mcls\\u001b[39m \\u001b[39mis\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m:\\n\\nFile \\u001b[0;32m/opt/homebrew/Cellar/python@3.10/3.10.11/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py:337\\u001b[0m, in \\u001b[0;36mJSONDecoder.decode\\u001b[0;34m(self, s, _w)\\u001b[0m\\n\\u001b[1;32m    333\\u001b[0m \\u001b[39m\\u001b[39m\\u001b[39m\\\"\\\"\\\"Return the Python representation of ``s`` (a ``str`` instance\\u001b[39;00m\\n\\u001b[1;32m    334\\u001b[0m \\u001b[39mcontaining a JSON document).\\u001b[39;00m\\n\\u001b[1;32m    335\\u001b[0m \\n\\u001b[1;32m    336\\u001b[0m \\u001b[39m\\\"\\\"\\\"\\u001b[39;00m\\n\\u001b[0;32m--> 337\\u001b[0m obj, end \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49mraw_decode(s, idx\\u001b[39m=\\u001b[39;49m_w(s, \\u001b[39m0\\u001b[39;49m)\\u001b[39m.\\u001b[39;49mend())\\n\\u001b[1;32m    338\\u001b[0m end \\u001b[39m=\\u001b[39m _w(s, end)\\u001b[39m.\\u001b[39mend()\\n\\nFile \\u001b[0;32m/opt/homebrew/Cellar/python@3.10/3.10.11/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/decoder.py:355\\u001b[0m, in \\u001b[0;36mJSONDecoder.raw_decode\\u001b[0;34m(self, s, idx)\\u001b[0m\\n\\u001b[1;32m    354\\u001b[0m \\u001b[39mexcept\\u001b[39;00m \\u001b[39mStopIteration\\u001b[39;00m \\u001b[39mas\\u001b[39;00m err:\\n\\u001b[0;32m--> 355\\u001b[0m     \\u001b[39mraise\\u001b[39;00m JSONDecodeError(\\u001b[39m\\\"\\u001b[39m\\u001b[39mExpecting value\\u001b[39m\\u001b[39m\\\"\\u001b[39m, s, err\\u001b[39m.\\u001b[39mvalue) \\u001b[39mfrom\\u001b[39;00m \\u001b[39mNone\\u001b[39;00m\\n\\u001b[1;32m    356\\u001b[0m \\u001b[39mreturn\\u001b[39;00m obj, end\\n\\n\\u001b[0;31mJSONDecodeError\\u001b[0m: Expecting value: line 1 column 1 (char 0)\\n\\nDuring handling of the above exception, another exception occurred:\\n\\n\\u001b[0;31mOutputParserException\\u001b[0m                     Traceback (most recent call last)\\nCell \\u001b[0;32mIn[13], line 19\\u001b[0m\\n\\u001b[1;32m     16\\u001b[0m agent \\u001b[39m=\\u001b[39m initialize_agent(tools, chat, agent\\u001b[39m=\\u001b[39mAgentType\\u001b[39m.\\u001b[39mCHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose\\u001b[39m=\\u001b[39m\\u001b[39mTrue\\u001b[39;00m)\\n\\u001b[1;32m     18\\u001b[0m \\u001b[39m# Now let's test it out!\\u001b[39;00m\\n\\u001b[0;32m---> 19\\u001b[0m agent\\u001b[39m.\\u001b[39;49mrun(\\u001b[39m\\\"\\u001b[39;49m\\u001b[39mWhat is EPAM price in NYSE? What is that number raised to the 0.23 power?\\u001b[39;49m\\u001b[39m\\\"\\u001b[39;49m)\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/chains/base.py:236\\u001b[0m, in \\u001b[0;36mChain.run\\u001b[0;34m(self, callbacks, *args, **kwargs)\\u001b[0m\\n\\u001b[1;32m    234\\u001b[0m     \\u001b[39mif\\u001b[39;00m \\u001b[39mlen\\u001b[39m(args) \\u001b[39m!=\\u001b[39m \\u001b[39m1\\u001b[39m:\\n\\u001b[1;32m    235\\u001b[0m         \\u001b[39mraise\\u001b[39;00m \\u001b[39mValueError\\u001b[39;00m(\\u001b[39m\\\"\\u001b[39m\\u001b[39m`run` supports only one positional argument.\\u001b[39m\\u001b[39m\\\"\\u001b[39m)\\n\\u001b[0;32m--> 236\\u001b[0m     \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39;49m(args[\\u001b[39m0\\u001b[39;49m], callbacks\\u001b[39m=\\u001b[39;49mcallbacks)[\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39moutput_keys[\\u001b[39m0\\u001b[39m]]\\n\\u001b[1;32m    238\\u001b[0m \\u001b[39mif\\u001b[39;00m kwargs \\u001b[39mand\\u001b[39;00m \\u001b[39mnot\\u001b[39;00m args:\\n\\u001b[1;32m    239\\u001b[0m     \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39m(kwargs, callbacks\\u001b[39m=\\u001b[39mcallbacks)[\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39moutput_keys[\\u001b[39m0\\u001b[39m]]\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/chains/base.py:140\\u001b[0m, in \\u001b[0;36mChain.__call__\\u001b[0;34m(self, inputs, return_only_outputs, callbacks)\\u001b[0m\\n\\u001b[1;32m    138\\u001b[0m \\u001b[39mexcept\\u001b[39;00m (\\u001b[39mKeyboardInterrupt\\u001b[39;00m, \\u001b[39mException\\u001b[39;00m) \\u001b[39mas\\u001b[39;00m e:\\n\\u001b[1;32m    139\\u001b[0m     run_manager\\u001b[39m.\\u001b[39mon_chain_error(e)\\n\\u001b[0;32m--> 140\\u001b[0m     \\u001b[39mraise\\u001b[39;00m e\\n\\u001b[1;32m    141\\u001b[0m run_manager\\u001b[39m.\\u001b[39mon_chain_end(outputs)\\n\\u001b[1;32m    142\\u001b[0m \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39mprep_outputs(inputs, outputs, return_only_outputs)\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/chains/base.py:134\\u001b[0m, in \\u001b[0;36mChain.__call__\\u001b[0;34m(self, inputs, return_only_outputs, callbacks)\\u001b[0m\\n\\u001b[1;32m    128\\u001b[0m run_manager \\u001b[39m=\\u001b[39m callback_manager\\u001b[39m.\\u001b[39mon_chain_start(\\n\\u001b[1;32m    129\\u001b[0m     {\\u001b[39m\\\"\\u001b[39m\\u001b[39mname\\u001b[39m\\u001b[39m\\\"\\u001b[39m: \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m\\u001b[39m__class__\\u001b[39m\\u001b[39m.\\u001b[39m\\u001b[39m__name__\\u001b[39m},\\n\\u001b[1;32m    130\\u001b[0m     inputs,\\n\\u001b[1;32m    131\\u001b[0m )\\n\\u001b[1;32m    132\\u001b[0m \\u001b[39mtry\\u001b[39;00m:\\n\\u001b[1;32m    133\\u001b[0m     outputs \\u001b[39m=\\u001b[39m (\\n\\u001b[0;32m--> 134\\u001b[0m         \\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49m_call(inputs, run_manager\\u001b[39m=\\u001b[39;49mrun_manager)\\n\\u001b[1;32m    135\\u001b[0m         \\u001b[39mif\\u001b[39;00m new_arg_supported\\n\\u001b[1;32m    136\\u001b[0m         \\u001b[39melse\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_call(inputs)\\n\\u001b[1;32m    137\\u001b[0m     )\\n\\u001b[1;32m    138\\u001b[0m \\u001b[39mexcept\\u001b[39;00m (\\u001b[39mKeyboardInterrupt\\u001b[39;00m, \\u001b[39mException\\u001b[39;00m) \\u001b[39mas\\u001b[39;00m e:\\n\\u001b[1;32m    139\\u001b[0m     run_manager\\u001b[39m.\\u001b[39mon_chain_error(e)\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/agents/agent.py:951\\u001b[0m, in \\u001b[0;36mAgentExecutor._call\\u001b[0;34m(self, inputs, run_manager)\\u001b[0m\\n\\u001b[1;32m    949\\u001b[0m \\u001b[39m# We now enter the agent loop (until it returns something).\\u001b[39;00m\\n\\u001b[1;32m    950\\u001b[0m \\u001b[39mwhile\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_should_continue(iterations, time_elapsed):\\n\\u001b[0;32m--> 951\\u001b[0m     next_step_output \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49m_take_next_step(\\n\\u001b[1;32m    952\\u001b[0m         name_to_tool_map,\\n\\u001b[1;32m    953\\u001b[0m         color_mapping,\\n\\u001b[1;32m    954\\u001b[0m         inputs,\\n\\u001b[1;32m    955\\u001b[0m         intermediate_steps,\\n\\u001b[1;32m    956\\u001b[0m         run_manager\\u001b[39m=\\u001b[39;49mrun_manager,\\n\\u001b[1;32m    957\\u001b[0m     )\\n\\u001b[1;32m    958\\u001b[0m     \\u001b[39mif\\u001b[39;00m \\u001b[39misinstance\\u001b[39m(next_step_output, AgentFinish):\\n\\u001b[1;32m    959\\u001b[0m         \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39m_return(\\n\\u001b[1;32m    960\\u001b[0m             next_step_output, intermediate_steps, run_manager\\u001b[39m=\\u001b[39mrun_manager\\n\\u001b[1;32m    961\\u001b[0m         )\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/agents/agent.py:773\\u001b[0m, in \\u001b[0;36mAgentExecutor._take_next_step\\u001b[0;34m(self, name_to_tool_map, color_mapping, inputs, intermediate_steps, run_manager)\\u001b[0m\\n\\u001b[1;32m    771\\u001b[0m     raise_error \\u001b[39m=\\u001b[39m \\u001b[39mFalse\\u001b[39;00m\\n\\u001b[1;32m    772\\u001b[0m \\u001b[39mif\\u001b[39;00m raise_error:\\n\\u001b[0;32m--> 773\\u001b[0m     \\u001b[39mraise\\u001b[39;00m e\\n\\u001b[1;32m    774\\u001b[0m text \\u001b[39m=\\u001b[39m \\u001b[39mstr\\u001b[39m(e)\\n\\u001b[1;32m    775\\u001b[0m \\u001b[39mif\\u001b[39;00m \\u001b[39misinstance\\u001b[39m(\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39mhandle_parsing_errors, \\u001b[39mbool\\u001b[39m):\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/agents/agent.py:762\\u001b[0m, in \\u001b[0;36mAgentExecutor._take_next_step\\u001b[0;34m(self, name_to_tool_map, color_mapping, inputs, intermediate_steps, run_manager)\\u001b[0m\\n\\u001b[1;32m    756\\u001b[0m \\u001b[39m\\u001b[39m\\u001b[39m\\\"\\\"\\\"Take a single step in the thought-action-observation loop.\\u001b[39;00m\\n\\u001b[1;32m    757\\u001b[0m \\n\\u001b[1;32m    758\\u001b[0m \\u001b[39mOverride this to take control of how the agent makes and acts on choices.\\u001b[39;00m\\n\\u001b[1;32m    759\\u001b[0m \\u001b[39m\\\"\\\"\\\"\\u001b[39;00m\\n\\u001b[1;32m    760\\u001b[0m \\u001b[39mtry\\u001b[39;00m:\\n\\u001b[1;32m    761\\u001b[0m     \\u001b[39m# Call the LLM to see what to do.\\u001b[39;00m\\n\\u001b[0;32m--> 762\\u001b[0m     output \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49magent\\u001b[39m.\\u001b[39;49mplan(\\n\\u001b[1;32m    763\\u001b[0m         intermediate_steps,\\n\\u001b[1;32m    764\\u001b[0m         callbacks\\u001b[39m=\\u001b[39;49mrun_manager\\u001b[39m.\\u001b[39;49mget_child() \\u001b[39mif\\u001b[39;49;00m run_manager \\u001b[39melse\\u001b[39;49;00m \\u001b[39mNone\\u001b[39;49;00m,\\n\\u001b[1;32m    765\\u001b[0m         \\u001b[39m*\\u001b[39;49m\\u001b[39m*\\u001b[39;49minputs,\\n\\u001b[1;32m    766\\u001b[0m     )\\n\\u001b[1;32m    767\\u001b[0m \\u001b[39mexcept\\u001b[39;00m OutputParserException \\u001b[39mas\\u001b[39;00m e:\\n\\u001b[1;32m    768\\u001b[0m     \\u001b[39mif\\u001b[39;00m \\u001b[39misinstance\\u001b[39m(\\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39mhandle_parsing_errors, \\u001b[39mbool\\u001b[39m):\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/agents/agent.py:444\\u001b[0m, in \\u001b[0;36mAgent.plan\\u001b[0;34m(self, intermediate_steps, callbacks, **kwargs)\\u001b[0m\\n\\u001b[1;32m    442\\u001b[0m full_inputs \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39mget_full_inputs(intermediate_steps, \\u001b[39m*\\u001b[39m\\u001b[39m*\\u001b[39mkwargs)\\n\\u001b[1;32m    443\\u001b[0m full_output \\u001b[39m=\\u001b[39m \\u001b[39mself\\u001b[39m\\u001b[39m.\\u001b[39mllm_chain\\u001b[39m.\\u001b[39mpredict(callbacks\\u001b[39m=\\u001b[39mcallbacks, \\u001b[39m*\\u001b[39m\\u001b[39m*\\u001b[39mfull_inputs)\\n\\u001b[0;32m--> 444\\u001b[0m \\u001b[39mreturn\\u001b[39;00m \\u001b[39mself\\u001b[39;49m\\u001b[39m.\\u001b[39;49moutput_parser\\u001b[39m.\\u001b[39;49mparse(full_output)\\n\\nFile \\u001b[0;32m~/Projects/epam/python/langchain/env/lib/python3.10/site-packages/langchain/agents/chat/output_parser.py:25\\u001b[0m, in \\u001b[0;36mChatOutputParser.parse\\u001b[0;34m(self, text)\\u001b[0m\\n\\u001b[1;32m     22\\u001b[0m     \\u001b[39mreturn\\u001b[39;00m AgentAction(response[\\u001b[39m\\\"\\u001b[39m\\u001b[39maction\\u001b[39m\\u001b[39m\\\"\\u001b[39m], response[\\u001b[39m\\\"\\u001b[39m\\u001b[39maction_input\\u001b[39m\\u001b[39m\\\"\\u001b[39m], text)\\n\\u001b[1;32m     24\\u001b[0m \\u001b[39mexcept\\u001b[39;00m \\u001b[39mException\\u001b[39;00m:\\n\\u001b[0;32m---> 25\\u001b[0m     \\u001b[39mraise\\u001b[39;00m OutputParserException(\\u001b[39mf\\u001b[39m\\u001b[39m\\\"\\u001b[39m\\u001b[39mCould not parse LLM output: \\u001b[39m\\u001b[39m{\\u001b[39;00mtext\\u001b[39m}\\u001b[39;00m\\u001b[39m\\\"\\u001b[39m)\\n\\n\\u001b[0;31mOutputParserException\\u001b[0m: Could not parse LLM output: Thought: I need to use a search engine to find the current price of EPAM on NYSE and a calculator to raise it to the 0.23 power.\\n\\nAction:\\n```\\n{\\n  \\\"action\\\": \\\"Search\\\",\\n  \\\"action_input\\\": \\\"EPAM NYSE price\\\"\\n}\\n```\\n\\n\"\r\n}\r\n```\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [X] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [X] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\n```\r\nfrom langchain.agents import load_tools\r\nfrom langchain.agents import initialize_agent\r\nfrom langchain.agents import AgentType\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.llms import OpenAI\r\n\r\n# First, let's load the language model we're going to use to control the agent.\r\nchat = ChatOpenAI(temperature=0)\r\n\r\n# Next, let's load some tools to use. Note that the `llm-math` tool uses an LLM, so we need to pass that in.\r\nllm = OpenAI(temperature=0)\r\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\r\n\r\n\r\n# Finally, let's initialize an agent with the tools, the language model, and the type of agent we want to use.\r\nagent = initialize_agent(tools, chat, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\r\n\r\n# Now let's test it out!\r\nagent.run(\"What is EPAM price in NYSE? What is that number raised to the 0.23 power?\")\r\n```\n\n### Expected behavior\n\nShould work",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5299/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5299/timeline",
        "performed_via_github_app": null,
        "state_reason": "completed"
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5297",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5297/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5297/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5297/events",
        "html_url": "https://github.com/langchain-ai/langchain/pull/5297",
        "id": 1727534737,
        "node_id": "PR_kwDOIPDwls5Rb587",
        "number": 5297,
        "title": "Fixed passing creds to VertexAI LLM",
        "user": {
            "login": "lkuligin",
            "id": 11026406,
            "node_id": "MDQ6VXNlcjExMDI2NDA2",
            "avatar_url": "https://avatars.githubusercontent.com/u/11026406?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lkuligin",
            "html_url": "https://github.com/lkuligin",
            "followers_url": "https://api.github.com/users/lkuligin/followers",
            "following_url": "https://api.github.com/users/lkuligin/following{/other_user}",
            "gists_url": "https://api.github.com/users/lkuligin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lkuligin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lkuligin/subscriptions",
            "organizations_url": "https://api.github.com/users/lkuligin/orgs",
            "repos_url": "https://api.github.com/users/lkuligin/repos",
            "events_url": "https://api.github.com/users/lkuligin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lkuligin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2023-05-26T12:28:45Z",
        "updated_at": "2023-05-26T15:32:55Z",
        "closed_at": "2023-05-26T15:31:03Z",
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "draft": false,
        "pull_request": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/pulls/5297",
            "html_url": "https://github.com/langchain-ai/langchain/pull/5297",
            "diff_url": "https://github.com/langchain-ai/langchain/pull/5297.diff",
            "patch_url": "https://github.com/langchain-ai/langchain/pull/5297.patch",
            "merged_at": "2023-05-26T15:31:02Z"
        },
        "body": "# Fixed passing creds to VertexAI LLM\r\n\r\nFixes  #5279 \r\n\r\nIt looks like we should drop a type annotation for Credentials.\r\n\r\n",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5297/reactions",
            "total_count": 0,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 0
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5297/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5296",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5296/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5296/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5296/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5296",
        "id": 1727514993,
        "node_id": "I_kwDOIPDwls5m98lx",
        "number": 5296,
        "title": "APIConnectionError: Error communicating with OpenAI.",
        "user": {
            "login": "AvikantSrivastava",
            "id": 41926176,
            "node_id": "MDQ6VXNlcjQxOTI2MTc2",
            "avatar_url": "https://avatars.githubusercontent.com/u/41926176?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AvikantSrivastava",
            "html_url": "https://github.com/AvikantSrivastava",
            "followers_url": "https://api.github.com/users/AvikantSrivastava/followers",
            "following_url": "https://api.github.com/users/AvikantSrivastava/following{/other_user}",
            "gists_url": "https://api.github.com/users/AvikantSrivastava/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AvikantSrivastava/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AvikantSrivastava/subscriptions",
            "organizations_url": "https://api.github.com/users/AvikantSrivastava/orgs",
            "repos_url": "https://api.github.com/users/AvikantSrivastava/repos",
            "events_url": "https://api.github.com/users/AvikantSrivastava/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AvikantSrivastava/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2023-05-26T12:14:47Z",
        "updated_at": "2023-11-08T10:22:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\n`python 3.11`\r\n```\r\nfastapi==0.95.1\r\nlangchain==0.0.180\r\npydantic==1.10.7\r\nuvicorn==0.21.1\r\nopenai==0.27.4\r\n```\n\n### Who can help?\n\n@agola11 \r\n@hwchase17 \r\n\n\n### Information\n\n- [ ] The official example notebooks/scripts\n- [X] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [ ] Embedding Models\n- [ ] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [ ] Document Loaders\n- [ ] Vector Stores / Retrievers\n- [ ] Memory\n- [ ] Agents / Agent Executors\n- [ ] Tools / Toolkits\n- [ ] Chains\n- [X] Callbacks/Tracing\n- [X] Async\n\n### Reproduction\n\nI am trying to create a streaming endpoint in Fast API, below are the files\r\n\r\n`main.py`\r\n```python\r\nfrom fastapi import FastAPI\r\nfrom src.chat_stream import ChatOpenAIStreamingResponse, send_message, StreamRequest\r\n\r\napp = FastAPI()\r\n\r\n@app.post(\"/chat_streaming\", response_class=StreamingResponse)\r\nasync def chat(body: StreamRequest ):\r\n    return ChatOpenAIStreamingResponse(send_message(body.message), media_type=\"text/event-stream\")\r\n```\r\n\r\n`src/chat_stream.py`\r\n```python\r\nfrom typing import Awaitable, Callable, Union\r\n\r\nSender = Callable[[Union[str, bytes]], Awaitable[None]]\r\n\r\nfrom starlette.types import Send\r\nfrom typing import Any, Optional, Awaitable, Callable, Iterator, Union\r\nfrom langchain.schema import HumanMessage\r\nfrom pydantic import BaseModel\r\nfrom fastapi.responses import StreamingResponse\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.callbacks.base import AsyncCallbackHandler\r\nfrom langchain.callbacks.manager import AsyncCallbackManager\r\n\r\n\r\nclass EmptyIterator(Iterator[Union[str, bytes]]):\r\n    def __iter__(self):\r\n        return self\r\n\r\n    def __next__(self):\r\n        raise StopIteration\r\n\r\n\r\nclass AsyncStreamCallbackHandler(AsyncCallbackHandler):\r\n    \"\"\"Callback handler for streaming, inheritance from AsyncCallbackHandler.\"\"\"\r\n\r\n    def __init__(self, send: Sender):\r\n        super().__init__()\r\n        self.send = send\r\n\r\n    async def on_llm_new_token(self, token: str, **kwargs: Any) -> None:\r\n        \"\"\"Rewrite on_llm_new_token to send token to client.\"\"\"\r\n        await self.send(f\"data: {token}\\n\\n\")\r\n\r\n\r\nclass ChatOpenAIStreamingResponse(StreamingResponse):\r\n    \"\"\"Streaming response for openai chat model, inheritance from StreamingResponse.\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        generate: Callable[[Sender], Awaitable[None]],\r\n        status_code: int = 200,\r\n        media_type: Optional[str] = None,\r\n    ) -> None:\r\n        super().__init__(\r\n            content=EmptyIterator(), status_code=status_code, media_type=media_type\r\n        )\r\n        self.generate = generate\r\n\r\n    async def stream_response(self, send: Send) -> None:\r\n        \"\"\"Rewrite stream_response to send response to client.\"\"\"\r\n        await send(\r\n            {\r\n                \"type\": \"http.response.start\",\r\n                \"status\": self.status_code,\r\n                \"headers\": self.raw_headers,\r\n            }\r\n        )\r\n\r\n        async def send_chunk(chunk: Union[str, bytes]):\r\n            if not isinstance(chunk, bytes):\r\n                chunk = chunk.encode(self.charset)\r\n            await send({\"type\": \"http.response.body\", \"body\": chunk, \"more_body\": True})\r\n\r\n        # send body to client\r\n        await self.generate(send_chunk)\r\n\r\n        # send empty body to client to close connection\r\n        await send({\"type\": \"http.response.body\", \"body\": b\"\", \"more_body\": False})\r\n\r\n\r\ndef send_message(message: str) -> Callable[[Sender], Awaitable[None]]:\r\n    async def generate(send: Sender):\r\n        model = ChatOpenAI(\r\n            streaming=True,\r\n            verbose=True,\r\n            callback_manager=AsyncCallbackManager([AsyncStreamCallbackHandler(send)]),\r\n        )\r\n        await model.agenerate(messages=[[HumanMessage(content=message)]])\r\n\r\n    return generate\r\n\r\n\r\nclass StreamRequest(BaseModel):\r\n    \"\"\"Request body for streaming.\"\"\"\r\n\r\n    message: str\r\n```\n\n### Expected behavior\n\nThe Endpoint should stream the response from LLM Chain, instead I am getting this error\r\n\r\n```\r\nRetrying langchain.chat_models.openai.acompletion_with_retry.<locals>._completion_with_retry in 1.0 seconds as it raised APIConnectionError: Error communicating with OpenAI.\r\nRetrying langchain.chat_models.openai.acompletion_with_retry.<locals>._completion_with_retry in 2.0 seconds as it raised APIConnectionError: Error communicating with OpenAI.\r\nRetrying langchain.chat_models.openai.acompletion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised APIConnectionError: Error communicating with OpenAI.\r\nRetrying langchain.chat_models.openai.acompletion_with_retry.<locals>._completion_with_retry in 8.0 seconds as it raised APIConnectionError: Error communicating with OpenAI.\r\nRetrying langchain.chat_models.openai.acompletion_with_retry.<locals>._completion_with_retry in 16.0 seconds as it raised APIConnectionError: Error communicating with OpenAI.\r\n```\r\n\r\n```python\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/connector.py\", line 980, in _wrap_create_connection\r\n    return await self._loop.create_connection(*args, **kwargs)  # type: ignore[return-value]  # noqa\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 1098, in create_connection\r\n    transport, protocol = await self._create_connection_transport(\r\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 1131, in _create_connection_transport\r\n    await waiter\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/sslproto.py\", line 577, in _on_handshake_complete\r\n    raise handshake_exc\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/sslproto.py\", line 559, in _do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/ssl.py\", line 979, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Project/venv/lib/python3.11/site-packages/openai/api_requestor.py\", line 588, in arequest_raw\r\n    result = await session.request(**request_kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/client.py\", line 536, in _request\r\n    conn = await self._connector.connect(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/connector.py\", line 540, in connect\r\n    proto = await self._create_connection(req, traces, timeout)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/connector.py\", line 901, in _create_connection\r\n    _, proto = await self._create_direct_connection(req, traces, timeout)\r\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/connector.py\", line 1206, in _create_direct_connection\r\n    raise last_exc\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/connector.py\", line 1175, in _create_direct_connection\r\n    transp, proto = await self._wrap_create_connection(\r\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/aiohttp/connector.py\", line 982, in _wrap_create_connection\r\n    raise ClientConnectorCertificateError(req.connection_key, exc) from exc\r\naiohttp.client_exceptions.ClientConnectorCertificateError: Cannot connect to host api.openai.com:443 ssl:True [SSLCertVerificationError: (1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)')]\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Project/venv/lib/python3.11/site-packages/uvicorn/protocols/http/h11_impl.py\", line 429, in run_asgi\r\n    result = await app(  # type: ignore[func-returns-value]\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/uvicorn/middleware/proxy_headers.py\", line 78, in __call__\r\n    return await self.app(scope, receive, send)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/fastapi/applications.py\", line 276, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/applications.py\", line 122, in __call__\r\n    await self.middleware_stack(scope, receive, send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 184, in __call__\r\n    raise exc\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/middleware/errors.py\", line 162, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\r\n    raise exc\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/Project/venv/lib/python3.11/site-packages/fastapi/middleware/asyncexitstack.py\", line 21, in __call__\r\n    raise e\r\n  File \"/Project/venv/lib/python3.11/site-packages/fastapi/middleware/asyncexitstack.py\", line 18, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/routing.py\", line 718, in __call__\r\n    await route.handle(scope, receive, send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/routing.py\", line 276, in handle\r\n    await self.app(scope, receive, send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/routing.py\", line 69, in app\r\n    await response(scope, receive, send)\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/responses.py\", line 270, in __call__\r\n    async with anyio.create_task_group() as task_group:\r\n  File \"/Project/venv/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 662, in __aexit__\r\n    raise exceptions[0]\r\n  File \"/Project/venv/lib/python3.11/site-packages/starlette/responses.py\", line 273, in wrap\r\n    await func()\r\n  File \"/Project/src/app.py\", line 67, in stream_response\r\n    await self.generate(send_chunk)\r\n  File \"/Project/src/app.py\", line 80, in generate\r\n    await model.agenerate(messages=[[HumanMessage(content=message)]])\r\n  File \"/Project/venv/lib/python3.11/site-packages/langchain/chat_models/base.py\", line 63, in agenerate\r\n    results = await asyncio.gather(\r\n              ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/langchain/chat_models/openai.py\", line 297, in _agenerate\r\n    async for stream_resp in await acompletion_with_retry(\r\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/langchain/chat_models/openai.py\", line 63, in acompletion_with_retry\r\n    return await _completion_with_retry(**kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/tenacity/_asyncio.py\", line 88, in async_wrapped\r\n    return await fn(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/tenacity/_asyncio.py\", line 47, in __call__\r\n    do = self.iter(retry_state=retry_state)\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/tenacity/__init__.py\", line 325, in iter\r\n    raise retry_exc.reraise()\r\n          ^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/tenacity/__init__.py\", line 158, in reraise\r\n    raise self.last_attempt.result()\r\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py\", line 449, in result\r\n    return self.__get_result()\r\n           ^^^^^^^^^^^^^^^^^^^\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/concurrent/futures/_base.py\", line 401, in __get_result\r\n    raise self._exception\r\n  File \"/Project/venv/lib/python3.11/site-packages/tenacity/_asyncio.py\", line 50, in __call__\r\n    result = await fn(*args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/langchain/chat_models/openai.py\", line 61, in _completion_with_retry\r\n    return await llm.client.acreate(**kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/openai/api_resources/chat_completion.py\", line 45, in acreate\r\n    return await super().acreate(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/openai/api_resources/abstract/engine_api_resource.py\", line 217, in acreate\r\n    response, _, api_key = await requestor.arequest(\r\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/openai/api_requestor.py\", line 300, in arequest\r\n    result = await self.arequest_raw(\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Project/venv/lib/python3.11/site-packages/openai/api_requestor.py\", line 605, in arequest_raw\r\n    raise error.APIConnectionError(\"Error communicating with OpenAI\") from e\r\nopenai.error.APIConnectionError: Error communicating with OpenAI\r\n\r\n```",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5296/reactions",
            "total_count": 13,
            "+1": 3,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 1,
            "heart": 0,
            "rocket": 0,
            "eyes": 9
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5296/timeline",
        "performed_via_github_app": null,
        "state_reason": null
    },
    {
        "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5295",
        "repository_url": "https://api.github.com/repos/langchain-ai/langchain",
        "labels_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5295/labels{/name}",
        "comments_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5295/comments",
        "events_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5295/events",
        "html_url": "https://github.com/langchain-ai/langchain/issues/5295",
        "id": 1727465007,
        "node_id": "I_kwDOIPDwls5m9wYv",
        "number": 5295,
        "title": "Get the source document info with result ",
        "user": {
            "login": "Sadaf-Syeda",
            "id": 59745163,
            "node_id": "MDQ6VXNlcjU5NzQ1MTYz",
            "avatar_url": "https://avatars.githubusercontent.com/u/59745163?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Sadaf-Syeda",
            "html_url": "https://github.com/Sadaf-Syeda",
            "followers_url": "https://api.github.com/users/Sadaf-Syeda/followers",
            "following_url": "https://api.github.com/users/Sadaf-Syeda/following{/other_user}",
            "gists_url": "https://api.github.com/users/Sadaf-Syeda/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Sadaf-Syeda/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Sadaf-Syeda/subscriptions",
            "organizations_url": "https://api.github.com/users/Sadaf-Syeda/orgs",
            "repos_url": "https://api.github.com/users/Sadaf-Syeda/repos",
            "events_url": "https://api.github.com/users/Sadaf-Syeda/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Sadaf-Syeda/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "closed",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2023-05-26T11:41:44Z",
        "updated_at": "2023-10-23T16:08:27Z",
        "closed_at": "2023-10-23T16:08:26Z",
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "### System Info\n\nValueError: `run` not supported when there is not exactly one output key. Got ['result', 'source_documents'\r\n]\r\n\n\n### Who can help?\n\n_No response_\n\n### Information\n\n- [X] The official example notebooks/scripts\n- [ ] My own modified scripts\n\n### Related Components\n\n- [X] LLMs/Chat Models\n- [X] Embedding Models\n- [X] Prompts / Prompt Templates / Prompt Selectors\n- [ ] Output Parsers\n- [X] Document Loaders\n- [X] Vector Stores / Retrievers\n- [X] Memory\n- [X] Agents / Agent Executors\n- [X] Tools / Toolkits\n- [X] Chains\n- [ ] Callbacks/Tracing\n- [ ] Async\n\n### Reproduction\n\nqa = RetrievalQA.from_chain_type(\r\n    llm=OpenAI(),\r\n    chain_type = \"stuff\",\r\n    retriever=db.as_retriever(),\r\nreturn_source_documents=True\r\n)\r\n\r\nagent = ZeroShotAgent(llm_chain=llm_chain, tools=tools, verbose=True)#, output_keys=['result','source_documents'])\r\nagent_chain = AgentExecutor.from_agent_and_tools(\r\n  agent=agent, tools=tools, verbose=True, memory=memory)# return_intermediate_steps=True)#, output_keys=['result','source_documents']\r\n \r\n#)\r\n\n\n### Expected behavior\n\nReturns the answer and source doc as well ",
        "reactions": {
            "url": "https://api.github.com/repos/langchain-ai/langchain/issues/5295/reactions",
            "total_count": 1,
            "+1": 0,
            "-1": 0,
            "laugh": 0,
            "hooray": 0,
            "confused": 0,
            "heart": 0,
            "rocket": 0,
            "eyes": 1
        },
        "timeline_url": "https://api.github.com/repos/langchain-ai/langchain/issues/5295/timeline",
        "performed_via_github_app": null,
        "state_reason": "not_planned"
    }
]